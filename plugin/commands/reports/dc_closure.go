package reports

import (
	"fmt"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.com/softlayer/softlayer-go/filter"
	"github.com/softlayer/softlayer-go/services"
	"github.com/softlayer/softlayer-go/session"
	"github.com/softlayer/softlayer-go/sl"

	"github.com/IBM-Cloud/ibm-cloud-cli-sdk/bluemix/terminal"
	"github.com/urfave/cli"

	. "github.ibm.com/SoftLayer/softlayer-cli/plugin/i18n"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/metadata"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/utils"
)

type Search_Result struct {
	datatypes.Entity
	MatchedTerms   []string                `json:"matchedTerms,omitempty" xmlrpc:"matchedTerms,omitempty"`
	RelevanceScore *datatypes.Float64      `json:"relevanceScore,omitempty" xmlrpc:"relevanceScore,omitempty"`
	Resource       *datatypes.Network_Vlan `json:"resource,omitempty" xmlrpc:"resource,omitempty"`
	ResourceType   *string                 `json:"resourceType,omitempty" xmlrpc:"resourceType,omitempty"`
}

type Resource_Object struct {
	Hostname     string
	Id           int
	PublicVlan   string
	PrivateVlan  string
	ResourceType string
	CancelDate   string
}

type DCClosuresCommand struct {
	UI      terminal.UI
	Session *session.Session
}

func NewDCClosuresCommand(ui terminal.UI, session *session.Session) (cmd *DCClosuresCommand) {
	return &DCClosuresCommand{
		UI:      ui,
		Session: session,
	}
}

func DCClosuresMetaData() cli.Command {
	return cli.Command{
		Category:    "reports",
		Name:        "datacenter-closures",
		Description: T("Reports which resources are still active in Datacenters that are scheduled to be closed."),
		Usage:       T(`${COMMAND_NAME} sl reports datacenter-closures`),
		Flags: []cli.Flag{
			metadata.OutputFlag(),
		},
	}
}

func (cmd *DCClosuresCommand) Run(c *cli.Context) error {

	outputFormat, err := metadata.CheckOutputFormat(c, cmd.UI)
	if err != nil {
		return err
	}

	closing_filter := filter.New(
		filter.Path("capabilities").In("CLOSURE_ANNOUNCED"),
		filter.Path("name").OrderBy("DESC"),
	)
	closing_mask := `mask[name, datacenterLongName, frontendRouterId, capabilities, datacenterId, backendRouterId,
backendRouterName, frontendRouterName]`
	search_mask := `mask[
        resource(SoftLayer_Network_Vlan)[
            id,fullyQualifiedName,name,note,vlanNumber,networkSpace,
            virtualGuests[id,fullyQualifiedDomainName,billingItem[id,cancellationDate]],
            hardware[id,fullyQualifiedDomainName,billingItem[id,cancellationDate]],
            networkVlanFirewall[id,primaryIpAddress,billingItem[id,cancellationDate]],
            privateNetworkGateways[id,name,networkSpace],
            publicNetworkGateways[id,name,networkSpace]
        ]
    ]`
	resource_search := `_objectType:SoftLayer_Network_Vlan  primaryRouter.hostname: '%v' || primaryRouter.hostname: '%v'`
	pod_service := services.GetNetworkPodService(cmd.Session)
	// Get all the pods that are closing
	closing_pods, err := pod_service.Mask(closing_mask).Filter(closing_filter.Build()).GetAllObjects()
	if err != nil {
		return err
	}

	table := cmd.UI.Table(
		[]string{"Id", "Name", "Public VLAN", "Private VLAN", "Type", "Datacenter", "POD", "Cancellation Date"},
	)
	for _, pod := range closing_pods {
		resourceCollection := make(map[int]Resource_Object)
		search_string := fmt.Sprintf(resource_search, *pod.BackendRouterName, *pod.FrontendRouterName)
		fmt.Printf("Searching for %v\n", search_string)

		// Search the VLAN for resources
		vlans, err := AdvancedSearch(cmd.Session, search_string, search_mask)
		if err != nil {
			return err
		}

		// Iterate through the vlans looking for resources and formatting them nicely.
		for _, vlan := range vlans {
			ProcessVlan(vlan.Resource, resourceCollection)
		}

		// Add the resources to a table
		for _, resource := range resourceCollection {
			table.Add(
				fmt.Sprintf("%v", resource.Id),
				resource.Hostname,
				resource.PublicVlan,
				resource.PrivateVlan,
				resource.ResourceType,
				*pod.DatacenterLongName,
				*pod.Name,
				resource.CancelDate,
			)
		}
	}

	if outputFormat == "JSON" {
		table.PrintJson()
	} else {
		table.Print()
	}

	return nil
}

// It is required to re-define the AdvancedSearch method here so that we can force the `Entity` property to be a
// datatypes.Network_Vlan struct, instead of the generic `Entity` which is autogenerated.
func AdvancedSearch(sess *session.Session, q string, mask string) (resp []Search_Result, err error) {
	params := []interface{}{q}
	var options sl.Options
	options.Mask = mask
	err = sess.DoRequest("SoftLayer_Search", "advancedSearch", params, &options, &resp)
	return
}

// Pulls out the resource objects from the Vlan into resources
func ProcessVlan(vlan *datatypes.Network_Vlan, resources map[int]Resource_Object) {
	// VIRTUAL GUESTS
	if len(vlan.VirtualGuests) > 0 {
		for _, res := range vlan.VirtualGuests {
			vsiId := *res.Id
			resources[vsiId] = buildResourceObject(
				*res.FullyQualifiedDomainName,
				vsiId,
				vlan,
				"Virtual Guest",
				sl.Grab(res, "BillingItem.CancellationDate").(datatypes.Time),
				resources[vsiId],
			)
		}
	}

	// HARDWARE SERVERS
	if len(vlan.Hardware) > 0 {
		for _, res := range vlan.Hardware {
			vsiId := *res.Id
			resources[vsiId] = buildResourceObject(
				*res.FullyQualifiedDomainName,
				vsiId,
				vlan,
				"Hardware",
				sl.Grab(res, "BillingItem.CancellationDate").(datatypes.Time),
				resources[vsiId],
			)
		}
	}

	// VLAN FIREWALL
	// There can be only 1 of these
	if vlan.NetworkVlanFirewall != nil {
		vsiId := *vlan.NetworkVlanFirewall.Id
		resources[vsiId] = buildResourceObject(
			*vlan.NetworkVlanFirewall.PrimaryIpAddress,
			vsiId,
			vlan,
			"Firewall",
			sl.Grab(*vlan.NetworkVlanFirewall, "BillingItem.CancellationDate").(datatypes.Time),
			resources[vsiId],
		)
	}

	// PRIVATE GATEWAY
	if len(vlan.PrivateNetworkGateways) > 0 {
		for _, res := range vlan.PrivateNetworkGateways {
			vsiId := *res.Id
			resources[vsiId] = buildResourceObject(
				*res.Name,
				vsiId,
				vlan,
				"Gateway",
				datatypes.Time{},
				resources[vsiId],
			)
		}
	}

	// PUBLIC GATEWAY
	if len(vlan.PublicNetworkGateways) > 0 {
		for _, res := range vlan.PublicNetworkGateways {
			vsiId := *res.Id
			fmt.Printf("Trying for PublicNetworkGateways %+v\n", res)
			resources[vsiId] = buildResourceObject(
				*res.Name,
				vsiId,
				vlan,
				"Gateway",
				datatypes.Time{},
				resources[vsiId],
			)
		}
	}

}

func buildResourceObject(name string, id int, vlan *datatypes.Network_Vlan, resourceType string, cancelDateTime datatypes.Time, foundResource Resource_Object) Resource_Object {
	var thisResource Resource_Object
	cancelDate := "-"
	vlanType := *vlan.NetworkSpace
	vlanNumber := *vlan.VlanNumber

	if !cancelDateTime.IsZero() {
		cancelDate = utils.FormatSLTimePointer(&cancelDateTime)
	}

	// If we have not already setup this resource, add it to the map
	if (Resource_Object{} == foundResource) {
		thisResource = Resource_Object{
			Hostname:     name,
			Id:           id,
			PublicVlan:   "-",
			PrivateVlan:  "-",
			ResourceType: resourceType,
			CancelDate:   cancelDate,
		}
	} else {
		thisResource = foundResource
	}

	// Updates the Vlan numbers as appropriate
	if vlanType == "PRIVATE" {
		thisResource.PrivateVlan = fmt.Sprintf("%v", vlanNumber)
	} else {
		thisResource.PublicVlan = fmt.Sprintf("%v", vlanNumber)
	}

	return thisResource
}
