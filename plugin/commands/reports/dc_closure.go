package reports

import (
	"fmt"
	"github.com/softlayer/softlayer-go/datatypes"
	"github.com/softlayer/softlayer-go/sl"
	"github.com/softlayer/softlayer-go/session"
	"github.com/softlayer/softlayer-go/services"
	"github.com/softlayer/softlayer-go/filter"

	"github.com/IBM-Cloud/ibm-cloud-cli-sdk/bluemix/terminal"
	"github.com/urfave/cli"

	. "github.ibm.com/SoftLayer/softlayer-cli/plugin/i18n"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/metadata"
)

type Search_Result struct {
	datatypes.Entity
	MatchedTerms []string `json:"matchedTerms,omitempty" xmlrpc:"matchedTerms,omitempty"`
	RelevanceScore *datatypes.Float64 `json:"relevanceScore,omitempty" xmlrpc:"relevanceScore,omitempty"`
	Resource *datatypes.Network_Vlan `json:"resource,omitempty" xmlrpc:"resource,omitempty"`
	ResourceType *string `json:"resourceType,omitempty" xmlrpc:"resourceType,omitempty"`
}

type DCClosuresCommand struct {
	UI      terminal.UI
	Session *session.Session
}

func NewDCClosuresCommand(ui terminal.UI, session *session.Session) (cmd *DCClosuresCommand) {
	return &DCClosuresCommand{
		UI:      ui,
		Session: session,
	}
}

func DCClosuresMetaData() cli.Command {
	return cli.Command{
		Category:    "reports",
		Name:        "datacenter-closures",
		Description: T("Reports which resources are still active in Datacenters that are scheduled to be closed."),
		Usage:       T(`${COMMAND_NAME} sl reports datacenter-closures`),
		Flags: []cli.Flag{
			metadata.OutputFlag(),
		},
	}
}

func (cmd *DCClosuresCommand) Run(c *cli.Context) error {
	fmt.Printf("HELLO WORLD")
	closing_filter := filter.New(
		filter.Path("capabilities").In("CLOSURE_ANNOUNCED"),
		filter.Path("name").OrderBy("DESC"),
	)
	closing_mask := `mask[name, datacenterLongName, frontendRouterId, capabilities, datacenterId, backendRouterId,
backendRouterName, frontendRouterName]`
	search_mask := `mask[
        resource(SoftLayer_Network_Vlan)[
            id,fullyQualifiedName,name,note,vlanNumber,networkSpace,
            virtualGuests[id,fullyQualifiedDomainName,billingItem[cancellationDate]],
            hardware[id,fullyQualifiedDomainName,billingItem[cancellationDate]],
            networkVlanFirewall[id,primaryIpAddress,billingItem[cancellationDate]],
            privateNetworkGateways[id,name,networkSpace],
            publicNetworkGateways[id,name,networkSpace]
        ]
    ]`
    resource_search := `_objectType:SoftLayer_Network_Vlan  primaryRouter.hostname: '%v' || primaryRouter.hostname: '%v'`
	pod_service := services.GetNetworkPodService(cmd.Session)
	closing_pods, err := pod_service.Mask(closing_mask).Filter(closing_filter.Build()).GetAllObjects()
	if err != nil {
		return err
	}
	for _, pod := range closing_pods {
		fmt.Printf("%v, %v\n", *pod.Name, *pod.DatacenterLongName)
		search_string := fmt.Sprintf(resource_search, *pod.BackendRouterName, *pod.FrontendRouterName)
		vlans, err := AdvancedSearch(cmd.Session, search_string, search_mask)
		if err != nil {
			return err
		}
		for _, vlan := range vlans {
			fmt.Printf("\t%+v\n", *vlan.Resource.VlanNumber)
		}
	}

	return nil
}

// It is required to re-define the AdvancedSearch method here so that we can force the `Entity` property to be a 
// datatypes.Network_Vlan struct, instead of the generic `Entity` which is autogenerated.
func AdvancedSearch(sess *session.Session, q string, mask string)  (resp []Search_Result, err error) {
	params := []interface{}{q,}
	var options sl.Options
	options.Mask = mask
	err = sess.DoRequest("SoftLayer_Search", "advancedSearch", params, &options, &resp)
	return	
}

