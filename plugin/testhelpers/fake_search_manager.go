// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeSearchManager struct {
	AdvancedSearchStub        func(string, string) ([]datatypes.Container_Search_Result, error)
	advancedSearchMutex       sync.RWMutex
	advancedSearchArgsForCall []struct {
		arg1 string
		arg2 string
	}
	advancedSearchReturns struct {
		result1 []datatypes.Container_Search_Result
		result2 error
	}
	advancedSearchReturnsOnCall map[int]struct {
		result1 []datatypes.Container_Search_Result
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSearchManager) AdvancedSearch(arg1 string, arg2 string) ([]datatypes.Container_Search_Result, error) {
	fake.advancedSearchMutex.Lock()
	ret, specificReturn := fake.advancedSearchReturnsOnCall[len(fake.advancedSearchArgsForCall)]
	fake.advancedSearchArgsForCall = append(fake.advancedSearchArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AdvancedSearchStub
	fakeReturns := fake.advancedSearchReturns
	fake.recordInvocation("AdvancedSearch", []interface{}{arg1, arg2})
	fake.advancedSearchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSearchManager) AdvancedSearchCallCount() int {
	fake.advancedSearchMutex.RLock()
	defer fake.advancedSearchMutex.RUnlock()
	return len(fake.advancedSearchArgsForCall)
}

func (fake *FakeSearchManager) AdvancedSearchCalls(stub func(string, string) ([]datatypes.Container_Search_Result, error)) {
	fake.advancedSearchMutex.Lock()
	defer fake.advancedSearchMutex.Unlock()
	fake.AdvancedSearchStub = stub
}

func (fake *FakeSearchManager) AdvancedSearchArgsForCall(i int) (string, string) {
	fake.advancedSearchMutex.RLock()
	defer fake.advancedSearchMutex.RUnlock()
	argsForCall := fake.advancedSearchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSearchManager) AdvancedSearchReturns(result1 []datatypes.Container_Search_Result, result2 error) {
	fake.advancedSearchMutex.Lock()
	defer fake.advancedSearchMutex.Unlock()
	fake.AdvancedSearchStub = nil
	fake.advancedSearchReturns = struct {
		result1 []datatypes.Container_Search_Result
		result2 error
	}{result1, result2}
}

func (fake *FakeSearchManager) AdvancedSearchReturnsOnCall(i int, result1 []datatypes.Container_Search_Result, result2 error) {
	fake.advancedSearchMutex.Lock()
	defer fake.advancedSearchMutex.Unlock()
	fake.AdvancedSearchStub = nil
	if fake.advancedSearchReturnsOnCall == nil {
		fake.advancedSearchReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Container_Search_Result
			result2 error
		})
	}
	fake.advancedSearchReturnsOnCall[i] = struct {
		result1 []datatypes.Container_Search_Result
		result2 error
	}{result1, result2}
}

func (fake *FakeSearchManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.advancedSearchMutex.RLock()
	defer fake.advancedSearchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSearchManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.SearchManager = new(FakeSearchManager)
