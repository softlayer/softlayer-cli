// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeEmailManager struct {
	EditObjectStub        func(int, datatypes.Network_Message_Delivery) error
	editObjectMutex       sync.RWMutex
	editObjectArgsForCall []struct {
		arg1 int
		arg2 datatypes.Network_Message_Delivery
	}
	editObjectReturns struct {
		result1 error
	}
	editObjectReturnsOnCall map[int]struct {
		result1 error
	}
	GetAccountOverviewStub        func(int) (datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account, error)
	getAccountOverviewMutex       sync.RWMutex
	getAccountOverviewArgsForCall []struct {
		arg1 int
	}
	getAccountOverviewReturns struct {
		result1 datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account
		result2 error
	}
	getAccountOverviewReturnsOnCall map[int]struct {
		result1 datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account
		result2 error
	}
	GetInstanceStub        func(int, string) (datatypes.Network_Message_Delivery_Email_Sendgrid, error)
	getInstanceMutex       sync.RWMutex
	getInstanceArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getInstanceReturns struct {
		result1 datatypes.Network_Message_Delivery_Email_Sendgrid
		result2 error
	}
	getInstanceReturnsOnCall map[int]struct {
		result1 datatypes.Network_Message_Delivery_Email_Sendgrid
		result2 error
	}
	GetNetworkMessageDeliveryAccountsStub        func(string) ([]datatypes.Network_Message_Delivery, error)
	getNetworkMessageDeliveryAccountsMutex       sync.RWMutex
	getNetworkMessageDeliveryAccountsArgsForCall []struct {
		arg1 string
	}
	getNetworkMessageDeliveryAccountsReturns struct {
		result1 []datatypes.Network_Message_Delivery
		result2 error
	}
	getNetworkMessageDeliveryAccountsReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Message_Delivery
		result2 error
	}
	GetStatisticsStub        func(int) ([]datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics, error)
	getStatisticsMutex       sync.RWMutex
	getStatisticsArgsForCall []struct {
		arg1 int
	}
	getStatisticsReturns struct {
		result1 []datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics
		result2 error
	}
	getStatisticsReturnsOnCall map[int]struct {
		result1 []datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics
		result2 error
	}
	UpdateEmailStub        func(int, string) error
	updateEmailMutex       sync.RWMutex
	updateEmailArgsForCall []struct {
		arg1 int
		arg2 string
	}
	updateEmailReturns struct {
		result1 error
	}
	updateEmailReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEmailManager) EditObject(arg1 int, arg2 datatypes.Network_Message_Delivery) error {
	fake.editObjectMutex.Lock()
	ret, specificReturn := fake.editObjectReturnsOnCall[len(fake.editObjectArgsForCall)]
	fake.editObjectArgsForCall = append(fake.editObjectArgsForCall, struct {
		arg1 int
		arg2 datatypes.Network_Message_Delivery
	}{arg1, arg2})
	fake.recordInvocation("EditObject", []interface{}{arg1, arg2})
	fake.editObjectMutex.Unlock()
	if fake.EditObjectStub != nil {
		return fake.EditObjectStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.editObjectReturns
	return fakeReturns.result1
}

func (fake *FakeEmailManager) EditObjectCallCount() int {
	fake.editObjectMutex.RLock()
	defer fake.editObjectMutex.RUnlock()
	return len(fake.editObjectArgsForCall)
}

func (fake *FakeEmailManager) EditObjectCalls(stub func(int, datatypes.Network_Message_Delivery) error) {
	fake.editObjectMutex.Lock()
	defer fake.editObjectMutex.Unlock()
	fake.EditObjectStub = stub
}

func (fake *FakeEmailManager) EditObjectArgsForCall(i int) (int, datatypes.Network_Message_Delivery) {
	fake.editObjectMutex.RLock()
	defer fake.editObjectMutex.RUnlock()
	argsForCall := fake.editObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEmailManager) EditObjectReturns(result1 error) {
	fake.editObjectMutex.Lock()
	defer fake.editObjectMutex.Unlock()
	fake.EditObjectStub = nil
	fake.editObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailManager) EditObjectReturnsOnCall(i int, result1 error) {
	fake.editObjectMutex.Lock()
	defer fake.editObjectMutex.Unlock()
	fake.EditObjectStub = nil
	if fake.editObjectReturnsOnCall == nil {
		fake.editObjectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.editObjectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailManager) GetAccountOverview(arg1 int) (datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account, error) {
	fake.getAccountOverviewMutex.Lock()
	ret, specificReturn := fake.getAccountOverviewReturnsOnCall[len(fake.getAccountOverviewArgsForCall)]
	fake.getAccountOverviewArgsForCall = append(fake.getAccountOverviewArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetAccountOverview", []interface{}{arg1})
	fake.getAccountOverviewMutex.Unlock()
	if fake.GetAccountOverviewStub != nil {
		return fake.GetAccountOverviewStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccountOverviewReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEmailManager) GetAccountOverviewCallCount() int {
	fake.getAccountOverviewMutex.RLock()
	defer fake.getAccountOverviewMutex.RUnlock()
	return len(fake.getAccountOverviewArgsForCall)
}

func (fake *FakeEmailManager) GetAccountOverviewCalls(stub func(int) (datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account, error)) {
	fake.getAccountOverviewMutex.Lock()
	defer fake.getAccountOverviewMutex.Unlock()
	fake.GetAccountOverviewStub = stub
}

func (fake *FakeEmailManager) GetAccountOverviewArgsForCall(i int) int {
	fake.getAccountOverviewMutex.RLock()
	defer fake.getAccountOverviewMutex.RUnlock()
	argsForCall := fake.getAccountOverviewArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEmailManager) GetAccountOverviewReturns(result1 datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account, result2 error) {
	fake.getAccountOverviewMutex.Lock()
	defer fake.getAccountOverviewMutex.Unlock()
	fake.GetAccountOverviewStub = nil
	fake.getAccountOverviewReturns = struct {
		result1 datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account
		result2 error
	}{result1, result2}
}

func (fake *FakeEmailManager) GetAccountOverviewReturnsOnCall(i int, result1 datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account, result2 error) {
	fake.getAccountOverviewMutex.Lock()
	defer fake.getAccountOverviewMutex.Unlock()
	fake.GetAccountOverviewStub = nil
	if fake.getAccountOverviewReturnsOnCall == nil {
		fake.getAccountOverviewReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account
			result2 error
		})
	}
	fake.getAccountOverviewReturnsOnCall[i] = struct {
		result1 datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Account
		result2 error
	}{result1, result2}
}

func (fake *FakeEmailManager) GetInstance(arg1 int, arg2 string) (datatypes.Network_Message_Delivery_Email_Sendgrid, error) {
	fake.getInstanceMutex.Lock()
	ret, specificReturn := fake.getInstanceReturnsOnCall[len(fake.getInstanceArgsForCall)]
	fake.getInstanceArgsForCall = append(fake.getInstanceArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetInstance", []interface{}{arg1, arg2})
	fake.getInstanceMutex.Unlock()
	if fake.GetInstanceStub != nil {
		return fake.GetInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEmailManager) GetInstanceCallCount() int {
	fake.getInstanceMutex.RLock()
	defer fake.getInstanceMutex.RUnlock()
	return len(fake.getInstanceArgsForCall)
}

func (fake *FakeEmailManager) GetInstanceCalls(stub func(int, string) (datatypes.Network_Message_Delivery_Email_Sendgrid, error)) {
	fake.getInstanceMutex.Lock()
	defer fake.getInstanceMutex.Unlock()
	fake.GetInstanceStub = stub
}

func (fake *FakeEmailManager) GetInstanceArgsForCall(i int) (int, string) {
	fake.getInstanceMutex.RLock()
	defer fake.getInstanceMutex.RUnlock()
	argsForCall := fake.getInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEmailManager) GetInstanceReturns(result1 datatypes.Network_Message_Delivery_Email_Sendgrid, result2 error) {
	fake.getInstanceMutex.Lock()
	defer fake.getInstanceMutex.Unlock()
	fake.GetInstanceStub = nil
	fake.getInstanceReturns = struct {
		result1 datatypes.Network_Message_Delivery_Email_Sendgrid
		result2 error
	}{result1, result2}
}

func (fake *FakeEmailManager) GetInstanceReturnsOnCall(i int, result1 datatypes.Network_Message_Delivery_Email_Sendgrid, result2 error) {
	fake.getInstanceMutex.Lock()
	defer fake.getInstanceMutex.Unlock()
	fake.GetInstanceStub = nil
	if fake.getInstanceReturnsOnCall == nil {
		fake.getInstanceReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Message_Delivery_Email_Sendgrid
			result2 error
		})
	}
	fake.getInstanceReturnsOnCall[i] = struct {
		result1 datatypes.Network_Message_Delivery_Email_Sendgrid
		result2 error
	}{result1, result2}
}

func (fake *FakeEmailManager) GetNetworkMessageDeliveryAccounts(arg1 string) ([]datatypes.Network_Message_Delivery, error) {
	fake.getNetworkMessageDeliveryAccountsMutex.Lock()
	ret, specificReturn := fake.getNetworkMessageDeliveryAccountsReturnsOnCall[len(fake.getNetworkMessageDeliveryAccountsArgsForCall)]
	fake.getNetworkMessageDeliveryAccountsArgsForCall = append(fake.getNetworkMessageDeliveryAccountsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetNetworkMessageDeliveryAccounts", []interface{}{arg1})
	fake.getNetworkMessageDeliveryAccountsMutex.Unlock()
	if fake.GetNetworkMessageDeliveryAccountsStub != nil {
		return fake.GetNetworkMessageDeliveryAccountsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getNetworkMessageDeliveryAccountsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEmailManager) GetNetworkMessageDeliveryAccountsCallCount() int {
	fake.getNetworkMessageDeliveryAccountsMutex.RLock()
	defer fake.getNetworkMessageDeliveryAccountsMutex.RUnlock()
	return len(fake.getNetworkMessageDeliveryAccountsArgsForCall)
}

func (fake *FakeEmailManager) GetNetworkMessageDeliveryAccountsCalls(stub func(string) ([]datatypes.Network_Message_Delivery, error)) {
	fake.getNetworkMessageDeliveryAccountsMutex.Lock()
	defer fake.getNetworkMessageDeliveryAccountsMutex.Unlock()
	fake.GetNetworkMessageDeliveryAccountsStub = stub
}

func (fake *FakeEmailManager) GetNetworkMessageDeliveryAccountsArgsForCall(i int) string {
	fake.getNetworkMessageDeliveryAccountsMutex.RLock()
	defer fake.getNetworkMessageDeliveryAccountsMutex.RUnlock()
	argsForCall := fake.getNetworkMessageDeliveryAccountsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEmailManager) GetNetworkMessageDeliveryAccountsReturns(result1 []datatypes.Network_Message_Delivery, result2 error) {
	fake.getNetworkMessageDeliveryAccountsMutex.Lock()
	defer fake.getNetworkMessageDeliveryAccountsMutex.Unlock()
	fake.GetNetworkMessageDeliveryAccountsStub = nil
	fake.getNetworkMessageDeliveryAccountsReturns = struct {
		result1 []datatypes.Network_Message_Delivery
		result2 error
	}{result1, result2}
}

func (fake *FakeEmailManager) GetNetworkMessageDeliveryAccountsReturnsOnCall(i int, result1 []datatypes.Network_Message_Delivery, result2 error) {
	fake.getNetworkMessageDeliveryAccountsMutex.Lock()
	defer fake.getNetworkMessageDeliveryAccountsMutex.Unlock()
	fake.GetNetworkMessageDeliveryAccountsStub = nil
	if fake.getNetworkMessageDeliveryAccountsReturnsOnCall == nil {
		fake.getNetworkMessageDeliveryAccountsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Message_Delivery
			result2 error
		})
	}
	fake.getNetworkMessageDeliveryAccountsReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Message_Delivery
		result2 error
	}{result1, result2}
}

func (fake *FakeEmailManager) GetStatistics(arg1 int) ([]datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics, error) {
	fake.getStatisticsMutex.Lock()
	ret, specificReturn := fake.getStatisticsReturnsOnCall[len(fake.getStatisticsArgsForCall)]
	fake.getStatisticsArgsForCall = append(fake.getStatisticsArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetStatistics", []interface{}{arg1})
	fake.getStatisticsMutex.Unlock()
	if fake.GetStatisticsStub != nil {
		return fake.GetStatisticsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getStatisticsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEmailManager) GetStatisticsCallCount() int {
	fake.getStatisticsMutex.RLock()
	defer fake.getStatisticsMutex.RUnlock()
	return len(fake.getStatisticsArgsForCall)
}

func (fake *FakeEmailManager) GetStatisticsCalls(stub func(int) ([]datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics, error)) {
	fake.getStatisticsMutex.Lock()
	defer fake.getStatisticsMutex.Unlock()
	fake.GetStatisticsStub = stub
}

func (fake *FakeEmailManager) GetStatisticsArgsForCall(i int) int {
	fake.getStatisticsMutex.RLock()
	defer fake.getStatisticsMutex.RUnlock()
	argsForCall := fake.getStatisticsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEmailManager) GetStatisticsReturns(result1 []datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics, result2 error) {
	fake.getStatisticsMutex.Lock()
	defer fake.getStatisticsMutex.Unlock()
	fake.GetStatisticsStub = nil
	fake.getStatisticsReturns = struct {
		result1 []datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics
		result2 error
	}{result1, result2}
}

func (fake *FakeEmailManager) GetStatisticsReturnsOnCall(i int, result1 []datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics, result2 error) {
	fake.getStatisticsMutex.Lock()
	defer fake.getStatisticsMutex.Unlock()
	fake.GetStatisticsStub = nil
	if fake.getStatisticsReturnsOnCall == nil {
		fake.getStatisticsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics
			result2 error
		})
	}
	fake.getStatisticsReturnsOnCall[i] = struct {
		result1 []datatypes.Container_Network_Message_Delivery_Email_Sendgrid_Statistics
		result2 error
	}{result1, result2}
}

func (fake *FakeEmailManager) UpdateEmail(arg1 int, arg2 string) error {
	fake.updateEmailMutex.Lock()
	ret, specificReturn := fake.updateEmailReturnsOnCall[len(fake.updateEmailArgsForCall)]
	fake.updateEmailArgsForCall = append(fake.updateEmailArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UpdateEmail", []interface{}{arg1, arg2})
	fake.updateEmailMutex.Unlock()
	if fake.UpdateEmailStub != nil {
		return fake.UpdateEmailStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateEmailReturns
	return fakeReturns.result1
}

func (fake *FakeEmailManager) UpdateEmailCallCount() int {
	fake.updateEmailMutex.RLock()
	defer fake.updateEmailMutex.RUnlock()
	return len(fake.updateEmailArgsForCall)
}

func (fake *FakeEmailManager) UpdateEmailCalls(stub func(int, string) error) {
	fake.updateEmailMutex.Lock()
	defer fake.updateEmailMutex.Unlock()
	fake.UpdateEmailStub = stub
}

func (fake *FakeEmailManager) UpdateEmailArgsForCall(i int) (int, string) {
	fake.updateEmailMutex.RLock()
	defer fake.updateEmailMutex.RUnlock()
	argsForCall := fake.updateEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEmailManager) UpdateEmailReturns(result1 error) {
	fake.updateEmailMutex.Lock()
	defer fake.updateEmailMutex.Unlock()
	fake.UpdateEmailStub = nil
	fake.updateEmailReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailManager) UpdateEmailReturnsOnCall(i int, result1 error) {
	fake.updateEmailMutex.Lock()
	defer fake.updateEmailMutex.Unlock()
	fake.UpdateEmailStub = nil
	if fake.updateEmailReturnsOnCall == nil {
		fake.updateEmailReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateEmailReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEmailManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.editObjectMutex.RLock()
	defer fake.editObjectMutex.RUnlock()
	fake.getAccountOverviewMutex.RLock()
	defer fake.getAccountOverviewMutex.RUnlock()
	fake.getInstanceMutex.RLock()
	defer fake.getInstanceMutex.RUnlock()
	fake.getNetworkMessageDeliveryAccountsMutex.RLock()
	defer fake.getNetworkMessageDeliveryAccountsMutex.RUnlock()
	fake.getStatisticsMutex.RLock()
	defer fake.getStatisticsMutex.RUnlock()
	fake.updateEmailMutex.RLock()
	defer fake.updateEmailMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEmailManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.EmailManager = new(FakeEmailManager)
