// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeAccountManager struct {
	GetBandwidthPoolServersStub        func(int) (int, error)
	getBandwidthPoolServersMutex       sync.RWMutex
	getBandwidthPoolServersArgsForCall []struct {
		arg1 int
	}
	getBandwidthPoolServersReturns struct {
		result1 int
		result2 error
	}
	getBandwidthPoolServersReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	GetBandwidthPoolsStub        func() ([]datatypes.Network_Bandwidth_Version1_Allotment, error)
	getBandwidthPoolsMutex       sync.RWMutex
	getBandwidthPoolsArgsForCall []struct {
	}
	getBandwidthPoolsReturns struct {
		result1 []datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}
	getBandwidthPoolsReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}
	GetBillingItemsStub        func() ([]datatypes.Billing_Item, error)
	getBillingItemsMutex       sync.RWMutex
	getBillingItemsArgsForCall []struct {
	}
	getBillingItemsReturns struct {
		result1 []datatypes.Billing_Item
		result2 error
	}
	getBillingItemsReturnsOnCall map[int]struct {
		result1 []datatypes.Billing_Item
		result2 error
	}
	GetInvoicesStub        func(int, bool, bool) ([]datatypes.Billing_Invoice, error)
	getInvoicesMutex       sync.RWMutex
	getInvoicesArgsForCall []struct {
		arg1 int
		arg2 bool
		arg3 bool
	}
	getInvoicesReturns struct {
		result1 []datatypes.Billing_Invoice
		result2 error
	}
	getInvoicesReturnsOnCall map[int]struct {
		result1 []datatypes.Billing_Invoice
		result2 error
	}
	SummaryByDatacenterStub        func() (map[string]map[string]int, error)
	summaryByDatacenterMutex       sync.RWMutex
	summaryByDatacenterArgsForCall []struct {
	}
	summaryByDatacenterReturns struct {
		result1 map[string]map[string]int
		result2 error
	}
	summaryByDatacenterReturnsOnCall map[int]struct {
		result1 map[string]map[string]int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccountManager) GetBandwidthPoolServers(arg1 int) (int, error) {
	fake.getBandwidthPoolServersMutex.Lock()
	ret, specificReturn := fake.getBandwidthPoolServersReturnsOnCall[len(fake.getBandwidthPoolServersArgsForCall)]
	fake.getBandwidthPoolServersArgsForCall = append(fake.getBandwidthPoolServersArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetBandwidthPoolServersStub
	fakeReturns := fake.getBandwidthPoolServersReturns
	fake.recordInvocation("GetBandwidthPoolServers", []interface{}{arg1})
	fake.getBandwidthPoolServersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountManager) GetBandwidthPoolServersCallCount() int {
	fake.getBandwidthPoolServersMutex.RLock()
	defer fake.getBandwidthPoolServersMutex.RUnlock()
	return len(fake.getBandwidthPoolServersArgsForCall)
}

func (fake *FakeAccountManager) GetBandwidthPoolServersCalls(stub func(int) (int, error)) {
	fake.getBandwidthPoolServersMutex.Lock()
	defer fake.getBandwidthPoolServersMutex.Unlock()
	fake.GetBandwidthPoolServersStub = stub
}

func (fake *FakeAccountManager) GetBandwidthPoolServersArgsForCall(i int) int {
	fake.getBandwidthPoolServersMutex.RLock()
	defer fake.getBandwidthPoolServersMutex.RUnlock()
	argsForCall := fake.getBandwidthPoolServersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAccountManager) GetBandwidthPoolServersReturns(result1 int, result2 error) {
	fake.getBandwidthPoolServersMutex.Lock()
	defer fake.getBandwidthPoolServersMutex.Unlock()
	fake.GetBandwidthPoolServersStub = nil
	fake.getBandwidthPoolServersReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) GetBandwidthPoolServersReturnsOnCall(i int, result1 int, result2 error) {
	fake.getBandwidthPoolServersMutex.Lock()
	defer fake.getBandwidthPoolServersMutex.Unlock()
	fake.GetBandwidthPoolServersStub = nil
	if fake.getBandwidthPoolServersReturnsOnCall == nil {
		fake.getBandwidthPoolServersReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.getBandwidthPoolServersReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) GetBandwidthPools() ([]datatypes.Network_Bandwidth_Version1_Allotment, error) {
	fake.getBandwidthPoolsMutex.Lock()
	ret, specificReturn := fake.getBandwidthPoolsReturnsOnCall[len(fake.getBandwidthPoolsArgsForCall)]
	fake.getBandwidthPoolsArgsForCall = append(fake.getBandwidthPoolsArgsForCall, struct {
	}{})
	stub := fake.GetBandwidthPoolsStub
	fakeReturns := fake.getBandwidthPoolsReturns
	fake.recordInvocation("GetBandwidthPools", []interface{}{})
	fake.getBandwidthPoolsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountManager) GetBandwidthPoolsCallCount() int {
	fake.getBandwidthPoolsMutex.RLock()
	defer fake.getBandwidthPoolsMutex.RUnlock()
	return len(fake.getBandwidthPoolsArgsForCall)
}

func (fake *FakeAccountManager) GetBandwidthPoolsCalls(stub func() ([]datatypes.Network_Bandwidth_Version1_Allotment, error)) {
	fake.getBandwidthPoolsMutex.Lock()
	defer fake.getBandwidthPoolsMutex.Unlock()
	fake.GetBandwidthPoolsStub = stub
}

func (fake *FakeAccountManager) GetBandwidthPoolsReturns(result1 []datatypes.Network_Bandwidth_Version1_Allotment, result2 error) {
	fake.getBandwidthPoolsMutex.Lock()
	defer fake.getBandwidthPoolsMutex.Unlock()
	fake.GetBandwidthPoolsStub = nil
	fake.getBandwidthPoolsReturns = struct {
		result1 []datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) GetBandwidthPoolsReturnsOnCall(i int, result1 []datatypes.Network_Bandwidth_Version1_Allotment, result2 error) {
	fake.getBandwidthPoolsMutex.Lock()
	defer fake.getBandwidthPoolsMutex.Unlock()
	fake.GetBandwidthPoolsStub = nil
	if fake.getBandwidthPoolsReturnsOnCall == nil {
		fake.getBandwidthPoolsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Bandwidth_Version1_Allotment
			result2 error
		})
	}
	fake.getBandwidthPoolsReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) GetBillingItems() ([]datatypes.Billing_Item, error) {
	fake.getBillingItemsMutex.Lock()
	ret, specificReturn := fake.getBillingItemsReturnsOnCall[len(fake.getBillingItemsArgsForCall)]
	fake.getBillingItemsArgsForCall = append(fake.getBillingItemsArgsForCall, struct {
	}{})
	stub := fake.GetBillingItemsStub
	fakeReturns := fake.getBillingItemsReturns
	fake.recordInvocation("GetBillingItems", []interface{}{})
	fake.getBillingItemsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountManager) GetInvoices(arg1 int, arg2 bool, arg3 bool) ([]datatypes.Billing_Invoice, error) {
	fake.getInvoicesMutex.Lock()
	ret, specificReturn := fake.getInvoicesReturnsOnCall[len(fake.getInvoicesArgsForCall)]
	fake.getInvoicesArgsForCall = append(fake.getInvoicesArgsForCall, struct {
		arg1 int
		arg2 bool
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.GetInvoicesStub
	fakeReturns := fake.getInvoicesReturns
	fake.recordInvocation("GetInvoices", []interface{}{arg1, arg2, arg3})
	fake.getInvoicesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountManager) GetBillingItemsCallCount() int {
	fake.getBillingItemsMutex.RLock()
	defer fake.getBillingItemsMutex.RUnlock()
	return len(fake.getBillingItemsArgsForCall)
}

func (fake *FakeAccountManager) GetBillingItemsCalls(stub func() ([]datatypes.Billing_Item, error)) {
	fake.getBillingItemsMutex.Lock()
	defer fake.getBillingItemsMutex.Unlock()
	fake.GetBillingItemsStub = stub
}

func (fake *FakeAccountManager) GetBillingItemsReturns(result1 []datatypes.Billing_Item, result2 error) {
	fake.getBillingItemsMutex.Lock()
	defer fake.getBillingItemsMutex.Unlock()
	fake.GetBillingItemsStub = nil
	fake.getBillingItemsReturns = struct {
		result1 []datatypes.Billing_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) GetInvoicesCallCount() int {
	fake.getInvoicesMutex.RLock()
	defer fake.getInvoicesMutex.RUnlock()
	return len(fake.getInvoicesArgsForCall)
}

func (fake *FakeAccountManager) GetInvoicesCalls(stub func(int, bool, bool) ([]datatypes.Billing_Invoice, error)) {
	fake.getInvoicesMutex.Lock()
	defer fake.getInvoicesMutex.Unlock()
	fake.GetInvoicesStub = stub
}

func (fake *FakeAccountManager) GetInvoicesArgsForCall(i int) (int, bool, bool) {
	fake.getInvoicesMutex.RLock()
	defer fake.getInvoicesMutex.RUnlock()
	argsForCall := fake.getInvoicesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAccountManager) GetInvoicesReturns(result1 []datatypes.Billing_Invoice, result2 error) {
	fake.getInvoicesMutex.Lock()
	defer fake.getInvoicesMutex.Unlock()
	fake.GetInvoicesStub = nil
	fake.getInvoicesReturns = struct {
		result1 []datatypes.Billing_Invoice
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) GetBillingItemsReturnsOnCall(i int, result1 []datatypes.Billing_Item, result2 error) {
	fake.getBillingItemsMutex.Lock()
	defer fake.getBillingItemsMutex.Unlock()
	fake.GetBillingItemsStub = nil
	if fake.getBillingItemsReturnsOnCall == nil {
		fake.getBillingItemsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Billing_Item
			result2 error
		})
	}
	fake.getBillingItemsReturnsOnCall[i] = struct {
		result1 []datatypes.Billing_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) GetInvoicesReturnsOnCall(i int, result1 []datatypes.Billing_Invoice, result2 error) {
	fake.getInvoicesMutex.Lock()
	defer fake.getInvoicesMutex.Unlock()
	fake.GetInvoicesStub = nil
	if fake.getInvoicesReturnsOnCall == nil {
		fake.getInvoicesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Billing_Invoice
			result2 error
		})
	}
	fake.getInvoicesReturnsOnCall[i] = struct {
		result1 []datatypes.Billing_Invoice
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) SummaryByDatacenter() (map[string]map[string]int, error) {
	fake.summaryByDatacenterMutex.Lock()
	ret, specificReturn := fake.summaryByDatacenterReturnsOnCall[len(fake.summaryByDatacenterArgsForCall)]
	fake.summaryByDatacenterArgsForCall = append(fake.summaryByDatacenterArgsForCall, struct {
	}{})
	stub := fake.SummaryByDatacenterStub
	fakeReturns := fake.summaryByDatacenterReturns
	fake.recordInvocation("SummaryByDatacenter", []interface{}{})
	fake.summaryByDatacenterMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccountManager) SummaryByDatacenterCallCount() int {
	fake.summaryByDatacenterMutex.RLock()
	defer fake.summaryByDatacenterMutex.RUnlock()
	return len(fake.summaryByDatacenterArgsForCall)
}

func (fake *FakeAccountManager) SummaryByDatacenterCalls(stub func() (map[string]map[string]int, error)) {
	fake.summaryByDatacenterMutex.Lock()
	defer fake.summaryByDatacenterMutex.Unlock()
	fake.SummaryByDatacenterStub = stub
}

func (fake *FakeAccountManager) SummaryByDatacenterReturns(result1 map[string]map[string]int, result2 error) {
	fake.summaryByDatacenterMutex.Lock()
	defer fake.summaryByDatacenterMutex.Unlock()
	fake.SummaryByDatacenterStub = nil
	fake.summaryByDatacenterReturns = struct {
		result1 map[string]map[string]int
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) SummaryByDatacenterReturnsOnCall(i int, result1 map[string]map[string]int, result2 error) {
	fake.summaryByDatacenterMutex.Lock()
	defer fake.summaryByDatacenterMutex.Unlock()
	fake.SummaryByDatacenterStub = nil
	if fake.summaryByDatacenterReturnsOnCall == nil {
		fake.summaryByDatacenterReturnsOnCall = make(map[int]struct {
			result1 map[string]map[string]int
			result2 error
		})
	}
	fake.summaryByDatacenterReturnsOnCall[i] = struct {
		result1 map[string]map[string]int
		result2 error
	}{result1, result2}
}

func (fake *FakeAccountManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBandwidthPoolServersMutex.RLock()
	defer fake.getBandwidthPoolServersMutex.RUnlock()
	fake.getBandwidthPoolsMutex.RLock()
	defer fake.getBandwidthPoolsMutex.RUnlock()
	fake.getBillingItemsMutex.RLock()
	defer fake.getBillingItemsMutex.RUnlock()
	fake.getInvoicesMutex.RLock()
	defer fake.getInvoicesMutex.RUnlock()
	fake.summaryByDatacenterMutex.RLock()
	defer fake.summaryByDatacenterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccountManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.AccountManager = new(FakeAccountManager)
