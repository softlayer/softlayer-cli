// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeCdnManager struct {
	GetNetworkCdnMarketplaceConfigurationMappingStub        func(string) ([]datatypes.Container_Network_CdnMarketplace_Configuration_Mapping, error)
	getNetworkCdnMarketplaceConfigurationMappingMutex       sync.RWMutex
	getNetworkCdnMarketplaceConfigurationMappingArgsForCall []struct {
		arg1 string
	}
	getNetworkCdnMarketplaceConfigurationMappingReturns struct {
		result1 []datatypes.Container_Network_CdnMarketplace_Configuration_Mapping
		result2 error
	}
	getNetworkCdnMarketplaceConfigurationMappingReturnsOnCall map[int]struct {
		result1 []datatypes.Container_Network_CdnMarketplace_Configuration_Mapping
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCdnManager) GetNetworkCdnMarketplaceConfigurationMapping(arg1 string) ([]datatypes.Container_Network_CdnMarketplace_Configuration_Mapping, error) {
	fake.getNetworkCdnMarketplaceConfigurationMappingMutex.Lock()
	ret, specificReturn := fake.getNetworkCdnMarketplaceConfigurationMappingReturnsOnCall[len(fake.getNetworkCdnMarketplaceConfigurationMappingArgsForCall)]
	fake.getNetworkCdnMarketplaceConfigurationMappingArgsForCall = append(fake.getNetworkCdnMarketplaceConfigurationMappingArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetNetworkCdnMarketplaceConfigurationMappingStub
	fakeReturns := fake.getNetworkCdnMarketplaceConfigurationMappingReturns
	fake.recordInvocation("GetNetworkCdnMarketplaceConfigurationMapping", []interface{}{arg1})
	fake.getNetworkCdnMarketplaceConfigurationMappingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCdnManager) GetNetworkCdnMarketplaceConfigurationMappingCallCount() int {
	fake.getNetworkCdnMarketplaceConfigurationMappingMutex.RLock()
	defer fake.getNetworkCdnMarketplaceConfigurationMappingMutex.RUnlock()
	return len(fake.getNetworkCdnMarketplaceConfigurationMappingArgsForCall)
}

func (fake *FakeCdnManager) GetNetworkCdnMarketplaceConfigurationMappingCalls(stub func(string) ([]datatypes.Container_Network_CdnMarketplace_Configuration_Mapping, error)) {
	fake.getNetworkCdnMarketplaceConfigurationMappingMutex.Lock()
	defer fake.getNetworkCdnMarketplaceConfigurationMappingMutex.Unlock()
	fake.GetNetworkCdnMarketplaceConfigurationMappingStub = stub
}

func (fake *FakeCdnManager) GetNetworkCdnMarketplaceConfigurationMappingArgsForCall(i int) string {
	fake.getNetworkCdnMarketplaceConfigurationMappingMutex.RLock()
	defer fake.getNetworkCdnMarketplaceConfigurationMappingMutex.RUnlock()
	argsForCall := fake.getNetworkCdnMarketplaceConfigurationMappingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCdnManager) GetNetworkCdnMarketplaceConfigurationMappingReturns(result1 []datatypes.Container_Network_CdnMarketplace_Configuration_Mapping, result2 error) {
	fake.getNetworkCdnMarketplaceConfigurationMappingMutex.Lock()
	defer fake.getNetworkCdnMarketplaceConfigurationMappingMutex.Unlock()
	fake.GetNetworkCdnMarketplaceConfigurationMappingStub = nil
	fake.getNetworkCdnMarketplaceConfigurationMappingReturns = struct {
		result1 []datatypes.Container_Network_CdnMarketplace_Configuration_Mapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCdnManager) GetNetworkCdnMarketplaceConfigurationMappingReturnsOnCall(i int, result1 []datatypes.Container_Network_CdnMarketplace_Configuration_Mapping, result2 error) {
	fake.getNetworkCdnMarketplaceConfigurationMappingMutex.Lock()
	defer fake.getNetworkCdnMarketplaceConfigurationMappingMutex.Unlock()
	fake.GetNetworkCdnMarketplaceConfigurationMappingStub = nil
	if fake.getNetworkCdnMarketplaceConfigurationMappingReturnsOnCall == nil {
		fake.getNetworkCdnMarketplaceConfigurationMappingReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Container_Network_CdnMarketplace_Configuration_Mapping
			result2 error
		})
	}
	fake.getNetworkCdnMarketplaceConfigurationMappingReturnsOnCall[i] = struct {
		result1 []datatypes.Container_Network_CdnMarketplace_Configuration_Mapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCdnManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getNetworkCdnMarketplaceConfigurationMappingMutex.RLock()
	defer fake.getNetworkCdnMarketplaceConfigurationMappingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCdnManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.CdnManager = new(FakeCdnManager)
