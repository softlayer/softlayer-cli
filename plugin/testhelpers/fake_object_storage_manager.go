// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeObjectStorageManager struct {
	GetAccountsStub        func(string) ([]datatypes.Network_Storage, error)
	getAccountsMutex       sync.RWMutex
	getAccountsArgsForCall []struct {
		arg1 string
	}
	getAccountsReturns struct {
		result1 []datatypes.Network_Storage
		result2 error
	}
	getAccountsReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Storage
		result2 error
	}
	GetEndpointsStub        func(int) ([]datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint, error)
	getEndpointsMutex       sync.RWMutex
	getEndpointsArgsForCall []struct {
		arg1 int
	}
	getEndpointsReturns struct {
		result1 []datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint
		result2 error
	}
	getEndpointsReturnsOnCall map[int]struct {
		result1 []datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeObjectStorageManager) GetAccounts(arg1 string) ([]datatypes.Network_Storage, error) {
	fake.getAccountsMutex.Lock()
	ret, specificReturn := fake.getAccountsReturnsOnCall[len(fake.getAccountsArgsForCall)]
	fake.getAccountsArgsForCall = append(fake.getAccountsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetAccountsStub
	fakeReturns := fake.getAccountsReturns
	fake.recordInvocation("GetAccounts", []interface{}{arg1})
	fake.getAccountsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeObjectStorageManager) GetAccountsCallCount() int {
	fake.getAccountsMutex.RLock()
	defer fake.getAccountsMutex.RUnlock()
	return len(fake.getAccountsArgsForCall)
}

func (fake *FakeObjectStorageManager) GetAccountsCalls(stub func(string) ([]datatypes.Network_Storage, error)) {
	fake.getAccountsMutex.Lock()
	defer fake.getAccountsMutex.Unlock()
	fake.GetAccountsStub = stub
}

func (fake *FakeObjectStorageManager) GetAccountsArgsForCall(i int) string {
	fake.getAccountsMutex.RLock()
	defer fake.getAccountsMutex.RUnlock()
	argsForCall := fake.getAccountsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeObjectStorageManager) GetAccountsReturns(result1 []datatypes.Network_Storage, result2 error) {
	fake.getAccountsMutex.Lock()
	defer fake.getAccountsMutex.Unlock()
	fake.GetAccountsStub = nil
	fake.getAccountsReturns = struct {
		result1 []datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStorageManager) GetAccountsReturnsOnCall(i int, result1 []datatypes.Network_Storage, result2 error) {
	fake.getAccountsMutex.Lock()
	defer fake.getAccountsMutex.Unlock()
	fake.GetAccountsStub = nil
	if fake.getAccountsReturnsOnCall == nil {
		fake.getAccountsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Storage
			result2 error
		})
	}
	fake.getAccountsReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStorageManager) GetEndpoints(arg1 int) ([]datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint, error) {
	fake.getEndpointsMutex.Lock()
	ret, specificReturn := fake.getEndpointsReturnsOnCall[len(fake.getEndpointsArgsForCall)]
	fake.getEndpointsArgsForCall = append(fake.getEndpointsArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetEndpointsStub
	fakeReturns := fake.getEndpointsReturns
	fake.recordInvocation("GetEndpoints", []interface{}{arg1})
	fake.getEndpointsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeObjectStorageManager) GetEndpointsCallCount() int {
	fake.getEndpointsMutex.RLock()
	defer fake.getEndpointsMutex.RUnlock()
	return len(fake.getEndpointsArgsForCall)
}

func (fake *FakeObjectStorageManager) GetEndpointsCalls(stub func(int) ([]datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint, error)) {
	fake.getEndpointsMutex.Lock()
	defer fake.getEndpointsMutex.Unlock()
	fake.GetEndpointsStub = stub
}

func (fake *FakeObjectStorageManager) GetEndpointsArgsForCall(i int) int {
	fake.getEndpointsMutex.RLock()
	defer fake.getEndpointsMutex.RUnlock()
	argsForCall := fake.getEndpointsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeObjectStorageManager) GetEndpointsReturns(result1 []datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint, result2 error) {
	fake.getEndpointsMutex.Lock()
	defer fake.getEndpointsMutex.Unlock()
	fake.GetEndpointsStub = nil
	fake.getEndpointsReturns = struct {
		result1 []datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStorageManager) GetEndpointsReturnsOnCall(i int, result1 []datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint, result2 error) {
	fake.getEndpointsMutex.Lock()
	defer fake.getEndpointsMutex.Unlock()
	fake.GetEndpointsStub = nil
	if fake.getEndpointsReturnsOnCall == nil {
		fake.getEndpointsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint
			result2 error
		})
	}
	fake.getEndpointsReturnsOnCall[i] = struct {
		result1 []datatypes.Container_Network_Storage_Hub_ObjectStorage_Endpoint
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStorageManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAccountsMutex.RLock()
	defer fake.getAccountsMutex.RUnlock()
	fake.getEndpointsMutex.RLock()
	defer fake.getEndpointsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeObjectStorageManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.ObjectStorageManager = new(FakeObjectStorageManager)
