// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeEventLogManager struct {
	GetEventLogsStub        func(string, string, int) ([]datatypes.Event_Log, error)
	getEventLogsMutex       sync.RWMutex
	getEventLogsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int
	}
	getEventLogsReturns struct {
		result1 []datatypes.Event_Log
		result2 error
	}
	getEventLogsReturnsOnCall map[int]struct {
		result1 []datatypes.Event_Log
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventLogManager) GetEventLogs(arg1 string, arg2 string, arg3 int) ([]datatypes.Event_Log, error) {
	fake.getEventLogsMutex.Lock()
	ret, specificReturn := fake.getEventLogsReturnsOnCall[len(fake.getEventLogsArgsForCall)]
	fake.getEventLogsArgsForCall = append(fake.getEventLogsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.GetEventLogsStub
	fakeReturns := fake.getEventLogsReturns
	fake.recordInvocation("GetEventLogs", []interface{}{arg1, arg2, arg3})
	fake.getEventLogsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEventLogManager) GetEventLogsCallCount() int {
	fake.getEventLogsMutex.RLock()
	defer fake.getEventLogsMutex.RUnlock()
	return len(fake.getEventLogsArgsForCall)
}

func (fake *FakeEventLogManager) GetEventLogsCalls(stub func(string, string, int) ([]datatypes.Event_Log, error)) {
	fake.getEventLogsMutex.Lock()
	defer fake.getEventLogsMutex.Unlock()
	fake.GetEventLogsStub = stub
}

func (fake *FakeEventLogManager) GetEventLogsArgsForCall(i int) (string, string, int) {
	fake.getEventLogsMutex.RLock()
	defer fake.getEventLogsMutex.RUnlock()
	argsForCall := fake.getEventLogsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEventLogManager) GetEventLogsReturns(result1 []datatypes.Event_Log, result2 error) {
	fake.getEventLogsMutex.Lock()
	defer fake.getEventLogsMutex.Unlock()
	fake.GetEventLogsStub = nil
	fake.getEventLogsReturns = struct {
		result1 []datatypes.Event_Log
		result2 error
	}{result1, result2}
}

func (fake *FakeEventLogManager) GetEventLogsReturnsOnCall(i int, result1 []datatypes.Event_Log, result2 error) {
	fake.getEventLogsMutex.Lock()
	defer fake.getEventLogsMutex.Unlock()
	fake.GetEventLogsStub = nil
	if fake.getEventLogsReturnsOnCall == nil {
		fake.getEventLogsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Event_Log
			result2 error
		})
	}
	fake.getEventLogsReturnsOnCall[i] = struct {
		result1 []datatypes.Event_Log
		result2 error
	}{result1, result2}
}

func (fake *FakeEventLogManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEventLogsMutex.RLock()
	defer fake.getEventLogsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventLogManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.EventLogManager = new(FakeEventLogManager)
