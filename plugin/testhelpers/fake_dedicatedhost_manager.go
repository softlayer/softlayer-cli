// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeDedicatedhostManager struct {
	ListGuestsStub        func(identifier int, cpu int, domain string, hostname string, memory int, tags []string, mask string) ([]datatypes.Virtual_Guest, error)
	listGuestsMutex       sync.RWMutex
	listGuestsArgsForCall []struct {
		identifier int
		cpu        int
		domain     string
		hostname   string
		memory     int
		tags       []string
		mask       string
	}
	listGuestsReturns struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	listGuestsReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDedicatedhostManager) ListGuests(identifier int, cpu int, domain string, hostname string, memory int, tags []string, mask string) ([]datatypes.Virtual_Guest, error) {
	var tagsCopy []string
	if tags != nil {
		tagsCopy = make([]string, len(tags))
		copy(tagsCopy, tags)
	}
	fake.listGuestsMutex.Lock()
	ret, specificReturn := fake.listGuestsReturnsOnCall[len(fake.listGuestsArgsForCall)]
	fake.listGuestsArgsForCall = append(fake.listGuestsArgsForCall, struct {
		identifier int
		cpu        int
		domain     string
		hostname   string
		memory     int
		tags       []string
		mask       string
	}{identifier, cpu, domain, hostname, memory, tags, mask})
	fake.recordInvocation("ListGuests", []interface{}{identifier, cpu, domain, hostname, memory, tags, mask})
	fake.listGuestsMutex.Unlock()
	if fake.ListGuestsStub != nil {
		return fake.ListGuestsStub(identifier, cpu, domain, hostname, memory, tags, mask)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listGuestsReturns.result1, fake.listGuestsReturns.result2
}

func (fake *FakeDedicatedhostManager) ListGuestsCallCount() int {
	fake.listGuestsMutex.RLock()
	defer fake.listGuestsMutex.RUnlock()
	return len(fake.listGuestsArgsForCall)
}

func (fake *FakeDedicatedhostManager) ListGuestsArgsForCall(i int) (int, int, string, string, int, []string, string) {
	fake.listGuestsMutex.RLock()
	defer fake.listGuestsMutex.RUnlock()
	return fake.listGuestsArgsForCall[i].identifier, fake.listGuestsArgsForCall[i].cpu, fake.listGuestsArgsForCall[i].domain, fake.listGuestsArgsForCall[i].hostname, fake.listGuestsArgsForCall[i].memory, fake.listGuestsArgsForCall[i].tags, fake.listGuestsArgsForCall[i].mask
}

func (fake *FakeDedicatedhostManager) ListGuestsReturns(result1 []datatypes.Virtual_Guest, result2 error) {
	fake.ListGuestsStub = nil
	fake.listGuestsReturns = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeDedicatedhostManager) ListGuestsReturnsOnCall(i int, result1 []datatypes.Virtual_Guest, result2 error) {
	fake.ListGuestsStub = nil
	if fake.listGuestsReturnsOnCall == nil {
		fake.listGuestsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_Guest
			result2 error
		})
	}
	fake.listGuestsReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeDedicatedhostManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listGuestsMutex.RLock()
	defer fake.listGuestsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDedicatedhostManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.OrderManager = new(FakeOrderManager)
