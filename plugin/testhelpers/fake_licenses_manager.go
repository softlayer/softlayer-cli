// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeLicensesManager struct {
	CreateLicenseStub        func(string, string) (datatypes.Container_Product_Order_Receipt, error)
	createLicenseMutex       sync.RWMutex
	createLicenseArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createLicenseReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	createLicenseReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	CreateLicensesOptionsStub        func() ([]datatypes.Product_Package, error)
	createLicensesOptionsMutex       sync.RWMutex
	createLicensesOptionsArgsForCall []struct {
	}
	createLicensesOptionsReturns struct {
		result1 []datatypes.Product_Package
		result2 error
	}
	createLicensesOptionsReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Package
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLicensesManager) CreateLicense(arg1 string, arg2 string) (datatypes.Container_Product_Order_Receipt, error) {
	fake.createLicenseMutex.Lock()
	ret, specificReturn := fake.createLicenseReturnsOnCall[len(fake.createLicenseArgsForCall)]
	fake.createLicenseArgsForCall = append(fake.createLicenseArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateLicenseStub
	fakeReturns := fake.createLicenseReturns
	fake.recordInvocation("CreateLicense", []interface{}{arg1, arg2})
	fake.createLicenseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLicensesManager) CreateLicenseCallCount() int {
	fake.createLicenseMutex.RLock()
	defer fake.createLicenseMutex.RUnlock()
	return len(fake.createLicenseArgsForCall)
}

func (fake *FakeLicensesManager) CreateLicenseCalls(stub func(string, string) (datatypes.Container_Product_Order_Receipt, error)) {
	fake.createLicenseMutex.Lock()
	defer fake.createLicenseMutex.Unlock()
	fake.CreateLicenseStub = stub
}

func (fake *FakeLicensesManager) CreateLicenseArgsForCall(i int) (string, string) {
	fake.createLicenseMutex.RLock()
	defer fake.createLicenseMutex.RUnlock()
	argsForCall := fake.createLicenseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLicensesManager) CreateLicenseReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.createLicenseMutex.Lock()
	defer fake.createLicenseMutex.Unlock()
	fake.CreateLicenseStub = nil
	fake.createLicenseReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeLicensesManager) CreateLicenseReturnsOnCall(i int, result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.createLicenseMutex.Lock()
	defer fake.createLicenseMutex.Unlock()
	fake.CreateLicenseStub = nil
	if fake.createLicenseReturnsOnCall == nil {
		fake.createLicenseReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order_Receipt
			result2 error
		})
	}
	fake.createLicenseReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeLicensesManager) CreateLicensesOptions() ([]datatypes.Product_Package, error) {
	fake.createLicensesOptionsMutex.Lock()
	ret, specificReturn := fake.createLicensesOptionsReturnsOnCall[len(fake.createLicensesOptionsArgsForCall)]
	fake.createLicensesOptionsArgsForCall = append(fake.createLicensesOptionsArgsForCall, struct {
	}{})
	stub := fake.CreateLicensesOptionsStub
	fakeReturns := fake.createLicensesOptionsReturns
	fake.recordInvocation("CreateLicensesOptions", []interface{}{})
	fake.createLicensesOptionsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLicensesManager) CreateLicensesOptionsCallCount() int {
	fake.createLicensesOptionsMutex.RLock()
	defer fake.createLicensesOptionsMutex.RUnlock()
	return len(fake.createLicensesOptionsArgsForCall)
}

func (fake *FakeLicensesManager) CreateLicensesOptionsCalls(stub func() ([]datatypes.Product_Package, error)) {
	fake.createLicensesOptionsMutex.Lock()
	defer fake.createLicensesOptionsMutex.Unlock()
	fake.CreateLicensesOptionsStub = stub
}

func (fake *FakeLicensesManager) CreateLicensesOptionsReturns(result1 []datatypes.Product_Package, result2 error) {
	fake.createLicensesOptionsMutex.Lock()
	defer fake.createLicensesOptionsMutex.Unlock()
	fake.CreateLicensesOptionsStub = nil
	fake.createLicensesOptionsReturns = struct {
		result1 []datatypes.Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeLicensesManager) CreateLicensesOptionsReturnsOnCall(i int, result1 []datatypes.Product_Package, result2 error) {
	fake.createLicensesOptionsMutex.Lock()
	defer fake.createLicensesOptionsMutex.Unlock()
	fake.CreateLicensesOptionsStub = nil
	if fake.createLicensesOptionsReturnsOnCall == nil {
		fake.createLicensesOptionsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Package
			result2 error
		})
	}
	fake.createLicensesOptionsReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeLicensesManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createLicenseMutex.RLock()
	defer fake.createLicenseMutex.RUnlock()
	fake.createLicensesOptionsMutex.RLock()
	defer fake.createLicensesOptionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLicensesManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.LicensesManager = new(FakeLicensesManager)
