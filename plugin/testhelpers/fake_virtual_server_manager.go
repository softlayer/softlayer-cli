// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"
	"time"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.com/softlayer/softlayer-go/filter"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeVirtualServerManager struct {
	AttachPortableStorageStub        func(int, int) (datatypes.Provisioning_Version1_Transaction, error)
	attachPortableStorageMutex       sync.RWMutex
	attachPortableStorageArgsForCall []struct {
		arg1 int
		arg2 int
	}
	attachPortableStorageReturns struct {
		result1 datatypes.Provisioning_Version1_Transaction
		result2 error
	}
	attachPortableStorageReturnsOnCall map[int]struct {
		result1 datatypes.Provisioning_Version1_Transaction
		result2 error
	}
	AuthorizeStorageStub        func(int, string) (bool, error)
	authorizeStorageMutex       sync.RWMutex
	authorizeStorageArgsForCall []struct {
		arg1 int
		arg2 string
	}
	authorizeStorageReturns struct {
		result1 bool
		result2 error
	}
	authorizeStorageReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CancelInstanceStub        func(int) error
	cancelInstanceMutex       sync.RWMutex
	cancelInstanceArgsForCall []struct {
		arg1 int
	}
	cancelInstanceReturns struct {
		result1 error
	}
	cancelInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	CapacityListStub        func(string) ([]datatypes.Virtual_ReservedCapacityGroup, error)
	capacityListMutex       sync.RWMutex
	capacityListArgsForCall []struct {
		arg1 string
	}
	capacityListReturns struct {
		result1 []datatypes.Virtual_ReservedCapacityGroup
		result2 error
	}
	capacityListReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_ReservedCapacityGroup
		result2 error
	}
	CaptureImageStub        func(int, string, string, []datatypes.Virtual_Guest_Block_Device) (datatypes.Virtual_Guest_Block_Device_Template_Group, error)
	captureImageMutex       sync.RWMutex
	captureImageArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 string
		arg4 []datatypes.Virtual_Guest_Block_Device
	}
	captureImageReturns struct {
		result1 datatypes.Virtual_Guest_Block_Device_Template_Group
		result2 error
	}
	captureImageReturnsOnCall map[int]struct {
		result1 datatypes.Virtual_Guest_Block_Device_Template_Group
		result2 error
	}
	CreateDedicatedHostStub        func(string, string, string, string, string, int) (datatypes.Container_Product_Order_Receipt, error)
	createDedicatedHostMutex       sync.RWMutex
	createDedicatedHostArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 int
	}
	createDedicatedHostReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	createDedicatedHostReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	CreateInstanceStub        func(*datatypes.Virtual_Guest) (datatypes.Virtual_Guest, error)
	createInstanceMutex       sync.RWMutex
	createInstanceArgsForCall []struct {
		arg1 *datatypes.Virtual_Guest
	}
	createInstanceReturns struct {
		result1 datatypes.Virtual_Guest
		result2 error
	}
	createInstanceReturnsOnCall map[int]struct {
		result1 datatypes.Virtual_Guest
		result2 error
	}
	CreateInstancesStub        func([]datatypes.Virtual_Guest) ([]datatypes.Virtual_Guest, error)
	createInstancesMutex       sync.RWMutex
	createInstancesArgsForCall []struct {
		arg1 []datatypes.Virtual_Guest
	}
	createInstancesReturns struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	createInstancesReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	CreateUserCustomerNotificationStub        func(int, int) (datatypes.User_Customer_Notification_Virtual_Guest, error)
	createUserCustomerNotificationMutex       sync.RWMutex
	createUserCustomerNotificationArgsForCall []struct {
		arg1 int
		arg2 int
	}
	createUserCustomerNotificationReturns struct {
		result1 datatypes.User_Customer_Notification_Virtual_Guest
		result2 error
	}
	createUserCustomerNotificationReturnsOnCall map[int]struct {
		result1 datatypes.User_Customer_Notification_Virtual_Guest
		result2 error
	}
	DeleteUserCustomerNotificationStub        func(int) (bool, error)
	deleteUserCustomerNotificationMutex       sync.RWMutex
	deleteUserCustomerNotificationArgsForCall []struct {
		arg1 int
	}
	deleteUserCustomerNotificationReturns struct {
		result1 bool
		result2 error
	}
	deleteUserCustomerNotificationReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	EditInstanceStub        func(int, string, string, string, string, *int, *int) ([]bool, []string)
	editInstanceMutex       sync.RWMutex
	editInstanceArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 *int
		arg7 *int
	}
	editInstanceReturns struct {
		result1 []bool
		result2 []string
	}
	editInstanceReturnsOnCall map[int]struct {
		result1 []bool
		result2 []string
	}
	GenerateInstanceCapacityCreationTemplateStub        func(*datatypes.Container_Product_Order_Virtual_ReservedCapacity, map[string]interface{}) (interface{}, error)
	generateInstanceCapacityCreationTemplateMutex       sync.RWMutex
	generateInstanceCapacityCreationTemplateArgsForCall []struct {
		arg1 *datatypes.Container_Product_Order_Virtual_ReservedCapacity
		arg2 map[string]interface{}
	}
	generateInstanceCapacityCreationTemplateReturns struct {
		result1 interface{}
		result2 error
	}
	generateInstanceCapacityCreationTemplateReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	GenerateInstanceCreationTemplateStub        func(*datatypes.Virtual_Guest, map[string]interface{}) (*datatypes.Virtual_Guest, error)
	generateInstanceCreationTemplateMutex       sync.RWMutex
	generateInstanceCreationTemplateArgsForCall []struct {
		arg1 *datatypes.Virtual_Guest
		arg2 map[string]interface{}
	}
	generateInstanceCreationTemplateReturns struct {
		result1 *datatypes.Virtual_Guest
		result2 error
	}
	generateInstanceCreationTemplateReturnsOnCall map[int]struct {
		result1 *datatypes.Virtual_Guest
		result2 error
	}
	GetAvailablePlacementRoutersStub        func(int) ([]datatypes.Hardware, error)
	getAvailablePlacementRoutersMutex       sync.RWMutex
	getAvailablePlacementRoutersArgsForCall []struct {
		arg1 int
	}
	getAvailablePlacementRoutersReturns struct {
		result1 []datatypes.Hardware
		result2 error
	}
	getAvailablePlacementRoutersReturnsOnCall map[int]struct {
		result1 []datatypes.Hardware
		result2 error
	}
	GetBandwidthDataStub        func(int, time.Time, time.Time, int) ([]datatypes.Metric_Tracking_Object_Data, error)
	getBandwidthDataMutex       sync.RWMutex
	getBandwidthDataArgsForCall []struct {
		arg1 int
		arg2 time.Time
		arg3 time.Time
		arg4 int
	}
	getBandwidthDataReturns struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}
	getBandwidthDataReturnsOnCall map[int]struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}
	GetCapacityCreateOptionsStub        func(string) ([]datatypes.Product_Item, error)
	getCapacityCreateOptionsMutex       sync.RWMutex
	getCapacityCreateOptionsArgsForCall []struct {
		arg1 string
	}
	getCapacityCreateOptionsReturns struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	getCapacityCreateOptionsReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	GetCapacityDetailStub        func(int) (datatypes.Virtual_ReservedCapacityGroup, error)
	getCapacityDetailMutex       sync.RWMutex
	getCapacityDetailArgsForCall []struct {
		arg1 int
	}
	getCapacityDetailReturns struct {
		result1 datatypes.Virtual_ReservedCapacityGroup
		result2 error
	}
	getCapacityDetailReturnsOnCall map[int]struct {
		result1 datatypes.Virtual_ReservedCapacityGroup
		result2 error
	}
	GetCreateOptionsStub        func(string, string) (map[string]map[string]string, error)
	getCreateOptionsMutex       sync.RWMutex
	getCreateOptionsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getCreateOptionsReturns struct {
		result1 map[string]map[string]string
		result2 error
	}
	getCreateOptionsReturnsOnCall map[int]struct {
		result1 map[string]map[string]string
		result2 error
	}
	GetDatacentersStub        func() ([]datatypes.Location, error)
	getDatacentersMutex       sync.RWMutex
	getDatacentersArgsForCall []struct {
	}
	getDatacentersReturns struct {
		result1 []datatypes.Location
		result2 error
	}
	getDatacentersReturnsOnCall map[int]struct {
		result1 []datatypes.Location
		result2 error
	}
	GetDedicatedHostStub        func(int) (datatypes.Virtual_DedicatedHost, error)
	getDedicatedHostMutex       sync.RWMutex
	getDedicatedHostArgsForCall []struct {
		arg1 int
	}
	getDedicatedHostReturns struct {
		result1 datatypes.Virtual_DedicatedHost
		result2 error
	}
	getDedicatedHostReturnsOnCall map[int]struct {
		result1 datatypes.Virtual_DedicatedHost
		result2 error
	}
	GetInstanceStub        func(int, string) (datatypes.Virtual_Guest, error)
	getInstanceMutex       sync.RWMutex
	getInstanceArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getInstanceReturns struct {
		result1 datatypes.Virtual_Guest
		result2 error
	}
	getInstanceReturnsOnCall map[int]struct {
		result1 datatypes.Virtual_Guest
		result2 error
	}
	GetInstancesStub        func(string, filter.Filters) ([]datatypes.Virtual_Guest, error)
	getInstancesMutex       sync.RWMutex
	getInstancesArgsForCall []struct {
		arg1 string
		arg2 filter.Filters
	}
	getInstancesReturns struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	getInstancesReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	GetLikedInstanceStub        func(*datatypes.Virtual_Guest, int) (*datatypes.Virtual_Guest, error)
	getLikedInstanceMutex       sync.RWMutex
	getLikedInstanceArgsForCall []struct {
		arg1 *datatypes.Virtual_Guest
		arg2 int
	}
	getLikedInstanceReturns struct {
		result1 *datatypes.Virtual_Guest
		result2 error
	}
	getLikedInstanceReturnsOnCall map[int]struct {
		result1 *datatypes.Virtual_Guest
		result2 error
	}
	GetLocalDisksStub        func(int) ([]datatypes.Virtual_Guest_Block_Device, error)
	getLocalDisksMutex       sync.RWMutex
	getLocalDisksArgsForCall []struct {
		arg1 int
	}
	getLocalDisksReturns struct {
		result1 []datatypes.Virtual_Guest_Block_Device
		result2 error
	}
	getLocalDisksReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_Guest_Block_Device
		result2 error
	}
	GetPlacementGroupDetailStub        func(int) (datatypes.Virtual_PlacementGroup, error)
	getPlacementGroupDetailMutex       sync.RWMutex
	getPlacementGroupDetailArgsForCall []struct {
		arg1 int
	}
	getPlacementGroupDetailReturns struct {
		result1 datatypes.Virtual_PlacementGroup
		result2 error
	}
	getPlacementGroupDetailReturnsOnCall map[int]struct {
		result1 datatypes.Virtual_PlacementGroup
		result2 error
	}
	GetPodsStub        func() ([]datatypes.Network_Pod, error)
	getPodsMutex       sync.RWMutex
	getPodsArgsForCall []struct {
	}
	getPodsReturns struct {
		result1 []datatypes.Network_Pod
		result2 error
	}
	getPodsReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Pod
		result2 error
	}
	GetPortableStorageStub        func(int) ([]datatypes.Virtual_Disk_Image, error)
	getPortableStorageMutex       sync.RWMutex
	getPortableStorageArgsForCall []struct {
		arg1 int
	}
	getPortableStorageReturns struct {
		result1 []datatypes.Virtual_Disk_Image
		result2 error
	}
	getPortableStorageReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_Disk_Image
		result2 error
	}
	GetRoutersStub        func(string) ([]datatypes.Location_Region, error)
	getRoutersMutex       sync.RWMutex
	getRoutersArgsForCall []struct {
		arg1 string
	}
	getRoutersReturns struct {
		result1 []datatypes.Location_Region
		result2 error
	}
	getRoutersReturnsOnCall map[int]struct {
		result1 []datatypes.Location_Region
		result2 error
	}
	GetRulesStub        func() ([]datatypes.Virtual_PlacementGroup_Rule, error)
	getRulesMutex       sync.RWMutex
	getRulesArgsForCall []struct {
	}
	getRulesReturns struct {
		result1 []datatypes.Virtual_PlacementGroup_Rule
		result2 error
	}
	getRulesReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_PlacementGroup_Rule
		result2 error
	}
	GetStorageCredentialsStub        func(int) (datatypes.Network_Storage_Allowed_Host, error)
	getStorageCredentialsMutex       sync.RWMutex
	getStorageCredentialsArgsForCall []struct {
		arg1 int
	}
	getStorageCredentialsReturns struct {
		result1 datatypes.Network_Storage_Allowed_Host
		result2 error
	}
	getStorageCredentialsReturnsOnCall map[int]struct {
		result1 datatypes.Network_Storage_Allowed_Host
		result2 error
	}
	GetStorageDetailsStub        func(int, string) ([]datatypes.Network_Storage, error)
	getStorageDetailsMutex       sync.RWMutex
	getStorageDetailsArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getStorageDetailsReturns struct {
		result1 []datatypes.Network_Storage
		result2 error
	}
	getStorageDetailsReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Storage
		result2 error
	}
	GetSummaryUsageStub        func(int, time.Time, time.Time, string, int) ([]datatypes.Metric_Tracking_Object_Data, error)
	getSummaryUsageMutex       sync.RWMutex
	getSummaryUsageArgsForCall []struct {
		arg1 int
		arg2 time.Time
		arg3 time.Time
		arg4 string
		arg5 int
	}
	getSummaryUsageReturns struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}
	getSummaryUsageReturnsOnCall map[int]struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}
	GetUserCustomerNotificationsByVirtualGuestIdStub        func(int, string) ([]datatypes.User_Customer_Notification_Virtual_Guest, error)
	getUserCustomerNotificationsByVirtualGuestIdMutex       sync.RWMutex
	getUserCustomerNotificationsByVirtualGuestIdArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getUserCustomerNotificationsByVirtualGuestIdReturns struct {
		result1 []datatypes.User_Customer_Notification_Virtual_Guest
		result2 error
	}
	getUserCustomerNotificationsByVirtualGuestIdReturnsOnCall map[int]struct {
		result1 []datatypes.User_Customer_Notification_Virtual_Guest
		result2 error
	}
	InstanceIsReadyStub        func(int, time.Time) (bool, string, error)
	instanceIsReadyMutex       sync.RWMutex
	instanceIsReadyArgsForCall []struct {
		arg1 int
		arg2 time.Time
	}
	instanceIsReadyReturns struct {
		result1 bool
		result2 string
		result3 error
	}
	instanceIsReadyReturnsOnCall map[int]struct {
		result1 bool
		result2 string
		result3 error
	}
	ListInstancesStub        func(bool, bool, string, string, string, string, string, string, int, int, int, int, []string, string) ([]datatypes.Virtual_Guest, error)
	listInstancesMutex       sync.RWMutex
	listInstancesArgsForCall []struct {
		arg1  bool
		arg2  bool
		arg3  string
		arg4  string
		arg5  string
		arg6  string
		arg7  string
		arg8  string
		arg9  int
		arg10 int
		arg11 int
		arg12 int
		arg13 []string
		arg14 string
	}
	listInstancesReturns struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	listInstancesReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	MigrateDedicatedHostStub        func(int, int) error
	migrateDedicatedHostMutex       sync.RWMutex
	migrateDedicatedHostArgsForCall []struct {
		arg1 int
		arg2 int
	}
	migrateDedicatedHostReturns struct {
		result1 error
	}
	migrateDedicatedHostReturnsOnCall map[int]struct {
		result1 error
	}
	MigrateInstanceStub        func(int) (datatypes.Provisioning_Version1_Transaction, error)
	migrateInstanceMutex       sync.RWMutex
	migrateInstanceArgsForCall []struct {
		arg1 int
	}
	migrateInstanceReturns struct {
		result1 datatypes.Provisioning_Version1_Transaction
		result2 error
	}
	migrateInstanceReturnsOnCall map[int]struct {
		result1 datatypes.Provisioning_Version1_Transaction
		result2 error
	}
	PauseInstanceStub        func(int) error
	pauseInstanceMutex       sync.RWMutex
	pauseInstanceArgsForCall []struct {
		arg1 int
	}
	pauseInstanceReturns struct {
		result1 error
	}
	pauseInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	PlacementCreateStub        func(*datatypes.Virtual_PlacementGroup) (datatypes.Virtual_PlacementGroup, error)
	placementCreateMutex       sync.RWMutex
	placementCreateArgsForCall []struct {
		arg1 *datatypes.Virtual_PlacementGroup
	}
	placementCreateReturns struct {
		result1 datatypes.Virtual_PlacementGroup
		result2 error
	}
	placementCreateReturnsOnCall map[int]struct {
		result1 datatypes.Virtual_PlacementGroup
		result2 error
	}
	PlacementsGroupListStub        func(string) ([]datatypes.Virtual_PlacementGroup, error)
	placementsGroupListMutex       sync.RWMutex
	placementsGroupListArgsForCall []struct {
		arg1 string
	}
	placementsGroupListReturns struct {
		result1 []datatypes.Virtual_PlacementGroup
		result2 error
	}
	placementsGroupListReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_PlacementGroup
		result2 error
	}
	PowerOffInstanceStub        func(int, bool, bool) error
	powerOffInstanceMutex       sync.RWMutex
	powerOffInstanceArgsForCall []struct {
		arg1 int
		arg2 bool
		arg3 bool
	}
	powerOffInstanceReturns struct {
		result1 error
	}
	powerOffInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	PowerOnInstanceStub        func(int) error
	powerOnInstanceMutex       sync.RWMutex
	powerOnInstanceArgsForCall []struct {
		arg1 int
	}
	powerOnInstanceReturns struct {
		result1 error
	}
	powerOnInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	RebootInstanceStub        func(int, bool, bool) error
	rebootInstanceMutex       sync.RWMutex
	rebootInstanceArgsForCall []struct {
		arg1 int
		arg2 bool
		arg3 bool
	}
	rebootInstanceReturns struct {
		result1 error
	}
	rebootInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	ReloadInstanceStub        func(int, string, []int, int) error
	reloadInstanceMutex       sync.RWMutex
	reloadInstanceArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 []int
		arg4 int
	}
	reloadInstanceReturns struct {
		result1 error
	}
	reloadInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	RescueInstanceStub        func(int) error
	rescueInstanceMutex       sync.RWMutex
	rescueInstanceArgsForCall []struct {
		arg1 int
	}
	rescueInstanceReturns struct {
		result1 error
	}
	rescueInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	ResumeInstanceStub        func(int) error
	resumeInstanceMutex       sync.RWMutex
	resumeInstanceArgsForCall []struct {
		arg1 int
	}
	resumeInstanceReturns struct {
		result1 error
	}
	resumeInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	SetNetworkPortSpeedStub        func(int, bool, int) error
	setNetworkPortSpeedMutex       sync.RWMutex
	setNetworkPortSpeedArgsForCall []struct {
		arg1 int
		arg2 bool
		arg3 int
	}
	setNetworkPortSpeedReturns struct {
		result1 error
	}
	setNetworkPortSpeedReturnsOnCall map[int]struct {
		result1 error
	}
	SetTagsStub        func(int, string) error
	setTagsMutex       sync.RWMutex
	setTagsArgsForCall []struct {
		arg1 int
		arg2 string
	}
	setTagsReturns struct {
		result1 error
	}
	setTagsReturnsOnCall map[int]struct {
		result1 error
	}
	SetUserMetadataStub        func(int, []string) error
	setUserMetadataMutex       sync.RWMutex
	setUserMetadataArgsForCall []struct {
		arg1 int
		arg2 []string
	}
	setUserMetadataReturns struct {
		result1 error
	}
	setUserMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	UpgradeInstanceStub        func(int, int, int, int, int, []int, bool, string) (datatypes.Container_Product_Order_Receipt, error)
	upgradeInstanceMutex       sync.RWMutex
	upgradeInstanceArgsForCall []struct {
		arg1 int
		arg2 int
		arg3 int
		arg4 int
		arg5 int
		arg6 []int
		arg7 bool
		arg8 string
	}
	upgradeInstanceReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	upgradeInstanceReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	VerifyInstanceCreationStub        func(datatypes.Virtual_Guest) (datatypes.Container_Product_Order, error)
	verifyInstanceCreationMutex       sync.RWMutex
	verifyInstanceCreationArgsForCall []struct {
		arg1 datatypes.Virtual_Guest
	}
	verifyInstanceCreationReturns struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	verifyInstanceCreationReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVirtualServerManager) AttachPortableStorage(arg1 int, arg2 int) (datatypes.Provisioning_Version1_Transaction, error) {
	fake.attachPortableStorageMutex.Lock()
	ret, specificReturn := fake.attachPortableStorageReturnsOnCall[len(fake.attachPortableStorageArgsForCall)]
	fake.attachPortableStorageArgsForCall = append(fake.attachPortableStorageArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	stub := fake.AttachPortableStorageStub
	fakeReturns := fake.attachPortableStorageReturns
	fake.recordInvocation("AttachPortableStorage", []interface{}{arg1, arg2})
	fake.attachPortableStorageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) AttachPortableStorageCallCount() int {
	fake.attachPortableStorageMutex.RLock()
	defer fake.attachPortableStorageMutex.RUnlock()
	return len(fake.attachPortableStorageArgsForCall)
}

func (fake *FakeVirtualServerManager) AttachPortableStorageCalls(stub func(int, int) (datatypes.Provisioning_Version1_Transaction, error)) {
	fake.attachPortableStorageMutex.Lock()
	defer fake.attachPortableStorageMutex.Unlock()
	fake.AttachPortableStorageStub = stub
}

func (fake *FakeVirtualServerManager) AttachPortableStorageArgsForCall(i int) (int, int) {
	fake.attachPortableStorageMutex.RLock()
	defer fake.attachPortableStorageMutex.RUnlock()
	argsForCall := fake.attachPortableStorageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) AttachPortableStorageReturns(result1 datatypes.Provisioning_Version1_Transaction, result2 error) {
	fake.attachPortableStorageMutex.Lock()
	defer fake.attachPortableStorageMutex.Unlock()
	fake.AttachPortableStorageStub = nil
	fake.attachPortableStorageReturns = struct {
		result1 datatypes.Provisioning_Version1_Transaction
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) AttachPortableStorageReturnsOnCall(i int, result1 datatypes.Provisioning_Version1_Transaction, result2 error) {
	fake.attachPortableStorageMutex.Lock()
	defer fake.attachPortableStorageMutex.Unlock()
	fake.AttachPortableStorageStub = nil
	if fake.attachPortableStorageReturnsOnCall == nil {
		fake.attachPortableStorageReturnsOnCall = make(map[int]struct {
			result1 datatypes.Provisioning_Version1_Transaction
			result2 error
		})
	}
	fake.attachPortableStorageReturnsOnCall[i] = struct {
		result1 datatypes.Provisioning_Version1_Transaction
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) AuthorizeStorage(arg1 int, arg2 string) (bool, error) {
	fake.authorizeStorageMutex.Lock()
	ret, specificReturn := fake.authorizeStorageReturnsOnCall[len(fake.authorizeStorageArgsForCall)]
	fake.authorizeStorageArgsForCall = append(fake.authorizeStorageArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.AuthorizeStorageStub
	fakeReturns := fake.authorizeStorageReturns
	fake.recordInvocation("AuthorizeStorage", []interface{}{arg1, arg2})
	fake.authorizeStorageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) AuthorizeStorageCallCount() int {
	fake.authorizeStorageMutex.RLock()
	defer fake.authorizeStorageMutex.RUnlock()
	return len(fake.authorizeStorageArgsForCall)
}

func (fake *FakeVirtualServerManager) AuthorizeStorageCalls(stub func(int, string) (bool, error)) {
	fake.authorizeStorageMutex.Lock()
	defer fake.authorizeStorageMutex.Unlock()
	fake.AuthorizeStorageStub = stub
}

func (fake *FakeVirtualServerManager) AuthorizeStorageArgsForCall(i int) (int, string) {
	fake.authorizeStorageMutex.RLock()
	defer fake.authorizeStorageMutex.RUnlock()
	argsForCall := fake.authorizeStorageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) AuthorizeStorageReturns(result1 bool, result2 error) {
	fake.authorizeStorageMutex.Lock()
	defer fake.authorizeStorageMutex.Unlock()
	fake.AuthorizeStorageStub = nil
	fake.authorizeStorageReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) AuthorizeStorageReturnsOnCall(i int, result1 bool, result2 error) {
	fake.authorizeStorageMutex.Lock()
	defer fake.authorizeStorageMutex.Unlock()
	fake.AuthorizeStorageStub = nil
	if fake.authorizeStorageReturnsOnCall == nil {
		fake.authorizeStorageReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.authorizeStorageReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CancelInstance(arg1 int) error {
	fake.cancelInstanceMutex.Lock()
	ret, specificReturn := fake.cancelInstanceReturnsOnCall[len(fake.cancelInstanceArgsForCall)]
	fake.cancelInstanceArgsForCall = append(fake.cancelInstanceArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.CancelInstanceStub
	fakeReturns := fake.cancelInstanceReturns
	fake.recordInvocation("CancelInstance", []interface{}{arg1})
	fake.cancelInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) CancelInstanceCallCount() int {
	fake.cancelInstanceMutex.RLock()
	defer fake.cancelInstanceMutex.RUnlock()
	return len(fake.cancelInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) CancelInstanceCalls(stub func(int) error) {
	fake.cancelInstanceMutex.Lock()
	defer fake.cancelInstanceMutex.Unlock()
	fake.CancelInstanceStub = stub
}

func (fake *FakeVirtualServerManager) CancelInstanceArgsForCall(i int) int {
	fake.cancelInstanceMutex.RLock()
	defer fake.cancelInstanceMutex.RUnlock()
	argsForCall := fake.cancelInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) CancelInstanceReturns(result1 error) {
	fake.cancelInstanceMutex.Lock()
	defer fake.cancelInstanceMutex.Unlock()
	fake.CancelInstanceStub = nil
	fake.cancelInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) CancelInstanceReturnsOnCall(i int, result1 error) {
	fake.cancelInstanceMutex.Lock()
	defer fake.cancelInstanceMutex.Unlock()
	fake.CancelInstanceStub = nil
	if fake.cancelInstanceReturnsOnCall == nil {
		fake.cancelInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cancelInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) CapacityList(arg1 string) ([]datatypes.Virtual_ReservedCapacityGroup, error) {
	fake.capacityListMutex.Lock()
	ret, specificReturn := fake.capacityListReturnsOnCall[len(fake.capacityListArgsForCall)]
	fake.capacityListArgsForCall = append(fake.capacityListArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CapacityListStub
	fakeReturns := fake.capacityListReturns
	fake.recordInvocation("CapacityList", []interface{}{arg1})
	fake.capacityListMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) CapacityListCallCount() int {
	fake.capacityListMutex.RLock()
	defer fake.capacityListMutex.RUnlock()
	return len(fake.capacityListArgsForCall)
}

func (fake *FakeVirtualServerManager) CapacityListCalls(stub func(string) ([]datatypes.Virtual_ReservedCapacityGroup, error)) {
	fake.capacityListMutex.Lock()
	defer fake.capacityListMutex.Unlock()
	fake.CapacityListStub = stub
}

func (fake *FakeVirtualServerManager) CapacityListArgsForCall(i int) string {
	fake.capacityListMutex.RLock()
	defer fake.capacityListMutex.RUnlock()
	argsForCall := fake.capacityListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) CapacityListReturns(result1 []datatypes.Virtual_ReservedCapacityGroup, result2 error) {
	fake.capacityListMutex.Lock()
	defer fake.capacityListMutex.Unlock()
	fake.CapacityListStub = nil
	fake.capacityListReturns = struct {
		result1 []datatypes.Virtual_ReservedCapacityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CapacityListReturnsOnCall(i int, result1 []datatypes.Virtual_ReservedCapacityGroup, result2 error) {
	fake.capacityListMutex.Lock()
	defer fake.capacityListMutex.Unlock()
	fake.CapacityListStub = nil
	if fake.capacityListReturnsOnCall == nil {
		fake.capacityListReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_ReservedCapacityGroup
			result2 error
		})
	}
	fake.capacityListReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_ReservedCapacityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CaptureImage(arg1 int, arg2 string, arg3 string, arg4 []datatypes.Virtual_Guest_Block_Device) (datatypes.Virtual_Guest_Block_Device_Template_Group, error) {
	var arg4Copy []datatypes.Virtual_Guest_Block_Device
	if arg4 != nil {
		arg4Copy = make([]datatypes.Virtual_Guest_Block_Device, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.captureImageMutex.Lock()
	ret, specificReturn := fake.captureImageReturnsOnCall[len(fake.captureImageArgsForCall)]
	fake.captureImageArgsForCall = append(fake.captureImageArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 string
		arg4 []datatypes.Virtual_Guest_Block_Device
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.CaptureImageStub
	fakeReturns := fake.captureImageReturns
	fake.recordInvocation("CaptureImage", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.captureImageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) CaptureImageCallCount() int {
	fake.captureImageMutex.RLock()
	defer fake.captureImageMutex.RUnlock()
	return len(fake.captureImageArgsForCall)
}

func (fake *FakeVirtualServerManager) CaptureImageCalls(stub func(int, string, string, []datatypes.Virtual_Guest_Block_Device) (datatypes.Virtual_Guest_Block_Device_Template_Group, error)) {
	fake.captureImageMutex.Lock()
	defer fake.captureImageMutex.Unlock()
	fake.CaptureImageStub = stub
}

func (fake *FakeVirtualServerManager) CaptureImageArgsForCall(i int) (int, string, string, []datatypes.Virtual_Guest_Block_Device) {
	fake.captureImageMutex.RLock()
	defer fake.captureImageMutex.RUnlock()
	argsForCall := fake.captureImageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeVirtualServerManager) CaptureImageReturns(result1 datatypes.Virtual_Guest_Block_Device_Template_Group, result2 error) {
	fake.captureImageMutex.Lock()
	defer fake.captureImageMutex.Unlock()
	fake.CaptureImageStub = nil
	fake.captureImageReturns = struct {
		result1 datatypes.Virtual_Guest_Block_Device_Template_Group
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CaptureImageReturnsOnCall(i int, result1 datatypes.Virtual_Guest_Block_Device_Template_Group, result2 error) {
	fake.captureImageMutex.Lock()
	defer fake.captureImageMutex.Unlock()
	fake.CaptureImageStub = nil
	if fake.captureImageReturnsOnCall == nil {
		fake.captureImageReturnsOnCall = make(map[int]struct {
			result1 datatypes.Virtual_Guest_Block_Device_Template_Group
			result2 error
		})
	}
	fake.captureImageReturnsOnCall[i] = struct {
		result1 datatypes.Virtual_Guest_Block_Device_Template_Group
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CreateDedicatedHost(arg1 string, arg2 string, arg3 string, arg4 string, arg5 string, arg6 int) (datatypes.Container_Product_Order_Receipt, error) {
	fake.createDedicatedHostMutex.Lock()
	ret, specificReturn := fake.createDedicatedHostReturnsOnCall[len(fake.createDedicatedHostArgsForCall)]
	fake.createDedicatedHostArgsForCall = append(fake.createDedicatedHostArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 int
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.CreateDedicatedHostStub
	fakeReturns := fake.createDedicatedHostReturns
	fake.recordInvocation("CreateDedicatedHost", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.createDedicatedHostMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) CreateDedicatedHostCallCount() int {
	fake.createDedicatedHostMutex.RLock()
	defer fake.createDedicatedHostMutex.RUnlock()
	return len(fake.createDedicatedHostArgsForCall)
}

func (fake *FakeVirtualServerManager) CreateDedicatedHostCalls(stub func(string, string, string, string, string, int) (datatypes.Container_Product_Order_Receipt, error)) {
	fake.createDedicatedHostMutex.Lock()
	defer fake.createDedicatedHostMutex.Unlock()
	fake.CreateDedicatedHostStub = stub
}

func (fake *FakeVirtualServerManager) CreateDedicatedHostArgsForCall(i int) (string, string, string, string, string, int) {
	fake.createDedicatedHostMutex.RLock()
	defer fake.createDedicatedHostMutex.RUnlock()
	argsForCall := fake.createDedicatedHostArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeVirtualServerManager) CreateDedicatedHostReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.createDedicatedHostMutex.Lock()
	defer fake.createDedicatedHostMutex.Unlock()
	fake.CreateDedicatedHostStub = nil
	fake.createDedicatedHostReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CreateDedicatedHostReturnsOnCall(i int, result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.createDedicatedHostMutex.Lock()
	defer fake.createDedicatedHostMutex.Unlock()
	fake.CreateDedicatedHostStub = nil
	if fake.createDedicatedHostReturnsOnCall == nil {
		fake.createDedicatedHostReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order_Receipt
			result2 error
		})
	}
	fake.createDedicatedHostReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CreateInstance(arg1 *datatypes.Virtual_Guest) (datatypes.Virtual_Guest, error) {
	fake.createInstanceMutex.Lock()
	ret, specificReturn := fake.createInstanceReturnsOnCall[len(fake.createInstanceArgsForCall)]
	fake.createInstanceArgsForCall = append(fake.createInstanceArgsForCall, struct {
		arg1 *datatypes.Virtual_Guest
	}{arg1})
	stub := fake.CreateInstanceStub
	fakeReturns := fake.createInstanceReturns
	fake.recordInvocation("CreateInstance", []interface{}{arg1})
	fake.createInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) CreateInstanceCallCount() int {
	fake.createInstanceMutex.RLock()
	defer fake.createInstanceMutex.RUnlock()
	return len(fake.createInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) CreateInstanceCalls(stub func(*datatypes.Virtual_Guest) (datatypes.Virtual_Guest, error)) {
	fake.createInstanceMutex.Lock()
	defer fake.createInstanceMutex.Unlock()
	fake.CreateInstanceStub = stub
}

func (fake *FakeVirtualServerManager) CreateInstanceArgsForCall(i int) *datatypes.Virtual_Guest {
	fake.createInstanceMutex.RLock()
	defer fake.createInstanceMutex.RUnlock()
	argsForCall := fake.createInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) CreateInstanceReturns(result1 datatypes.Virtual_Guest, result2 error) {
	fake.createInstanceMutex.Lock()
	defer fake.createInstanceMutex.Unlock()
	fake.CreateInstanceStub = nil
	fake.createInstanceReturns = struct {
		result1 datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CreateInstanceReturnsOnCall(i int, result1 datatypes.Virtual_Guest, result2 error) {
	fake.createInstanceMutex.Lock()
	defer fake.createInstanceMutex.Unlock()
	fake.CreateInstanceStub = nil
	if fake.createInstanceReturnsOnCall == nil {
		fake.createInstanceReturnsOnCall = make(map[int]struct {
			result1 datatypes.Virtual_Guest
			result2 error
		})
	}
	fake.createInstanceReturnsOnCall[i] = struct {
		result1 datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CreateInstances(arg1 []datatypes.Virtual_Guest) ([]datatypes.Virtual_Guest, error) {
	var arg1Copy []datatypes.Virtual_Guest
	if arg1 != nil {
		arg1Copy = make([]datatypes.Virtual_Guest, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createInstancesMutex.Lock()
	ret, specificReturn := fake.createInstancesReturnsOnCall[len(fake.createInstancesArgsForCall)]
	fake.createInstancesArgsForCall = append(fake.createInstancesArgsForCall, struct {
		arg1 []datatypes.Virtual_Guest
	}{arg1Copy})
	stub := fake.CreateInstancesStub
	fakeReturns := fake.createInstancesReturns
	fake.recordInvocation("CreateInstances", []interface{}{arg1Copy})
	fake.createInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) CreateInstancesCallCount() int {
	fake.createInstancesMutex.RLock()
	defer fake.createInstancesMutex.RUnlock()
	return len(fake.createInstancesArgsForCall)
}

func (fake *FakeVirtualServerManager) CreateInstancesCalls(stub func([]datatypes.Virtual_Guest) ([]datatypes.Virtual_Guest, error)) {
	fake.createInstancesMutex.Lock()
	defer fake.createInstancesMutex.Unlock()
	fake.CreateInstancesStub = stub
}

func (fake *FakeVirtualServerManager) CreateInstancesArgsForCall(i int) []datatypes.Virtual_Guest {
	fake.createInstancesMutex.RLock()
	defer fake.createInstancesMutex.RUnlock()
	argsForCall := fake.createInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) CreateInstancesReturns(result1 []datatypes.Virtual_Guest, result2 error) {
	fake.createInstancesMutex.Lock()
	defer fake.createInstancesMutex.Unlock()
	fake.CreateInstancesStub = nil
	fake.createInstancesReturns = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CreateInstancesReturnsOnCall(i int, result1 []datatypes.Virtual_Guest, result2 error) {
	fake.createInstancesMutex.Lock()
	defer fake.createInstancesMutex.Unlock()
	fake.CreateInstancesStub = nil
	if fake.createInstancesReturnsOnCall == nil {
		fake.createInstancesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_Guest
			result2 error
		})
	}
	fake.createInstancesReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CreateUserCustomerNotification(arg1 int, arg2 int) (datatypes.User_Customer_Notification_Virtual_Guest, error) {
	fake.createUserCustomerNotificationMutex.Lock()
	ret, specificReturn := fake.createUserCustomerNotificationReturnsOnCall[len(fake.createUserCustomerNotificationArgsForCall)]
	fake.createUserCustomerNotificationArgsForCall = append(fake.createUserCustomerNotificationArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	stub := fake.CreateUserCustomerNotificationStub
	fakeReturns := fake.createUserCustomerNotificationReturns
	fake.recordInvocation("CreateUserCustomerNotification", []interface{}{arg1, arg2})
	fake.createUserCustomerNotificationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) CreateUserCustomerNotificationCallCount() int {
	fake.createUserCustomerNotificationMutex.RLock()
	defer fake.createUserCustomerNotificationMutex.RUnlock()
	return len(fake.createUserCustomerNotificationArgsForCall)
}

func (fake *FakeVirtualServerManager) CreateUserCustomerNotificationCalls(stub func(int, int) (datatypes.User_Customer_Notification_Virtual_Guest, error)) {
	fake.createUserCustomerNotificationMutex.Lock()
	defer fake.createUserCustomerNotificationMutex.Unlock()
	fake.CreateUserCustomerNotificationStub = stub
}

func (fake *FakeVirtualServerManager) CreateUserCustomerNotificationArgsForCall(i int) (int, int) {
	fake.createUserCustomerNotificationMutex.RLock()
	defer fake.createUserCustomerNotificationMutex.RUnlock()
	argsForCall := fake.createUserCustomerNotificationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) CreateUserCustomerNotificationReturns(result1 datatypes.User_Customer_Notification_Virtual_Guest, result2 error) {
	fake.createUserCustomerNotificationMutex.Lock()
	defer fake.createUserCustomerNotificationMutex.Unlock()
	fake.CreateUserCustomerNotificationStub = nil
	fake.createUserCustomerNotificationReturns = struct {
		result1 datatypes.User_Customer_Notification_Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) CreateUserCustomerNotificationReturnsOnCall(i int, result1 datatypes.User_Customer_Notification_Virtual_Guest, result2 error) {
	fake.createUserCustomerNotificationMutex.Lock()
	defer fake.createUserCustomerNotificationMutex.Unlock()
	fake.CreateUserCustomerNotificationStub = nil
	if fake.createUserCustomerNotificationReturnsOnCall == nil {
		fake.createUserCustomerNotificationReturnsOnCall = make(map[int]struct {
			result1 datatypes.User_Customer_Notification_Virtual_Guest
			result2 error
		})
	}
	fake.createUserCustomerNotificationReturnsOnCall[i] = struct {
		result1 datatypes.User_Customer_Notification_Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) DeleteUserCustomerNotification(arg1 int) (bool, error) {
	fake.deleteUserCustomerNotificationMutex.Lock()
	ret, specificReturn := fake.deleteUserCustomerNotificationReturnsOnCall[len(fake.deleteUserCustomerNotificationArgsForCall)]
	fake.deleteUserCustomerNotificationArgsForCall = append(fake.deleteUserCustomerNotificationArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.DeleteUserCustomerNotificationStub
	fakeReturns := fake.deleteUserCustomerNotificationReturns
	fake.recordInvocation("DeleteUserCustomerNotification", []interface{}{arg1})
	fake.deleteUserCustomerNotificationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) DeleteUserCustomerNotificationCallCount() int {
	fake.deleteUserCustomerNotificationMutex.RLock()
	defer fake.deleteUserCustomerNotificationMutex.RUnlock()
	return len(fake.deleteUserCustomerNotificationArgsForCall)
}

func (fake *FakeVirtualServerManager) DeleteUserCustomerNotificationCalls(stub func(int) (bool, error)) {
	fake.deleteUserCustomerNotificationMutex.Lock()
	defer fake.deleteUserCustomerNotificationMutex.Unlock()
	fake.DeleteUserCustomerNotificationStub = stub
}

func (fake *FakeVirtualServerManager) DeleteUserCustomerNotificationArgsForCall(i int) int {
	fake.deleteUserCustomerNotificationMutex.RLock()
	defer fake.deleteUserCustomerNotificationMutex.RUnlock()
	argsForCall := fake.deleteUserCustomerNotificationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) DeleteUserCustomerNotificationReturns(result1 bool, result2 error) {
	fake.deleteUserCustomerNotificationMutex.Lock()
	defer fake.deleteUserCustomerNotificationMutex.Unlock()
	fake.DeleteUserCustomerNotificationStub = nil
	fake.deleteUserCustomerNotificationReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) DeleteUserCustomerNotificationReturnsOnCall(i int, result1 bool, result2 error) {
	fake.deleteUserCustomerNotificationMutex.Lock()
	defer fake.deleteUserCustomerNotificationMutex.Unlock()
	fake.DeleteUserCustomerNotificationStub = nil
	if fake.deleteUserCustomerNotificationReturnsOnCall == nil {
		fake.deleteUserCustomerNotificationReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.deleteUserCustomerNotificationReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) EditInstance(arg1 int, arg2 string, arg3 string, arg4 string, arg5 string, arg6 *int, arg7 *int) ([]bool, []string) {
	fake.editInstanceMutex.Lock()
	ret, specificReturn := fake.editInstanceReturnsOnCall[len(fake.editInstanceArgsForCall)]
	fake.editInstanceArgsForCall = append(fake.editInstanceArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 *int
		arg7 *int
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	stub := fake.EditInstanceStub
	fakeReturns := fake.editInstanceReturns
	fake.recordInvocation("EditInstance", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.editInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) EditInstanceCallCount() int {
	fake.editInstanceMutex.RLock()
	defer fake.editInstanceMutex.RUnlock()
	return len(fake.editInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) EditInstanceCalls(stub func(int, string, string, string, string, *int, *int) ([]bool, []string)) {
	fake.editInstanceMutex.Lock()
	defer fake.editInstanceMutex.Unlock()
	fake.EditInstanceStub = stub
}

func (fake *FakeVirtualServerManager) EditInstanceArgsForCall(i int) (int, string, string, string, string, *int, *int) {
	fake.editInstanceMutex.RLock()
	defer fake.editInstanceMutex.RUnlock()
	argsForCall := fake.editInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *FakeVirtualServerManager) EditInstanceReturns(result1 []bool, result2 []string) {
	fake.editInstanceMutex.Lock()
	defer fake.editInstanceMutex.Unlock()
	fake.EditInstanceStub = nil
	fake.editInstanceReturns = struct {
		result1 []bool
		result2 []string
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) EditInstanceReturnsOnCall(i int, result1 []bool, result2 []string) {
	fake.editInstanceMutex.Lock()
	defer fake.editInstanceMutex.Unlock()
	fake.EditInstanceStub = nil
	if fake.editInstanceReturnsOnCall == nil {
		fake.editInstanceReturnsOnCall = make(map[int]struct {
			result1 []bool
			result2 []string
		})
	}
	fake.editInstanceReturnsOnCall[i] = struct {
		result1 []bool
		result2 []string
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GenerateInstanceCapacityCreationTemplate(arg1 *datatypes.Container_Product_Order_Virtual_ReservedCapacity, arg2 map[string]interface{}) (interface{}, error) {
	fake.generateInstanceCapacityCreationTemplateMutex.Lock()
	ret, specificReturn := fake.generateInstanceCapacityCreationTemplateReturnsOnCall[len(fake.generateInstanceCapacityCreationTemplateArgsForCall)]
	fake.generateInstanceCapacityCreationTemplateArgsForCall = append(fake.generateInstanceCapacityCreationTemplateArgsForCall, struct {
		arg1 *datatypes.Container_Product_Order_Virtual_ReservedCapacity
		arg2 map[string]interface{}
	}{arg1, arg2})
	stub := fake.GenerateInstanceCapacityCreationTemplateStub
	fakeReturns := fake.generateInstanceCapacityCreationTemplateReturns
	fake.recordInvocation("GenerateInstanceCapacityCreationTemplate", []interface{}{arg1, arg2})
	fake.generateInstanceCapacityCreationTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GenerateInstanceCapacityCreationTemplateCallCount() int {
	fake.generateInstanceCapacityCreationTemplateMutex.RLock()
	defer fake.generateInstanceCapacityCreationTemplateMutex.RUnlock()
	return len(fake.generateInstanceCapacityCreationTemplateArgsForCall)
}

func (fake *FakeVirtualServerManager) GenerateInstanceCapacityCreationTemplateCalls(stub func(*datatypes.Container_Product_Order_Virtual_ReservedCapacity, map[string]interface{}) (interface{}, error)) {
	fake.generateInstanceCapacityCreationTemplateMutex.Lock()
	defer fake.generateInstanceCapacityCreationTemplateMutex.Unlock()
	fake.GenerateInstanceCapacityCreationTemplateStub = stub
}

func (fake *FakeVirtualServerManager) GenerateInstanceCapacityCreationTemplateArgsForCall(i int) (*datatypes.Container_Product_Order_Virtual_ReservedCapacity, map[string]interface{}) {
	fake.generateInstanceCapacityCreationTemplateMutex.RLock()
	defer fake.generateInstanceCapacityCreationTemplateMutex.RUnlock()
	argsForCall := fake.generateInstanceCapacityCreationTemplateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) GenerateInstanceCapacityCreationTemplateReturns(result1 interface{}, result2 error) {
	fake.generateInstanceCapacityCreationTemplateMutex.Lock()
	defer fake.generateInstanceCapacityCreationTemplateMutex.Unlock()
	fake.GenerateInstanceCapacityCreationTemplateStub = nil
	fake.generateInstanceCapacityCreationTemplateReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GenerateInstanceCapacityCreationTemplateReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.generateInstanceCapacityCreationTemplateMutex.Lock()
	defer fake.generateInstanceCapacityCreationTemplateMutex.Unlock()
	fake.GenerateInstanceCapacityCreationTemplateStub = nil
	if fake.generateInstanceCapacityCreationTemplateReturnsOnCall == nil {
		fake.generateInstanceCapacityCreationTemplateReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.generateInstanceCapacityCreationTemplateReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GenerateInstanceCreationTemplate(arg1 *datatypes.Virtual_Guest, arg2 map[string]interface{}) (*datatypes.Virtual_Guest, error) {
	fake.generateInstanceCreationTemplateMutex.Lock()
	ret, specificReturn := fake.generateInstanceCreationTemplateReturnsOnCall[len(fake.generateInstanceCreationTemplateArgsForCall)]
	fake.generateInstanceCreationTemplateArgsForCall = append(fake.generateInstanceCreationTemplateArgsForCall, struct {
		arg1 *datatypes.Virtual_Guest
		arg2 map[string]interface{}
	}{arg1, arg2})
	stub := fake.GenerateInstanceCreationTemplateStub
	fakeReturns := fake.generateInstanceCreationTemplateReturns
	fake.recordInvocation("GenerateInstanceCreationTemplate", []interface{}{arg1, arg2})
	fake.generateInstanceCreationTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GenerateInstanceCreationTemplateCallCount() int {
	fake.generateInstanceCreationTemplateMutex.RLock()
	defer fake.generateInstanceCreationTemplateMutex.RUnlock()
	return len(fake.generateInstanceCreationTemplateArgsForCall)
}

func (fake *FakeVirtualServerManager) GenerateInstanceCreationTemplateCalls(stub func(*datatypes.Virtual_Guest, map[string]interface{}) (*datatypes.Virtual_Guest, error)) {
	fake.generateInstanceCreationTemplateMutex.Lock()
	defer fake.generateInstanceCreationTemplateMutex.Unlock()
	fake.GenerateInstanceCreationTemplateStub = stub
}

func (fake *FakeVirtualServerManager) GenerateInstanceCreationTemplateArgsForCall(i int) (*datatypes.Virtual_Guest, map[string]interface{}) {
	fake.generateInstanceCreationTemplateMutex.RLock()
	defer fake.generateInstanceCreationTemplateMutex.RUnlock()
	argsForCall := fake.generateInstanceCreationTemplateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) GenerateInstanceCreationTemplateReturns(result1 *datatypes.Virtual_Guest, result2 error) {
	fake.generateInstanceCreationTemplateMutex.Lock()
	defer fake.generateInstanceCreationTemplateMutex.Unlock()
	fake.GenerateInstanceCreationTemplateStub = nil
	fake.generateInstanceCreationTemplateReturns = struct {
		result1 *datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GenerateInstanceCreationTemplateReturnsOnCall(i int, result1 *datatypes.Virtual_Guest, result2 error) {
	fake.generateInstanceCreationTemplateMutex.Lock()
	defer fake.generateInstanceCreationTemplateMutex.Unlock()
	fake.GenerateInstanceCreationTemplateStub = nil
	if fake.generateInstanceCreationTemplateReturnsOnCall == nil {
		fake.generateInstanceCreationTemplateReturnsOnCall = make(map[int]struct {
			result1 *datatypes.Virtual_Guest
			result2 error
		})
	}
	fake.generateInstanceCreationTemplateReturnsOnCall[i] = struct {
		result1 *datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetAvailablePlacementRouters(arg1 int) ([]datatypes.Hardware, error) {
	fake.getAvailablePlacementRoutersMutex.Lock()
	ret, specificReturn := fake.getAvailablePlacementRoutersReturnsOnCall[len(fake.getAvailablePlacementRoutersArgsForCall)]
	fake.getAvailablePlacementRoutersArgsForCall = append(fake.getAvailablePlacementRoutersArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetAvailablePlacementRoutersStub
	fakeReturns := fake.getAvailablePlacementRoutersReturns
	fake.recordInvocation("GetAvailablePlacementRouters", []interface{}{arg1})
	fake.getAvailablePlacementRoutersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetAvailablePlacementRoutersCallCount() int {
	fake.getAvailablePlacementRoutersMutex.RLock()
	defer fake.getAvailablePlacementRoutersMutex.RUnlock()
	return len(fake.getAvailablePlacementRoutersArgsForCall)
}

func (fake *FakeVirtualServerManager) GetAvailablePlacementRoutersCalls(stub func(int) ([]datatypes.Hardware, error)) {
	fake.getAvailablePlacementRoutersMutex.Lock()
	defer fake.getAvailablePlacementRoutersMutex.Unlock()
	fake.GetAvailablePlacementRoutersStub = stub
}

func (fake *FakeVirtualServerManager) GetAvailablePlacementRoutersArgsForCall(i int) int {
	fake.getAvailablePlacementRoutersMutex.RLock()
	defer fake.getAvailablePlacementRoutersMutex.RUnlock()
	argsForCall := fake.getAvailablePlacementRoutersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) GetAvailablePlacementRoutersReturns(result1 []datatypes.Hardware, result2 error) {
	fake.getAvailablePlacementRoutersMutex.Lock()
	defer fake.getAvailablePlacementRoutersMutex.Unlock()
	fake.GetAvailablePlacementRoutersStub = nil
	fake.getAvailablePlacementRoutersReturns = struct {
		result1 []datatypes.Hardware
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetAvailablePlacementRoutersReturnsOnCall(i int, result1 []datatypes.Hardware, result2 error) {
	fake.getAvailablePlacementRoutersMutex.Lock()
	defer fake.getAvailablePlacementRoutersMutex.Unlock()
	fake.GetAvailablePlacementRoutersStub = nil
	if fake.getAvailablePlacementRoutersReturnsOnCall == nil {
		fake.getAvailablePlacementRoutersReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Hardware
			result2 error
		})
	}
	fake.getAvailablePlacementRoutersReturnsOnCall[i] = struct {
		result1 []datatypes.Hardware
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetBandwidthData(arg1 int, arg2 time.Time, arg3 time.Time, arg4 int) ([]datatypes.Metric_Tracking_Object_Data, error) {
	fake.getBandwidthDataMutex.Lock()
	ret, specificReturn := fake.getBandwidthDataReturnsOnCall[len(fake.getBandwidthDataArgsForCall)]
	fake.getBandwidthDataArgsForCall = append(fake.getBandwidthDataArgsForCall, struct {
		arg1 int
		arg2 time.Time
		arg3 time.Time
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetBandwidthDataStub
	fakeReturns := fake.getBandwidthDataReturns
	fake.recordInvocation("GetBandwidthData", []interface{}{arg1, arg2, arg3, arg4})
	fake.getBandwidthDataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetBandwidthDataCallCount() int {
	fake.getBandwidthDataMutex.RLock()
	defer fake.getBandwidthDataMutex.RUnlock()
	return len(fake.getBandwidthDataArgsForCall)
}

func (fake *FakeVirtualServerManager) GetBandwidthDataCalls(stub func(int, time.Time, time.Time, int) ([]datatypes.Metric_Tracking_Object_Data, error)) {
	fake.getBandwidthDataMutex.Lock()
	defer fake.getBandwidthDataMutex.Unlock()
	fake.GetBandwidthDataStub = stub
}

func (fake *FakeVirtualServerManager) GetBandwidthDataArgsForCall(i int) (int, time.Time, time.Time, int) {
	fake.getBandwidthDataMutex.RLock()
	defer fake.getBandwidthDataMutex.RUnlock()
	argsForCall := fake.getBandwidthDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeVirtualServerManager) GetBandwidthDataReturns(result1 []datatypes.Metric_Tracking_Object_Data, result2 error) {
	fake.getBandwidthDataMutex.Lock()
	defer fake.getBandwidthDataMutex.Unlock()
	fake.GetBandwidthDataStub = nil
	fake.getBandwidthDataReturns = struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetBandwidthDataReturnsOnCall(i int, result1 []datatypes.Metric_Tracking_Object_Data, result2 error) {
	fake.getBandwidthDataMutex.Lock()
	defer fake.getBandwidthDataMutex.Unlock()
	fake.GetBandwidthDataStub = nil
	if fake.getBandwidthDataReturnsOnCall == nil {
		fake.getBandwidthDataReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Metric_Tracking_Object_Data
			result2 error
		})
	}
	fake.getBandwidthDataReturnsOnCall[i] = struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetCapacityCreateOptions(arg1 string) ([]datatypes.Product_Item, error) {
	fake.getCapacityCreateOptionsMutex.Lock()
	ret, specificReturn := fake.getCapacityCreateOptionsReturnsOnCall[len(fake.getCapacityCreateOptionsArgsForCall)]
	fake.getCapacityCreateOptionsArgsForCall = append(fake.getCapacityCreateOptionsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetCapacityCreateOptionsStub
	fakeReturns := fake.getCapacityCreateOptionsReturns
	fake.recordInvocation("GetCapacityCreateOptions", []interface{}{arg1})
	fake.getCapacityCreateOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetCapacityCreateOptionsCallCount() int {
	fake.getCapacityCreateOptionsMutex.RLock()
	defer fake.getCapacityCreateOptionsMutex.RUnlock()
	return len(fake.getCapacityCreateOptionsArgsForCall)
}

func (fake *FakeVirtualServerManager) GetCapacityCreateOptionsCalls(stub func(string) ([]datatypes.Product_Item, error)) {
	fake.getCapacityCreateOptionsMutex.Lock()
	defer fake.getCapacityCreateOptionsMutex.Unlock()
	fake.GetCapacityCreateOptionsStub = stub
}

func (fake *FakeVirtualServerManager) GetCapacityCreateOptionsArgsForCall(i int) string {
	fake.getCapacityCreateOptionsMutex.RLock()
	defer fake.getCapacityCreateOptionsMutex.RUnlock()
	argsForCall := fake.getCapacityCreateOptionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) GetCapacityCreateOptionsReturns(result1 []datatypes.Product_Item, result2 error) {
	fake.getCapacityCreateOptionsMutex.Lock()
	defer fake.getCapacityCreateOptionsMutex.Unlock()
	fake.GetCapacityCreateOptionsStub = nil
	fake.getCapacityCreateOptionsReturns = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetCapacityCreateOptionsReturnsOnCall(i int, result1 []datatypes.Product_Item, result2 error) {
	fake.getCapacityCreateOptionsMutex.Lock()
	defer fake.getCapacityCreateOptionsMutex.Unlock()
	fake.GetCapacityCreateOptionsStub = nil
	if fake.getCapacityCreateOptionsReturnsOnCall == nil {
		fake.getCapacityCreateOptionsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Item
			result2 error
		})
	}
	fake.getCapacityCreateOptionsReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetCapacityDetail(arg1 int) (datatypes.Virtual_ReservedCapacityGroup, error) {
	fake.getCapacityDetailMutex.Lock()
	ret, specificReturn := fake.getCapacityDetailReturnsOnCall[len(fake.getCapacityDetailArgsForCall)]
	fake.getCapacityDetailArgsForCall = append(fake.getCapacityDetailArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetCapacityDetailStub
	fakeReturns := fake.getCapacityDetailReturns
	fake.recordInvocation("GetCapacityDetail", []interface{}{arg1})
	fake.getCapacityDetailMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetCapacityDetailCallCount() int {
	fake.getCapacityDetailMutex.RLock()
	defer fake.getCapacityDetailMutex.RUnlock()
	return len(fake.getCapacityDetailArgsForCall)
}

func (fake *FakeVirtualServerManager) GetCapacityDetailCalls(stub func(int) (datatypes.Virtual_ReservedCapacityGroup, error)) {
	fake.getCapacityDetailMutex.Lock()
	defer fake.getCapacityDetailMutex.Unlock()
	fake.GetCapacityDetailStub = stub
}

func (fake *FakeVirtualServerManager) GetCapacityDetailArgsForCall(i int) int {
	fake.getCapacityDetailMutex.RLock()
	defer fake.getCapacityDetailMutex.RUnlock()
	argsForCall := fake.getCapacityDetailArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) GetCapacityDetailReturns(result1 datatypes.Virtual_ReservedCapacityGroup, result2 error) {
	fake.getCapacityDetailMutex.Lock()
	defer fake.getCapacityDetailMutex.Unlock()
	fake.GetCapacityDetailStub = nil
	fake.getCapacityDetailReturns = struct {
		result1 datatypes.Virtual_ReservedCapacityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetCapacityDetailReturnsOnCall(i int, result1 datatypes.Virtual_ReservedCapacityGroup, result2 error) {
	fake.getCapacityDetailMutex.Lock()
	defer fake.getCapacityDetailMutex.Unlock()
	fake.GetCapacityDetailStub = nil
	if fake.getCapacityDetailReturnsOnCall == nil {
		fake.getCapacityDetailReturnsOnCall = make(map[int]struct {
			result1 datatypes.Virtual_ReservedCapacityGroup
			result2 error
		})
	}
	fake.getCapacityDetailReturnsOnCall[i] = struct {
		result1 datatypes.Virtual_ReservedCapacityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetCreateOptions(arg1 string, arg2 string) (map[string]map[string]string, error) {
	fake.getCreateOptionsMutex.Lock()
	ret, specificReturn := fake.getCreateOptionsReturnsOnCall[len(fake.getCreateOptionsArgsForCall)]
	fake.getCreateOptionsArgsForCall = append(fake.getCreateOptionsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetCreateOptionsStub
	fakeReturns := fake.getCreateOptionsReturns
	fake.recordInvocation("GetCreateOptions", []interface{}{arg1, arg2})
	fake.getCreateOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetCreateOptionsCallCount() int {
	fake.getCreateOptionsMutex.RLock()
	defer fake.getCreateOptionsMutex.RUnlock()
	return len(fake.getCreateOptionsArgsForCall)
}

func (fake *FakeVirtualServerManager) GetCreateOptionsCalls(stub func(string, string) (map[string]map[string]string, error)) {
	fake.getCreateOptionsMutex.Lock()
	defer fake.getCreateOptionsMutex.Unlock()
	fake.GetCreateOptionsStub = stub
}

func (fake *FakeVirtualServerManager) GetCreateOptionsArgsForCall(i int) (string, string) {
	fake.getCreateOptionsMutex.RLock()
	defer fake.getCreateOptionsMutex.RUnlock()
	argsForCall := fake.getCreateOptionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) GetCreateOptionsReturns(result1 map[string]map[string]string, result2 error) {
	fake.getCreateOptionsMutex.Lock()
	defer fake.getCreateOptionsMutex.Unlock()
	fake.GetCreateOptionsStub = nil
	fake.getCreateOptionsReturns = struct {
		result1 map[string]map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetCreateOptionsReturnsOnCall(i int, result1 map[string]map[string]string, result2 error) {
	fake.getCreateOptionsMutex.Lock()
	defer fake.getCreateOptionsMutex.Unlock()
	fake.GetCreateOptionsStub = nil
	if fake.getCreateOptionsReturnsOnCall == nil {
		fake.getCreateOptionsReturnsOnCall = make(map[int]struct {
			result1 map[string]map[string]string
			result2 error
		})
	}
	fake.getCreateOptionsReturnsOnCall[i] = struct {
		result1 map[string]map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetDatacenters() ([]datatypes.Location, error) {
	fake.getDatacentersMutex.Lock()
	ret, specificReturn := fake.getDatacentersReturnsOnCall[len(fake.getDatacentersArgsForCall)]
	fake.getDatacentersArgsForCall = append(fake.getDatacentersArgsForCall, struct {
	}{})
	stub := fake.GetDatacentersStub
	fakeReturns := fake.getDatacentersReturns
	fake.recordInvocation("GetDatacenters", []interface{}{})
	fake.getDatacentersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetDatacentersCallCount() int {
	fake.getDatacentersMutex.RLock()
	defer fake.getDatacentersMutex.RUnlock()
	return len(fake.getDatacentersArgsForCall)
}

func (fake *FakeVirtualServerManager) GetDatacentersCalls(stub func() ([]datatypes.Location, error)) {
	fake.getDatacentersMutex.Lock()
	defer fake.getDatacentersMutex.Unlock()
	fake.GetDatacentersStub = stub
}

func (fake *FakeVirtualServerManager) GetDatacentersReturns(result1 []datatypes.Location, result2 error) {
	fake.getDatacentersMutex.Lock()
	defer fake.getDatacentersMutex.Unlock()
	fake.GetDatacentersStub = nil
	fake.getDatacentersReturns = struct {
		result1 []datatypes.Location
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetDatacentersReturnsOnCall(i int, result1 []datatypes.Location, result2 error) {
	fake.getDatacentersMutex.Lock()
	defer fake.getDatacentersMutex.Unlock()
	fake.GetDatacentersStub = nil
	if fake.getDatacentersReturnsOnCall == nil {
		fake.getDatacentersReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Location
			result2 error
		})
	}
	fake.getDatacentersReturnsOnCall[i] = struct {
		result1 []datatypes.Location
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetDedicatedHost(arg1 int) (datatypes.Virtual_DedicatedHost, error) {
	fake.getDedicatedHostMutex.Lock()
	ret, specificReturn := fake.getDedicatedHostReturnsOnCall[len(fake.getDedicatedHostArgsForCall)]
	fake.getDedicatedHostArgsForCall = append(fake.getDedicatedHostArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetDedicatedHostStub
	fakeReturns := fake.getDedicatedHostReturns
	fake.recordInvocation("GetDedicatedHost", []interface{}{arg1})
	fake.getDedicatedHostMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetDedicatedHostCallCount() int {
	fake.getDedicatedHostMutex.RLock()
	defer fake.getDedicatedHostMutex.RUnlock()
	return len(fake.getDedicatedHostArgsForCall)
}

func (fake *FakeVirtualServerManager) GetDedicatedHostCalls(stub func(int) (datatypes.Virtual_DedicatedHost, error)) {
	fake.getDedicatedHostMutex.Lock()
	defer fake.getDedicatedHostMutex.Unlock()
	fake.GetDedicatedHostStub = stub
}

func (fake *FakeVirtualServerManager) GetDedicatedHostArgsForCall(i int) int {
	fake.getDedicatedHostMutex.RLock()
	defer fake.getDedicatedHostMutex.RUnlock()
	argsForCall := fake.getDedicatedHostArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) GetDedicatedHostReturns(result1 datatypes.Virtual_DedicatedHost, result2 error) {
	fake.getDedicatedHostMutex.Lock()
	defer fake.getDedicatedHostMutex.Unlock()
	fake.GetDedicatedHostStub = nil
	fake.getDedicatedHostReturns = struct {
		result1 datatypes.Virtual_DedicatedHost
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetDedicatedHostReturnsOnCall(i int, result1 datatypes.Virtual_DedicatedHost, result2 error) {
	fake.getDedicatedHostMutex.Lock()
	defer fake.getDedicatedHostMutex.Unlock()
	fake.GetDedicatedHostStub = nil
	if fake.getDedicatedHostReturnsOnCall == nil {
		fake.getDedicatedHostReturnsOnCall = make(map[int]struct {
			result1 datatypes.Virtual_DedicatedHost
			result2 error
		})
	}
	fake.getDedicatedHostReturnsOnCall[i] = struct {
		result1 datatypes.Virtual_DedicatedHost
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetInstance(arg1 int, arg2 string) (datatypes.Virtual_Guest, error) {
	fake.getInstanceMutex.Lock()
	ret, specificReturn := fake.getInstanceReturnsOnCall[len(fake.getInstanceArgsForCall)]
	fake.getInstanceArgsForCall = append(fake.getInstanceArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.GetInstanceStub
	fakeReturns := fake.getInstanceReturns
	fake.recordInvocation("GetInstance", []interface{}{arg1, arg2})
	fake.getInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetInstanceCallCount() int {
	fake.getInstanceMutex.RLock()
	defer fake.getInstanceMutex.RUnlock()
	return len(fake.getInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) GetInstanceCalls(stub func(int, string) (datatypes.Virtual_Guest, error)) {
	fake.getInstanceMutex.Lock()
	defer fake.getInstanceMutex.Unlock()
	fake.GetInstanceStub = stub
}

func (fake *FakeVirtualServerManager) GetInstanceArgsForCall(i int) (int, string) {
	fake.getInstanceMutex.RLock()
	defer fake.getInstanceMutex.RUnlock()
	argsForCall := fake.getInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) GetInstanceReturns(result1 datatypes.Virtual_Guest, result2 error) {
	fake.getInstanceMutex.Lock()
	defer fake.getInstanceMutex.Unlock()
	fake.GetInstanceStub = nil
	fake.getInstanceReturns = struct {
		result1 datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetInstanceReturnsOnCall(i int, result1 datatypes.Virtual_Guest, result2 error) {
	fake.getInstanceMutex.Lock()
	defer fake.getInstanceMutex.Unlock()
	fake.GetInstanceStub = nil
	if fake.getInstanceReturnsOnCall == nil {
		fake.getInstanceReturnsOnCall = make(map[int]struct {
			result1 datatypes.Virtual_Guest
			result2 error
		})
	}
	fake.getInstanceReturnsOnCall[i] = struct {
		result1 datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetInstances(arg1 string, arg2 filter.Filters) ([]datatypes.Virtual_Guest, error) {
	fake.getInstancesMutex.Lock()
	ret, specificReturn := fake.getInstancesReturnsOnCall[len(fake.getInstancesArgsForCall)]
	fake.getInstancesArgsForCall = append(fake.getInstancesArgsForCall, struct {
		arg1 string
		arg2 filter.Filters
	}{arg1, arg2})
	stub := fake.GetInstancesStub
	fakeReturns := fake.getInstancesReturns
	fake.recordInvocation("GetInstances", []interface{}{arg1, arg2})
	fake.getInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetInstancesCallCount() int {
	fake.getInstancesMutex.RLock()
	defer fake.getInstancesMutex.RUnlock()
	return len(fake.getInstancesArgsForCall)
}

func (fake *FakeVirtualServerManager) GetInstancesCalls(stub func(string, filter.Filters) ([]datatypes.Virtual_Guest, error)) {
	fake.getInstancesMutex.Lock()
	defer fake.getInstancesMutex.Unlock()
	fake.GetInstancesStub = stub
}

func (fake *FakeVirtualServerManager) GetInstancesArgsForCall(i int) (string, filter.Filters) {
	fake.getInstancesMutex.RLock()
	defer fake.getInstancesMutex.RUnlock()
	argsForCall := fake.getInstancesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) GetInstancesReturns(result1 []datatypes.Virtual_Guest, result2 error) {
	fake.getInstancesMutex.Lock()
	defer fake.getInstancesMutex.Unlock()
	fake.GetInstancesStub = nil
	fake.getInstancesReturns = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetInstancesReturnsOnCall(i int, result1 []datatypes.Virtual_Guest, result2 error) {
	fake.getInstancesMutex.Lock()
	defer fake.getInstancesMutex.Unlock()
	fake.GetInstancesStub = nil
	if fake.getInstancesReturnsOnCall == nil {
		fake.getInstancesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_Guest
			result2 error
		})
	}
	fake.getInstancesReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetLikedInstance(arg1 *datatypes.Virtual_Guest, arg2 int) (*datatypes.Virtual_Guest, error) {
	fake.getLikedInstanceMutex.Lock()
	ret, specificReturn := fake.getLikedInstanceReturnsOnCall[len(fake.getLikedInstanceArgsForCall)]
	fake.getLikedInstanceArgsForCall = append(fake.getLikedInstanceArgsForCall, struct {
		arg1 *datatypes.Virtual_Guest
		arg2 int
	}{arg1, arg2})
	stub := fake.GetLikedInstanceStub
	fakeReturns := fake.getLikedInstanceReturns
	fake.recordInvocation("GetLikedInstance", []interface{}{arg1, arg2})
	fake.getLikedInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetLikedInstanceCallCount() int {
	fake.getLikedInstanceMutex.RLock()
	defer fake.getLikedInstanceMutex.RUnlock()
	return len(fake.getLikedInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) GetLikedInstanceCalls(stub func(*datatypes.Virtual_Guest, int) (*datatypes.Virtual_Guest, error)) {
	fake.getLikedInstanceMutex.Lock()
	defer fake.getLikedInstanceMutex.Unlock()
	fake.GetLikedInstanceStub = stub
}

func (fake *FakeVirtualServerManager) GetLikedInstanceArgsForCall(i int) (*datatypes.Virtual_Guest, int) {
	fake.getLikedInstanceMutex.RLock()
	defer fake.getLikedInstanceMutex.RUnlock()
	argsForCall := fake.getLikedInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) GetLikedInstanceReturns(result1 *datatypes.Virtual_Guest, result2 error) {
	fake.getLikedInstanceMutex.Lock()
	defer fake.getLikedInstanceMutex.Unlock()
	fake.GetLikedInstanceStub = nil
	fake.getLikedInstanceReturns = struct {
		result1 *datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetLikedInstanceReturnsOnCall(i int, result1 *datatypes.Virtual_Guest, result2 error) {
	fake.getLikedInstanceMutex.Lock()
	defer fake.getLikedInstanceMutex.Unlock()
	fake.GetLikedInstanceStub = nil
	if fake.getLikedInstanceReturnsOnCall == nil {
		fake.getLikedInstanceReturnsOnCall = make(map[int]struct {
			result1 *datatypes.Virtual_Guest
			result2 error
		})
	}
	fake.getLikedInstanceReturnsOnCall[i] = struct {
		result1 *datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetLocalDisks(arg1 int) ([]datatypes.Virtual_Guest_Block_Device, error) {
	fake.getLocalDisksMutex.Lock()
	ret, specificReturn := fake.getLocalDisksReturnsOnCall[len(fake.getLocalDisksArgsForCall)]
	fake.getLocalDisksArgsForCall = append(fake.getLocalDisksArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetLocalDisksStub
	fakeReturns := fake.getLocalDisksReturns
	fake.recordInvocation("GetLocalDisks", []interface{}{arg1})
	fake.getLocalDisksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetLocalDisksCallCount() int {
	fake.getLocalDisksMutex.RLock()
	defer fake.getLocalDisksMutex.RUnlock()
	return len(fake.getLocalDisksArgsForCall)
}

func (fake *FakeVirtualServerManager) GetLocalDisksCalls(stub func(int) ([]datatypes.Virtual_Guest_Block_Device, error)) {
	fake.getLocalDisksMutex.Lock()
	defer fake.getLocalDisksMutex.Unlock()
	fake.GetLocalDisksStub = stub
}

func (fake *FakeVirtualServerManager) GetLocalDisksArgsForCall(i int) int {
	fake.getLocalDisksMutex.RLock()
	defer fake.getLocalDisksMutex.RUnlock()
	argsForCall := fake.getLocalDisksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) GetLocalDisksReturns(result1 []datatypes.Virtual_Guest_Block_Device, result2 error) {
	fake.getLocalDisksMutex.Lock()
	defer fake.getLocalDisksMutex.Unlock()
	fake.GetLocalDisksStub = nil
	fake.getLocalDisksReturns = struct {
		result1 []datatypes.Virtual_Guest_Block_Device
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetLocalDisksReturnsOnCall(i int, result1 []datatypes.Virtual_Guest_Block_Device, result2 error) {
	fake.getLocalDisksMutex.Lock()
	defer fake.getLocalDisksMutex.Unlock()
	fake.GetLocalDisksStub = nil
	if fake.getLocalDisksReturnsOnCall == nil {
		fake.getLocalDisksReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_Guest_Block_Device
			result2 error
		})
	}
	fake.getLocalDisksReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_Guest_Block_Device
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetPlacementGroupDetail(arg1 int) (datatypes.Virtual_PlacementGroup, error) {
	fake.getPlacementGroupDetailMutex.Lock()
	ret, specificReturn := fake.getPlacementGroupDetailReturnsOnCall[len(fake.getPlacementGroupDetailArgsForCall)]
	fake.getPlacementGroupDetailArgsForCall = append(fake.getPlacementGroupDetailArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetPlacementGroupDetailStub
	fakeReturns := fake.getPlacementGroupDetailReturns
	fake.recordInvocation("GetPlacementGroupDetail", []interface{}{arg1})
	fake.getPlacementGroupDetailMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetPlacementGroupDetailCallCount() int {
	fake.getPlacementGroupDetailMutex.RLock()
	defer fake.getPlacementGroupDetailMutex.RUnlock()
	return len(fake.getPlacementGroupDetailArgsForCall)
}

func (fake *FakeVirtualServerManager) GetPlacementGroupDetailCalls(stub func(int) (datatypes.Virtual_PlacementGroup, error)) {
	fake.getPlacementGroupDetailMutex.Lock()
	defer fake.getPlacementGroupDetailMutex.Unlock()
	fake.GetPlacementGroupDetailStub = stub
}

func (fake *FakeVirtualServerManager) GetPlacementGroupDetailArgsForCall(i int) int {
	fake.getPlacementGroupDetailMutex.RLock()
	defer fake.getPlacementGroupDetailMutex.RUnlock()
	argsForCall := fake.getPlacementGroupDetailArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) GetPlacementGroupDetailReturns(result1 datatypes.Virtual_PlacementGroup, result2 error) {
	fake.getPlacementGroupDetailMutex.Lock()
	defer fake.getPlacementGroupDetailMutex.Unlock()
	fake.GetPlacementGroupDetailStub = nil
	fake.getPlacementGroupDetailReturns = struct {
		result1 datatypes.Virtual_PlacementGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetPlacementGroupDetailReturnsOnCall(i int, result1 datatypes.Virtual_PlacementGroup, result2 error) {
	fake.getPlacementGroupDetailMutex.Lock()
	defer fake.getPlacementGroupDetailMutex.Unlock()
	fake.GetPlacementGroupDetailStub = nil
	if fake.getPlacementGroupDetailReturnsOnCall == nil {
		fake.getPlacementGroupDetailReturnsOnCall = make(map[int]struct {
			result1 datatypes.Virtual_PlacementGroup
			result2 error
		})
	}
	fake.getPlacementGroupDetailReturnsOnCall[i] = struct {
		result1 datatypes.Virtual_PlacementGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetPods() ([]datatypes.Network_Pod, error) {
	fake.getPodsMutex.Lock()
	ret, specificReturn := fake.getPodsReturnsOnCall[len(fake.getPodsArgsForCall)]
	fake.getPodsArgsForCall = append(fake.getPodsArgsForCall, struct {
	}{})
	stub := fake.GetPodsStub
	fakeReturns := fake.getPodsReturns
	fake.recordInvocation("GetPods", []interface{}{})
	fake.getPodsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetPodsCallCount() int {
	fake.getPodsMutex.RLock()
	defer fake.getPodsMutex.RUnlock()
	return len(fake.getPodsArgsForCall)
}

func (fake *FakeVirtualServerManager) GetPodsCalls(stub func() ([]datatypes.Network_Pod, error)) {
	fake.getPodsMutex.Lock()
	defer fake.getPodsMutex.Unlock()
	fake.GetPodsStub = stub
}

func (fake *FakeVirtualServerManager) GetPodsReturns(result1 []datatypes.Network_Pod, result2 error) {
	fake.getPodsMutex.Lock()
	defer fake.getPodsMutex.Unlock()
	fake.GetPodsStub = nil
	fake.getPodsReturns = struct {
		result1 []datatypes.Network_Pod
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetPodsReturnsOnCall(i int, result1 []datatypes.Network_Pod, result2 error) {
	fake.getPodsMutex.Lock()
	defer fake.getPodsMutex.Unlock()
	fake.GetPodsStub = nil
	if fake.getPodsReturnsOnCall == nil {
		fake.getPodsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Pod
			result2 error
		})
	}
	fake.getPodsReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Pod
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetPortableStorage(arg1 int) ([]datatypes.Virtual_Disk_Image, error) {
	fake.getPortableStorageMutex.Lock()
	ret, specificReturn := fake.getPortableStorageReturnsOnCall[len(fake.getPortableStorageArgsForCall)]
	fake.getPortableStorageArgsForCall = append(fake.getPortableStorageArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetPortableStorageStub
	fakeReturns := fake.getPortableStorageReturns
	fake.recordInvocation("GetPortableStorage", []interface{}{arg1})
	fake.getPortableStorageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetPortableStorageCallCount() int {
	fake.getPortableStorageMutex.RLock()
	defer fake.getPortableStorageMutex.RUnlock()
	return len(fake.getPortableStorageArgsForCall)
}

func (fake *FakeVirtualServerManager) GetPortableStorageCalls(stub func(int) ([]datatypes.Virtual_Disk_Image, error)) {
	fake.getPortableStorageMutex.Lock()
	defer fake.getPortableStorageMutex.Unlock()
	fake.GetPortableStorageStub = stub
}

func (fake *FakeVirtualServerManager) GetPortableStorageArgsForCall(i int) int {
	fake.getPortableStorageMutex.RLock()
	defer fake.getPortableStorageMutex.RUnlock()
	argsForCall := fake.getPortableStorageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) GetPortableStorageReturns(result1 []datatypes.Virtual_Disk_Image, result2 error) {
	fake.getPortableStorageMutex.Lock()
	defer fake.getPortableStorageMutex.Unlock()
	fake.GetPortableStorageStub = nil
	fake.getPortableStorageReturns = struct {
		result1 []datatypes.Virtual_Disk_Image
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetPortableStorageReturnsOnCall(i int, result1 []datatypes.Virtual_Disk_Image, result2 error) {
	fake.getPortableStorageMutex.Lock()
	defer fake.getPortableStorageMutex.Unlock()
	fake.GetPortableStorageStub = nil
	if fake.getPortableStorageReturnsOnCall == nil {
		fake.getPortableStorageReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_Disk_Image
			result2 error
		})
	}
	fake.getPortableStorageReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_Disk_Image
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetRouters(arg1 string) ([]datatypes.Location_Region, error) {
	fake.getRoutersMutex.Lock()
	ret, specificReturn := fake.getRoutersReturnsOnCall[len(fake.getRoutersArgsForCall)]
	fake.getRoutersArgsForCall = append(fake.getRoutersArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetRoutersStub
	fakeReturns := fake.getRoutersReturns
	fake.recordInvocation("GetRouters", []interface{}{arg1})
	fake.getRoutersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetRoutersCallCount() int {
	fake.getRoutersMutex.RLock()
	defer fake.getRoutersMutex.RUnlock()
	return len(fake.getRoutersArgsForCall)
}

func (fake *FakeVirtualServerManager) GetRoutersCalls(stub func(string) ([]datatypes.Location_Region, error)) {
	fake.getRoutersMutex.Lock()
	defer fake.getRoutersMutex.Unlock()
	fake.GetRoutersStub = stub
}

func (fake *FakeVirtualServerManager) GetRoutersArgsForCall(i int) string {
	fake.getRoutersMutex.RLock()
	defer fake.getRoutersMutex.RUnlock()
	argsForCall := fake.getRoutersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) GetRoutersReturns(result1 []datatypes.Location_Region, result2 error) {
	fake.getRoutersMutex.Lock()
	defer fake.getRoutersMutex.Unlock()
	fake.GetRoutersStub = nil
	fake.getRoutersReturns = struct {
		result1 []datatypes.Location_Region
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetRoutersReturnsOnCall(i int, result1 []datatypes.Location_Region, result2 error) {
	fake.getRoutersMutex.Lock()
	defer fake.getRoutersMutex.Unlock()
	fake.GetRoutersStub = nil
	if fake.getRoutersReturnsOnCall == nil {
		fake.getRoutersReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Location_Region
			result2 error
		})
	}
	fake.getRoutersReturnsOnCall[i] = struct {
		result1 []datatypes.Location_Region
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetRules() ([]datatypes.Virtual_PlacementGroup_Rule, error) {
	fake.getRulesMutex.Lock()
	ret, specificReturn := fake.getRulesReturnsOnCall[len(fake.getRulesArgsForCall)]
	fake.getRulesArgsForCall = append(fake.getRulesArgsForCall, struct {
	}{})
	stub := fake.GetRulesStub
	fakeReturns := fake.getRulesReturns
	fake.recordInvocation("GetRules", []interface{}{})
	fake.getRulesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetRulesCallCount() int {
	fake.getRulesMutex.RLock()
	defer fake.getRulesMutex.RUnlock()
	return len(fake.getRulesArgsForCall)
}

func (fake *FakeVirtualServerManager) GetRulesCalls(stub func() ([]datatypes.Virtual_PlacementGroup_Rule, error)) {
	fake.getRulesMutex.Lock()
	defer fake.getRulesMutex.Unlock()
	fake.GetRulesStub = stub
}

func (fake *FakeVirtualServerManager) GetRulesReturns(result1 []datatypes.Virtual_PlacementGroup_Rule, result2 error) {
	fake.getRulesMutex.Lock()
	defer fake.getRulesMutex.Unlock()
	fake.GetRulesStub = nil
	fake.getRulesReturns = struct {
		result1 []datatypes.Virtual_PlacementGroup_Rule
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetRulesReturnsOnCall(i int, result1 []datatypes.Virtual_PlacementGroup_Rule, result2 error) {
	fake.getRulesMutex.Lock()
	defer fake.getRulesMutex.Unlock()
	fake.GetRulesStub = nil
	if fake.getRulesReturnsOnCall == nil {
		fake.getRulesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_PlacementGroup_Rule
			result2 error
		})
	}
	fake.getRulesReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_PlacementGroup_Rule
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetStorageCredentials(arg1 int) (datatypes.Network_Storage_Allowed_Host, error) {
	fake.getStorageCredentialsMutex.Lock()
	ret, specificReturn := fake.getStorageCredentialsReturnsOnCall[len(fake.getStorageCredentialsArgsForCall)]
	fake.getStorageCredentialsArgsForCall = append(fake.getStorageCredentialsArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetStorageCredentialsStub
	fakeReturns := fake.getStorageCredentialsReturns
	fake.recordInvocation("GetStorageCredentials", []interface{}{arg1})
	fake.getStorageCredentialsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetStorageCredentialsCallCount() int {
	fake.getStorageCredentialsMutex.RLock()
	defer fake.getStorageCredentialsMutex.RUnlock()
	return len(fake.getStorageCredentialsArgsForCall)
}

func (fake *FakeVirtualServerManager) GetStorageCredentialsCalls(stub func(int) (datatypes.Network_Storage_Allowed_Host, error)) {
	fake.getStorageCredentialsMutex.Lock()
	defer fake.getStorageCredentialsMutex.Unlock()
	fake.GetStorageCredentialsStub = stub
}

func (fake *FakeVirtualServerManager) GetStorageCredentialsArgsForCall(i int) int {
	fake.getStorageCredentialsMutex.RLock()
	defer fake.getStorageCredentialsMutex.RUnlock()
	argsForCall := fake.getStorageCredentialsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) GetStorageCredentialsReturns(result1 datatypes.Network_Storage_Allowed_Host, result2 error) {
	fake.getStorageCredentialsMutex.Lock()
	defer fake.getStorageCredentialsMutex.Unlock()
	fake.GetStorageCredentialsStub = nil
	fake.getStorageCredentialsReturns = struct {
		result1 datatypes.Network_Storage_Allowed_Host
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetStorageCredentialsReturnsOnCall(i int, result1 datatypes.Network_Storage_Allowed_Host, result2 error) {
	fake.getStorageCredentialsMutex.Lock()
	defer fake.getStorageCredentialsMutex.Unlock()
	fake.GetStorageCredentialsStub = nil
	if fake.getStorageCredentialsReturnsOnCall == nil {
		fake.getStorageCredentialsReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Storage_Allowed_Host
			result2 error
		})
	}
	fake.getStorageCredentialsReturnsOnCall[i] = struct {
		result1 datatypes.Network_Storage_Allowed_Host
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetStorageDetails(arg1 int, arg2 string) ([]datatypes.Network_Storage, error) {
	fake.getStorageDetailsMutex.Lock()
	ret, specificReturn := fake.getStorageDetailsReturnsOnCall[len(fake.getStorageDetailsArgsForCall)]
	fake.getStorageDetailsArgsForCall = append(fake.getStorageDetailsArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStorageDetailsStub
	fakeReturns := fake.getStorageDetailsReturns
	fake.recordInvocation("GetStorageDetails", []interface{}{arg1, arg2})
	fake.getStorageDetailsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetStorageDetailsCallCount() int {
	fake.getStorageDetailsMutex.RLock()
	defer fake.getStorageDetailsMutex.RUnlock()
	return len(fake.getStorageDetailsArgsForCall)
}

func (fake *FakeVirtualServerManager) GetStorageDetailsCalls(stub func(int, string) ([]datatypes.Network_Storage, error)) {
	fake.getStorageDetailsMutex.Lock()
	defer fake.getStorageDetailsMutex.Unlock()
	fake.GetStorageDetailsStub = stub
}

func (fake *FakeVirtualServerManager) GetStorageDetailsArgsForCall(i int) (int, string) {
	fake.getStorageDetailsMutex.RLock()
	defer fake.getStorageDetailsMutex.RUnlock()
	argsForCall := fake.getStorageDetailsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) GetStorageDetailsReturns(result1 []datatypes.Network_Storage, result2 error) {
	fake.getStorageDetailsMutex.Lock()
	defer fake.getStorageDetailsMutex.Unlock()
	fake.GetStorageDetailsStub = nil
	fake.getStorageDetailsReturns = struct {
		result1 []datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetStorageDetailsReturnsOnCall(i int, result1 []datatypes.Network_Storage, result2 error) {
	fake.getStorageDetailsMutex.Lock()
	defer fake.getStorageDetailsMutex.Unlock()
	fake.GetStorageDetailsStub = nil
	if fake.getStorageDetailsReturnsOnCall == nil {
		fake.getStorageDetailsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Storage
			result2 error
		})
	}
	fake.getStorageDetailsReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Storage
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetSummaryUsage(arg1 int, arg2 time.Time, arg3 time.Time, arg4 string, arg5 int) ([]datatypes.Metric_Tracking_Object_Data, error) {
	fake.getSummaryUsageMutex.Lock()
	ret, specificReturn := fake.getSummaryUsageReturnsOnCall[len(fake.getSummaryUsageArgsForCall)]
	fake.getSummaryUsageArgsForCall = append(fake.getSummaryUsageArgsForCall, struct {
		arg1 int
		arg2 time.Time
		arg3 time.Time
		arg4 string
		arg5 int
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GetSummaryUsageStub
	fakeReturns := fake.getSummaryUsageReturns
	fake.recordInvocation("GetSummaryUsage", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getSummaryUsageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetSummaryUsageCallCount() int {
	fake.getSummaryUsageMutex.RLock()
	defer fake.getSummaryUsageMutex.RUnlock()
	return len(fake.getSummaryUsageArgsForCall)
}

func (fake *FakeVirtualServerManager) GetSummaryUsageCalls(stub func(int, time.Time, time.Time, string, int) ([]datatypes.Metric_Tracking_Object_Data, error)) {
	fake.getSummaryUsageMutex.Lock()
	defer fake.getSummaryUsageMutex.Unlock()
	fake.GetSummaryUsageStub = stub
}

func (fake *FakeVirtualServerManager) GetSummaryUsageArgsForCall(i int) (int, time.Time, time.Time, string, int) {
	fake.getSummaryUsageMutex.RLock()
	defer fake.getSummaryUsageMutex.RUnlock()
	argsForCall := fake.getSummaryUsageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeVirtualServerManager) GetSummaryUsageReturns(result1 []datatypes.Metric_Tracking_Object_Data, result2 error) {
	fake.getSummaryUsageMutex.Lock()
	defer fake.getSummaryUsageMutex.Unlock()
	fake.GetSummaryUsageStub = nil
	fake.getSummaryUsageReturns = struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetSummaryUsageReturnsOnCall(i int, result1 []datatypes.Metric_Tracking_Object_Data, result2 error) {
	fake.getSummaryUsageMutex.Lock()
	defer fake.getSummaryUsageMutex.Unlock()
	fake.GetSummaryUsageStub = nil
	if fake.getSummaryUsageReturnsOnCall == nil {
		fake.getSummaryUsageReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Metric_Tracking_Object_Data
			result2 error
		})
	}
	fake.getSummaryUsageReturnsOnCall[i] = struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetUserCustomerNotificationsByVirtualGuestId(arg1 int, arg2 string) ([]datatypes.User_Customer_Notification_Virtual_Guest, error) {
	fake.getUserCustomerNotificationsByVirtualGuestIdMutex.Lock()
	ret, specificReturn := fake.getUserCustomerNotificationsByVirtualGuestIdReturnsOnCall[len(fake.getUserCustomerNotificationsByVirtualGuestIdArgsForCall)]
	fake.getUserCustomerNotificationsByVirtualGuestIdArgsForCall = append(fake.getUserCustomerNotificationsByVirtualGuestIdArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserCustomerNotificationsByVirtualGuestIdStub
	fakeReturns := fake.getUserCustomerNotificationsByVirtualGuestIdReturns
	fake.recordInvocation("GetUserCustomerNotificationsByVirtualGuestId", []interface{}{arg1, arg2})
	fake.getUserCustomerNotificationsByVirtualGuestIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) GetUserCustomerNotificationsByVirtualGuestIdCallCount() int {
	fake.getUserCustomerNotificationsByVirtualGuestIdMutex.RLock()
	defer fake.getUserCustomerNotificationsByVirtualGuestIdMutex.RUnlock()
	return len(fake.getUserCustomerNotificationsByVirtualGuestIdArgsForCall)
}

func (fake *FakeVirtualServerManager) GetUserCustomerNotificationsByVirtualGuestIdCalls(stub func(int, string) ([]datatypes.User_Customer_Notification_Virtual_Guest, error)) {
	fake.getUserCustomerNotificationsByVirtualGuestIdMutex.Lock()
	defer fake.getUserCustomerNotificationsByVirtualGuestIdMutex.Unlock()
	fake.GetUserCustomerNotificationsByVirtualGuestIdStub = stub
}

func (fake *FakeVirtualServerManager) GetUserCustomerNotificationsByVirtualGuestIdArgsForCall(i int) (int, string) {
	fake.getUserCustomerNotificationsByVirtualGuestIdMutex.RLock()
	defer fake.getUserCustomerNotificationsByVirtualGuestIdMutex.RUnlock()
	argsForCall := fake.getUserCustomerNotificationsByVirtualGuestIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) GetUserCustomerNotificationsByVirtualGuestIdReturns(result1 []datatypes.User_Customer_Notification_Virtual_Guest, result2 error) {
	fake.getUserCustomerNotificationsByVirtualGuestIdMutex.Lock()
	defer fake.getUserCustomerNotificationsByVirtualGuestIdMutex.Unlock()
	fake.GetUserCustomerNotificationsByVirtualGuestIdStub = nil
	fake.getUserCustomerNotificationsByVirtualGuestIdReturns = struct {
		result1 []datatypes.User_Customer_Notification_Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) GetUserCustomerNotificationsByVirtualGuestIdReturnsOnCall(i int, result1 []datatypes.User_Customer_Notification_Virtual_Guest, result2 error) {
	fake.getUserCustomerNotificationsByVirtualGuestIdMutex.Lock()
	defer fake.getUserCustomerNotificationsByVirtualGuestIdMutex.Unlock()
	fake.GetUserCustomerNotificationsByVirtualGuestIdStub = nil
	if fake.getUserCustomerNotificationsByVirtualGuestIdReturnsOnCall == nil {
		fake.getUserCustomerNotificationsByVirtualGuestIdReturnsOnCall = make(map[int]struct {
			result1 []datatypes.User_Customer_Notification_Virtual_Guest
			result2 error
		})
	}
	fake.getUserCustomerNotificationsByVirtualGuestIdReturnsOnCall[i] = struct {
		result1 []datatypes.User_Customer_Notification_Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) InstanceIsReady(arg1 int, arg2 time.Time) (bool, string, error) {
	fake.instanceIsReadyMutex.Lock()
	ret, specificReturn := fake.instanceIsReadyReturnsOnCall[len(fake.instanceIsReadyArgsForCall)]
	fake.instanceIsReadyArgsForCall = append(fake.instanceIsReadyArgsForCall, struct {
		arg1 int
		arg2 time.Time
	}{arg1, arg2})
	stub := fake.InstanceIsReadyStub
	fakeReturns := fake.instanceIsReadyReturns
	fake.recordInvocation("InstanceIsReady", []interface{}{arg1, arg2})
	fake.instanceIsReadyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeVirtualServerManager) InstanceIsReadyCallCount() int {
	fake.instanceIsReadyMutex.RLock()
	defer fake.instanceIsReadyMutex.RUnlock()
	return len(fake.instanceIsReadyArgsForCall)
}

func (fake *FakeVirtualServerManager) InstanceIsReadyCalls(stub func(int, time.Time) (bool, string, error)) {
	fake.instanceIsReadyMutex.Lock()
	defer fake.instanceIsReadyMutex.Unlock()
	fake.InstanceIsReadyStub = stub
}

func (fake *FakeVirtualServerManager) InstanceIsReadyArgsForCall(i int) (int, time.Time) {
	fake.instanceIsReadyMutex.RLock()
	defer fake.instanceIsReadyMutex.RUnlock()
	argsForCall := fake.instanceIsReadyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) InstanceIsReadyReturns(result1 bool, result2 string, result3 error) {
	fake.instanceIsReadyMutex.Lock()
	defer fake.instanceIsReadyMutex.Unlock()
	fake.InstanceIsReadyStub = nil
	fake.instanceIsReadyReturns = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualServerManager) InstanceIsReadyReturnsOnCall(i int, result1 bool, result2 string, result3 error) {
	fake.instanceIsReadyMutex.Lock()
	defer fake.instanceIsReadyMutex.Unlock()
	fake.InstanceIsReadyStub = nil
	if fake.instanceIsReadyReturnsOnCall == nil {
		fake.instanceIsReadyReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 string
			result3 error
		})
	}
	fake.instanceIsReadyReturnsOnCall[i] = struct {
		result1 bool
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVirtualServerManager) ListInstances(arg1 bool, arg2 bool, arg3 string, arg4 string, arg5 string, arg6 string, arg7 string, arg8 string, arg9 int, arg10 int, arg11 int, arg12 int, arg13 []string, arg14 string) ([]datatypes.Virtual_Guest, error) {
	var arg13Copy []string
	if arg13 != nil {
		arg13Copy = make([]string, len(arg13))
		copy(arg13Copy, arg13)
	}
	fake.listInstancesMutex.Lock()
	ret, specificReturn := fake.listInstancesReturnsOnCall[len(fake.listInstancesArgsForCall)]
	fake.listInstancesArgsForCall = append(fake.listInstancesArgsForCall, struct {
		arg1  bool
		arg2  bool
		arg3  string
		arg4  string
		arg5  string
		arg6  string
		arg7  string
		arg8  string
		arg9  int
		arg10 int
		arg11 int
		arg12 int
		arg13 []string
		arg14 string
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13Copy, arg14})
	stub := fake.ListInstancesStub
	fakeReturns := fake.listInstancesReturns
	fake.recordInvocation("ListInstances", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13Copy, arg14})
	fake.listInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) ListInstancesCallCount() int {
	fake.listInstancesMutex.RLock()
	defer fake.listInstancesMutex.RUnlock()
	return len(fake.listInstancesArgsForCall)
}

func (fake *FakeVirtualServerManager) ListInstancesCalls(stub func(bool, bool, string, string, string, string, string, string, int, int, int, int, []string, string) ([]datatypes.Virtual_Guest, error)) {
	fake.listInstancesMutex.Lock()
	defer fake.listInstancesMutex.Unlock()
	fake.ListInstancesStub = stub
}

func (fake *FakeVirtualServerManager) ListInstancesArgsForCall(i int) (bool, bool, string, string, string, string, string, string, int, int, int, int, []string, string) {
	fake.listInstancesMutex.RLock()
	defer fake.listInstancesMutex.RUnlock()
	argsForCall := fake.listInstancesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8, argsForCall.arg9, argsForCall.arg10, argsForCall.arg11, argsForCall.arg12, argsForCall.arg13, argsForCall.arg14
}

func (fake *FakeVirtualServerManager) ListInstancesReturns(result1 []datatypes.Virtual_Guest, result2 error) {
	fake.listInstancesMutex.Lock()
	defer fake.listInstancesMutex.Unlock()
	fake.ListInstancesStub = nil
	fake.listInstancesReturns = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) ListInstancesReturnsOnCall(i int, result1 []datatypes.Virtual_Guest, result2 error) {
	fake.listInstancesMutex.Lock()
	defer fake.listInstancesMutex.Unlock()
	fake.ListInstancesStub = nil
	if fake.listInstancesReturnsOnCall == nil {
		fake.listInstancesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_Guest
			result2 error
		})
	}
	fake.listInstancesReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) MigrateDedicatedHost(arg1 int, arg2 int) error {
	fake.migrateDedicatedHostMutex.Lock()
	ret, specificReturn := fake.migrateDedicatedHostReturnsOnCall[len(fake.migrateDedicatedHostArgsForCall)]
	fake.migrateDedicatedHostArgsForCall = append(fake.migrateDedicatedHostArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	stub := fake.MigrateDedicatedHostStub
	fakeReturns := fake.migrateDedicatedHostReturns
	fake.recordInvocation("MigrateDedicatedHost", []interface{}{arg1, arg2})
	fake.migrateDedicatedHostMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) MigrateDedicatedHostCallCount() int {
	fake.migrateDedicatedHostMutex.RLock()
	defer fake.migrateDedicatedHostMutex.RUnlock()
	return len(fake.migrateDedicatedHostArgsForCall)
}

func (fake *FakeVirtualServerManager) MigrateDedicatedHostCalls(stub func(int, int) error) {
	fake.migrateDedicatedHostMutex.Lock()
	defer fake.migrateDedicatedHostMutex.Unlock()
	fake.MigrateDedicatedHostStub = stub
}

func (fake *FakeVirtualServerManager) MigrateDedicatedHostArgsForCall(i int) (int, int) {
	fake.migrateDedicatedHostMutex.RLock()
	defer fake.migrateDedicatedHostMutex.RUnlock()
	argsForCall := fake.migrateDedicatedHostArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) MigrateDedicatedHostReturns(result1 error) {
	fake.migrateDedicatedHostMutex.Lock()
	defer fake.migrateDedicatedHostMutex.Unlock()
	fake.MigrateDedicatedHostStub = nil
	fake.migrateDedicatedHostReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) MigrateDedicatedHostReturnsOnCall(i int, result1 error) {
	fake.migrateDedicatedHostMutex.Lock()
	defer fake.migrateDedicatedHostMutex.Unlock()
	fake.MigrateDedicatedHostStub = nil
	if fake.migrateDedicatedHostReturnsOnCall == nil {
		fake.migrateDedicatedHostReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.migrateDedicatedHostReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) MigrateInstance(arg1 int) (datatypes.Provisioning_Version1_Transaction, error) {
	fake.migrateInstanceMutex.Lock()
	ret, specificReturn := fake.migrateInstanceReturnsOnCall[len(fake.migrateInstanceArgsForCall)]
	fake.migrateInstanceArgsForCall = append(fake.migrateInstanceArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.MigrateInstanceStub
	fakeReturns := fake.migrateInstanceReturns
	fake.recordInvocation("MigrateInstance", []interface{}{arg1})
	fake.migrateInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) MigrateInstanceCallCount() int {
	fake.migrateInstanceMutex.RLock()
	defer fake.migrateInstanceMutex.RUnlock()
	return len(fake.migrateInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) MigrateInstanceCalls(stub func(int) (datatypes.Provisioning_Version1_Transaction, error)) {
	fake.migrateInstanceMutex.Lock()
	defer fake.migrateInstanceMutex.Unlock()
	fake.MigrateInstanceStub = stub
}

func (fake *FakeVirtualServerManager) MigrateInstanceArgsForCall(i int) int {
	fake.migrateInstanceMutex.RLock()
	defer fake.migrateInstanceMutex.RUnlock()
	argsForCall := fake.migrateInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) MigrateInstanceReturns(result1 datatypes.Provisioning_Version1_Transaction, result2 error) {
	fake.migrateInstanceMutex.Lock()
	defer fake.migrateInstanceMutex.Unlock()
	fake.MigrateInstanceStub = nil
	fake.migrateInstanceReturns = struct {
		result1 datatypes.Provisioning_Version1_Transaction
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) MigrateInstanceReturnsOnCall(i int, result1 datatypes.Provisioning_Version1_Transaction, result2 error) {
	fake.migrateInstanceMutex.Lock()
	defer fake.migrateInstanceMutex.Unlock()
	fake.MigrateInstanceStub = nil
	if fake.migrateInstanceReturnsOnCall == nil {
		fake.migrateInstanceReturnsOnCall = make(map[int]struct {
			result1 datatypes.Provisioning_Version1_Transaction
			result2 error
		})
	}
	fake.migrateInstanceReturnsOnCall[i] = struct {
		result1 datatypes.Provisioning_Version1_Transaction
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) PauseInstance(arg1 int) error {
	fake.pauseInstanceMutex.Lock()
	ret, specificReturn := fake.pauseInstanceReturnsOnCall[len(fake.pauseInstanceArgsForCall)]
	fake.pauseInstanceArgsForCall = append(fake.pauseInstanceArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.PauseInstanceStub
	fakeReturns := fake.pauseInstanceReturns
	fake.recordInvocation("PauseInstance", []interface{}{arg1})
	fake.pauseInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) PauseInstanceCallCount() int {
	fake.pauseInstanceMutex.RLock()
	defer fake.pauseInstanceMutex.RUnlock()
	return len(fake.pauseInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) PauseInstanceCalls(stub func(int) error) {
	fake.pauseInstanceMutex.Lock()
	defer fake.pauseInstanceMutex.Unlock()
	fake.PauseInstanceStub = stub
}

func (fake *FakeVirtualServerManager) PauseInstanceArgsForCall(i int) int {
	fake.pauseInstanceMutex.RLock()
	defer fake.pauseInstanceMutex.RUnlock()
	argsForCall := fake.pauseInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) PauseInstanceReturns(result1 error) {
	fake.pauseInstanceMutex.Lock()
	defer fake.pauseInstanceMutex.Unlock()
	fake.PauseInstanceStub = nil
	fake.pauseInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) PauseInstanceReturnsOnCall(i int, result1 error) {
	fake.pauseInstanceMutex.Lock()
	defer fake.pauseInstanceMutex.Unlock()
	fake.PauseInstanceStub = nil
	if fake.pauseInstanceReturnsOnCall == nil {
		fake.pauseInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pauseInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) PlacementCreate(arg1 *datatypes.Virtual_PlacementGroup) (datatypes.Virtual_PlacementGroup, error) {
	fake.placementCreateMutex.Lock()
	ret, specificReturn := fake.placementCreateReturnsOnCall[len(fake.placementCreateArgsForCall)]
	fake.placementCreateArgsForCall = append(fake.placementCreateArgsForCall, struct {
		arg1 *datatypes.Virtual_PlacementGroup
	}{arg1})
	stub := fake.PlacementCreateStub
	fakeReturns := fake.placementCreateReturns
	fake.recordInvocation("PlacementCreate", []interface{}{arg1})
	fake.placementCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) PlacementCreateCallCount() int {
	fake.placementCreateMutex.RLock()
	defer fake.placementCreateMutex.RUnlock()
	return len(fake.placementCreateArgsForCall)
}

func (fake *FakeVirtualServerManager) PlacementCreateCalls(stub func(*datatypes.Virtual_PlacementGroup) (datatypes.Virtual_PlacementGroup, error)) {
	fake.placementCreateMutex.Lock()
	defer fake.placementCreateMutex.Unlock()
	fake.PlacementCreateStub = stub
}

func (fake *FakeVirtualServerManager) PlacementCreateArgsForCall(i int) *datatypes.Virtual_PlacementGroup {
	fake.placementCreateMutex.RLock()
	defer fake.placementCreateMutex.RUnlock()
	argsForCall := fake.placementCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) PlacementCreateReturns(result1 datatypes.Virtual_PlacementGroup, result2 error) {
	fake.placementCreateMutex.Lock()
	defer fake.placementCreateMutex.Unlock()
	fake.PlacementCreateStub = nil
	fake.placementCreateReturns = struct {
		result1 datatypes.Virtual_PlacementGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) PlacementCreateReturnsOnCall(i int, result1 datatypes.Virtual_PlacementGroup, result2 error) {
	fake.placementCreateMutex.Lock()
	defer fake.placementCreateMutex.Unlock()
	fake.PlacementCreateStub = nil
	if fake.placementCreateReturnsOnCall == nil {
		fake.placementCreateReturnsOnCall = make(map[int]struct {
			result1 datatypes.Virtual_PlacementGroup
			result2 error
		})
	}
	fake.placementCreateReturnsOnCall[i] = struct {
		result1 datatypes.Virtual_PlacementGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) PlacementsGroupList(arg1 string) ([]datatypes.Virtual_PlacementGroup, error) {
	fake.placementsGroupListMutex.Lock()
	ret, specificReturn := fake.placementsGroupListReturnsOnCall[len(fake.placementsGroupListArgsForCall)]
	fake.placementsGroupListArgsForCall = append(fake.placementsGroupListArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PlacementsGroupListStub
	fakeReturns := fake.placementsGroupListReturns
	fake.recordInvocation("PlacementsGroupList", []interface{}{arg1})
	fake.placementsGroupListMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) PlacementsGroupListCallCount() int {
	fake.placementsGroupListMutex.RLock()
	defer fake.placementsGroupListMutex.RUnlock()
	return len(fake.placementsGroupListArgsForCall)
}

func (fake *FakeVirtualServerManager) PlacementsGroupListCalls(stub func(string) ([]datatypes.Virtual_PlacementGroup, error)) {
	fake.placementsGroupListMutex.Lock()
	defer fake.placementsGroupListMutex.Unlock()
	fake.PlacementsGroupListStub = stub
}

func (fake *FakeVirtualServerManager) PlacementsGroupListArgsForCall(i int) string {
	fake.placementsGroupListMutex.RLock()
	defer fake.placementsGroupListMutex.RUnlock()
	argsForCall := fake.placementsGroupListArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) PlacementsGroupListReturns(result1 []datatypes.Virtual_PlacementGroup, result2 error) {
	fake.placementsGroupListMutex.Lock()
	defer fake.placementsGroupListMutex.Unlock()
	fake.PlacementsGroupListStub = nil
	fake.placementsGroupListReturns = struct {
		result1 []datatypes.Virtual_PlacementGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) PlacementsGroupListReturnsOnCall(i int, result1 []datatypes.Virtual_PlacementGroup, result2 error) {
	fake.placementsGroupListMutex.Lock()
	defer fake.placementsGroupListMutex.Unlock()
	fake.PlacementsGroupListStub = nil
	if fake.placementsGroupListReturnsOnCall == nil {
		fake.placementsGroupListReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_PlacementGroup
			result2 error
		})
	}
	fake.placementsGroupListReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_PlacementGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) PowerOffInstance(arg1 int, arg2 bool, arg3 bool) error {
	fake.powerOffInstanceMutex.Lock()
	ret, specificReturn := fake.powerOffInstanceReturnsOnCall[len(fake.powerOffInstanceArgsForCall)]
	fake.powerOffInstanceArgsForCall = append(fake.powerOffInstanceArgsForCall, struct {
		arg1 int
		arg2 bool
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.PowerOffInstanceStub
	fakeReturns := fake.powerOffInstanceReturns
	fake.recordInvocation("PowerOffInstance", []interface{}{arg1, arg2, arg3})
	fake.powerOffInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) PowerOffInstanceCallCount() int {
	fake.powerOffInstanceMutex.RLock()
	defer fake.powerOffInstanceMutex.RUnlock()
	return len(fake.powerOffInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) PowerOffInstanceCalls(stub func(int, bool, bool) error) {
	fake.powerOffInstanceMutex.Lock()
	defer fake.powerOffInstanceMutex.Unlock()
	fake.PowerOffInstanceStub = stub
}

func (fake *FakeVirtualServerManager) PowerOffInstanceArgsForCall(i int) (int, bool, bool) {
	fake.powerOffInstanceMutex.RLock()
	defer fake.powerOffInstanceMutex.RUnlock()
	argsForCall := fake.powerOffInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVirtualServerManager) PowerOffInstanceReturns(result1 error) {
	fake.powerOffInstanceMutex.Lock()
	defer fake.powerOffInstanceMutex.Unlock()
	fake.PowerOffInstanceStub = nil
	fake.powerOffInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) PowerOffInstanceReturnsOnCall(i int, result1 error) {
	fake.powerOffInstanceMutex.Lock()
	defer fake.powerOffInstanceMutex.Unlock()
	fake.PowerOffInstanceStub = nil
	if fake.powerOffInstanceReturnsOnCall == nil {
		fake.powerOffInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.powerOffInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) PowerOnInstance(arg1 int) error {
	fake.powerOnInstanceMutex.Lock()
	ret, specificReturn := fake.powerOnInstanceReturnsOnCall[len(fake.powerOnInstanceArgsForCall)]
	fake.powerOnInstanceArgsForCall = append(fake.powerOnInstanceArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.PowerOnInstanceStub
	fakeReturns := fake.powerOnInstanceReturns
	fake.recordInvocation("PowerOnInstance", []interface{}{arg1})
	fake.powerOnInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) PowerOnInstanceCallCount() int {
	fake.powerOnInstanceMutex.RLock()
	defer fake.powerOnInstanceMutex.RUnlock()
	return len(fake.powerOnInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) PowerOnInstanceCalls(stub func(int) error) {
	fake.powerOnInstanceMutex.Lock()
	defer fake.powerOnInstanceMutex.Unlock()
	fake.PowerOnInstanceStub = stub
}

func (fake *FakeVirtualServerManager) PowerOnInstanceArgsForCall(i int) int {
	fake.powerOnInstanceMutex.RLock()
	defer fake.powerOnInstanceMutex.RUnlock()
	argsForCall := fake.powerOnInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) PowerOnInstanceReturns(result1 error) {
	fake.powerOnInstanceMutex.Lock()
	defer fake.powerOnInstanceMutex.Unlock()
	fake.PowerOnInstanceStub = nil
	fake.powerOnInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) PowerOnInstanceReturnsOnCall(i int, result1 error) {
	fake.powerOnInstanceMutex.Lock()
	defer fake.powerOnInstanceMutex.Unlock()
	fake.PowerOnInstanceStub = nil
	if fake.powerOnInstanceReturnsOnCall == nil {
		fake.powerOnInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.powerOnInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) RebootInstance(arg1 int, arg2 bool, arg3 bool) error {
	fake.rebootInstanceMutex.Lock()
	ret, specificReturn := fake.rebootInstanceReturnsOnCall[len(fake.rebootInstanceArgsForCall)]
	fake.rebootInstanceArgsForCall = append(fake.rebootInstanceArgsForCall, struct {
		arg1 int
		arg2 bool
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.RebootInstanceStub
	fakeReturns := fake.rebootInstanceReturns
	fake.recordInvocation("RebootInstance", []interface{}{arg1, arg2, arg3})
	fake.rebootInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) RebootInstanceCallCount() int {
	fake.rebootInstanceMutex.RLock()
	defer fake.rebootInstanceMutex.RUnlock()
	return len(fake.rebootInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) RebootInstanceCalls(stub func(int, bool, bool) error) {
	fake.rebootInstanceMutex.Lock()
	defer fake.rebootInstanceMutex.Unlock()
	fake.RebootInstanceStub = stub
}

func (fake *FakeVirtualServerManager) RebootInstanceArgsForCall(i int) (int, bool, bool) {
	fake.rebootInstanceMutex.RLock()
	defer fake.rebootInstanceMutex.RUnlock()
	argsForCall := fake.rebootInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVirtualServerManager) RebootInstanceReturns(result1 error) {
	fake.rebootInstanceMutex.Lock()
	defer fake.rebootInstanceMutex.Unlock()
	fake.RebootInstanceStub = nil
	fake.rebootInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) RebootInstanceReturnsOnCall(i int, result1 error) {
	fake.rebootInstanceMutex.Lock()
	defer fake.rebootInstanceMutex.Unlock()
	fake.RebootInstanceStub = nil
	if fake.rebootInstanceReturnsOnCall == nil {
		fake.rebootInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rebootInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) ReloadInstance(arg1 int, arg2 string, arg3 []int, arg4 int) error {
	var arg3Copy []int
	if arg3 != nil {
		arg3Copy = make([]int, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.reloadInstanceMutex.Lock()
	ret, specificReturn := fake.reloadInstanceReturnsOnCall[len(fake.reloadInstanceArgsForCall)]
	fake.reloadInstanceArgsForCall = append(fake.reloadInstanceArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 []int
		arg4 int
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.ReloadInstanceStub
	fakeReturns := fake.reloadInstanceReturns
	fake.recordInvocation("ReloadInstance", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.reloadInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) ReloadInstanceCallCount() int {
	fake.reloadInstanceMutex.RLock()
	defer fake.reloadInstanceMutex.RUnlock()
	return len(fake.reloadInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) ReloadInstanceCalls(stub func(int, string, []int, int) error) {
	fake.reloadInstanceMutex.Lock()
	defer fake.reloadInstanceMutex.Unlock()
	fake.ReloadInstanceStub = stub
}

func (fake *FakeVirtualServerManager) ReloadInstanceArgsForCall(i int) (int, string, []int, int) {
	fake.reloadInstanceMutex.RLock()
	defer fake.reloadInstanceMutex.RUnlock()
	argsForCall := fake.reloadInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeVirtualServerManager) ReloadInstanceReturns(result1 error) {
	fake.reloadInstanceMutex.Lock()
	defer fake.reloadInstanceMutex.Unlock()
	fake.ReloadInstanceStub = nil
	fake.reloadInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) ReloadInstanceReturnsOnCall(i int, result1 error) {
	fake.reloadInstanceMutex.Lock()
	defer fake.reloadInstanceMutex.Unlock()
	fake.ReloadInstanceStub = nil
	if fake.reloadInstanceReturnsOnCall == nil {
		fake.reloadInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.reloadInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) RescueInstance(arg1 int) error {
	fake.rescueInstanceMutex.Lock()
	ret, specificReturn := fake.rescueInstanceReturnsOnCall[len(fake.rescueInstanceArgsForCall)]
	fake.rescueInstanceArgsForCall = append(fake.rescueInstanceArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.RescueInstanceStub
	fakeReturns := fake.rescueInstanceReturns
	fake.recordInvocation("RescueInstance", []interface{}{arg1})
	fake.rescueInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) RescueInstanceCallCount() int {
	fake.rescueInstanceMutex.RLock()
	defer fake.rescueInstanceMutex.RUnlock()
	return len(fake.rescueInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) RescueInstanceCalls(stub func(int) error) {
	fake.rescueInstanceMutex.Lock()
	defer fake.rescueInstanceMutex.Unlock()
	fake.RescueInstanceStub = stub
}

func (fake *FakeVirtualServerManager) RescueInstanceArgsForCall(i int) int {
	fake.rescueInstanceMutex.RLock()
	defer fake.rescueInstanceMutex.RUnlock()
	argsForCall := fake.rescueInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) RescueInstanceReturns(result1 error) {
	fake.rescueInstanceMutex.Lock()
	defer fake.rescueInstanceMutex.Unlock()
	fake.RescueInstanceStub = nil
	fake.rescueInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) RescueInstanceReturnsOnCall(i int, result1 error) {
	fake.rescueInstanceMutex.Lock()
	defer fake.rescueInstanceMutex.Unlock()
	fake.RescueInstanceStub = nil
	if fake.rescueInstanceReturnsOnCall == nil {
		fake.rescueInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rescueInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) ResumeInstance(arg1 int) error {
	fake.resumeInstanceMutex.Lock()
	ret, specificReturn := fake.resumeInstanceReturnsOnCall[len(fake.resumeInstanceArgsForCall)]
	fake.resumeInstanceArgsForCall = append(fake.resumeInstanceArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.ResumeInstanceStub
	fakeReturns := fake.resumeInstanceReturns
	fake.recordInvocation("ResumeInstance", []interface{}{arg1})
	fake.resumeInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) ResumeInstanceCallCount() int {
	fake.resumeInstanceMutex.RLock()
	defer fake.resumeInstanceMutex.RUnlock()
	return len(fake.resumeInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) ResumeInstanceCalls(stub func(int) error) {
	fake.resumeInstanceMutex.Lock()
	defer fake.resumeInstanceMutex.Unlock()
	fake.ResumeInstanceStub = stub
}

func (fake *FakeVirtualServerManager) ResumeInstanceArgsForCall(i int) int {
	fake.resumeInstanceMutex.RLock()
	defer fake.resumeInstanceMutex.RUnlock()
	argsForCall := fake.resumeInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) ResumeInstanceReturns(result1 error) {
	fake.resumeInstanceMutex.Lock()
	defer fake.resumeInstanceMutex.Unlock()
	fake.ResumeInstanceStub = nil
	fake.resumeInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) ResumeInstanceReturnsOnCall(i int, result1 error) {
	fake.resumeInstanceMutex.Lock()
	defer fake.resumeInstanceMutex.Unlock()
	fake.ResumeInstanceStub = nil
	if fake.resumeInstanceReturnsOnCall == nil {
		fake.resumeInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resumeInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) SetNetworkPortSpeed(arg1 int, arg2 bool, arg3 int) error {
	fake.setNetworkPortSpeedMutex.Lock()
	ret, specificReturn := fake.setNetworkPortSpeedReturnsOnCall[len(fake.setNetworkPortSpeedArgsForCall)]
	fake.setNetworkPortSpeedArgsForCall = append(fake.setNetworkPortSpeedArgsForCall, struct {
		arg1 int
		arg2 bool
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.SetNetworkPortSpeedStub
	fakeReturns := fake.setNetworkPortSpeedReturns
	fake.recordInvocation("SetNetworkPortSpeed", []interface{}{arg1, arg2, arg3})
	fake.setNetworkPortSpeedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) SetNetworkPortSpeedCallCount() int {
	fake.setNetworkPortSpeedMutex.RLock()
	defer fake.setNetworkPortSpeedMutex.RUnlock()
	return len(fake.setNetworkPortSpeedArgsForCall)
}

func (fake *FakeVirtualServerManager) SetNetworkPortSpeedCalls(stub func(int, bool, int) error) {
	fake.setNetworkPortSpeedMutex.Lock()
	defer fake.setNetworkPortSpeedMutex.Unlock()
	fake.SetNetworkPortSpeedStub = stub
}

func (fake *FakeVirtualServerManager) SetNetworkPortSpeedArgsForCall(i int) (int, bool, int) {
	fake.setNetworkPortSpeedMutex.RLock()
	defer fake.setNetworkPortSpeedMutex.RUnlock()
	argsForCall := fake.setNetworkPortSpeedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeVirtualServerManager) SetNetworkPortSpeedReturns(result1 error) {
	fake.setNetworkPortSpeedMutex.Lock()
	defer fake.setNetworkPortSpeedMutex.Unlock()
	fake.SetNetworkPortSpeedStub = nil
	fake.setNetworkPortSpeedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) SetNetworkPortSpeedReturnsOnCall(i int, result1 error) {
	fake.setNetworkPortSpeedMutex.Lock()
	defer fake.setNetworkPortSpeedMutex.Unlock()
	fake.SetNetworkPortSpeedStub = nil
	if fake.setNetworkPortSpeedReturnsOnCall == nil {
		fake.setNetworkPortSpeedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setNetworkPortSpeedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) SetTags(arg1 int, arg2 string) error {
	fake.setTagsMutex.Lock()
	ret, specificReturn := fake.setTagsReturnsOnCall[len(fake.setTagsArgsForCall)]
	fake.setTagsArgsForCall = append(fake.setTagsArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.SetTagsStub
	fakeReturns := fake.setTagsReturns
	fake.recordInvocation("SetTags", []interface{}{arg1, arg2})
	fake.setTagsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) SetTagsCallCount() int {
	fake.setTagsMutex.RLock()
	defer fake.setTagsMutex.RUnlock()
	return len(fake.setTagsArgsForCall)
}

func (fake *FakeVirtualServerManager) SetTagsCalls(stub func(int, string) error) {
	fake.setTagsMutex.Lock()
	defer fake.setTagsMutex.Unlock()
	fake.SetTagsStub = stub
}

func (fake *FakeVirtualServerManager) SetTagsArgsForCall(i int) (int, string) {
	fake.setTagsMutex.RLock()
	defer fake.setTagsMutex.RUnlock()
	argsForCall := fake.setTagsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) SetTagsReturns(result1 error) {
	fake.setTagsMutex.Lock()
	defer fake.setTagsMutex.Unlock()
	fake.SetTagsStub = nil
	fake.setTagsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) SetTagsReturnsOnCall(i int, result1 error) {
	fake.setTagsMutex.Lock()
	defer fake.setTagsMutex.Unlock()
	fake.SetTagsStub = nil
	if fake.setTagsReturnsOnCall == nil {
		fake.setTagsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setTagsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) SetUserMetadata(arg1 int, arg2 []string) error {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.setUserMetadataMutex.Lock()
	ret, specificReturn := fake.setUserMetadataReturnsOnCall[len(fake.setUserMetadataArgsForCall)]
	fake.setUserMetadataArgsForCall = append(fake.setUserMetadataArgsForCall, struct {
		arg1 int
		arg2 []string
	}{arg1, arg2Copy})
	stub := fake.SetUserMetadataStub
	fakeReturns := fake.setUserMetadataReturns
	fake.recordInvocation("SetUserMetadata", []interface{}{arg1, arg2Copy})
	fake.setUserMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVirtualServerManager) SetUserMetadataCallCount() int {
	fake.setUserMetadataMutex.RLock()
	defer fake.setUserMetadataMutex.RUnlock()
	return len(fake.setUserMetadataArgsForCall)
}

func (fake *FakeVirtualServerManager) SetUserMetadataCalls(stub func(int, []string) error) {
	fake.setUserMetadataMutex.Lock()
	defer fake.setUserMetadataMutex.Unlock()
	fake.SetUserMetadataStub = stub
}

func (fake *FakeVirtualServerManager) SetUserMetadataArgsForCall(i int) (int, []string) {
	fake.setUserMetadataMutex.RLock()
	defer fake.setUserMetadataMutex.RUnlock()
	argsForCall := fake.setUserMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVirtualServerManager) SetUserMetadataReturns(result1 error) {
	fake.setUserMetadataMutex.Lock()
	defer fake.setUserMetadataMutex.Unlock()
	fake.SetUserMetadataStub = nil
	fake.setUserMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) SetUserMetadataReturnsOnCall(i int, result1 error) {
	fake.setUserMetadataMutex.Lock()
	defer fake.setUserMetadataMutex.Unlock()
	fake.SetUserMetadataStub = nil
	if fake.setUserMetadataReturnsOnCall == nil {
		fake.setUserMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setUserMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeVirtualServerManager) UpgradeInstance(arg1 int, arg2 int, arg3 int, arg4 int, arg5 int, arg6 []int, arg7 bool, arg8 string) (datatypes.Container_Product_Order_Receipt, error) {
	var arg6Copy []int
	if arg6 != nil {
		arg6Copy = make([]int, len(arg6))
		copy(arg6Copy, arg6)
	}
	fake.upgradeInstanceMutex.Lock()
	ret, specificReturn := fake.upgradeInstanceReturnsOnCall[len(fake.upgradeInstanceArgsForCall)]
	fake.upgradeInstanceArgsForCall = append(fake.upgradeInstanceArgsForCall, struct {
		arg1 int
		arg2 int
		arg3 int
		arg4 int
		arg5 int
		arg6 []int
		arg7 bool
		arg8 string
	}{arg1, arg2, arg3, arg4, arg5, arg6Copy, arg7, arg8})
	stub := fake.UpgradeInstanceStub
	fakeReturns := fake.upgradeInstanceReturns
	fake.recordInvocation("UpgradeInstance", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6Copy, arg7, arg8})
	fake.upgradeInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) UpgradeInstanceCallCount() int {
	fake.upgradeInstanceMutex.RLock()
	defer fake.upgradeInstanceMutex.RUnlock()
	return len(fake.upgradeInstanceArgsForCall)
}

func (fake *FakeVirtualServerManager) UpgradeInstanceCalls(stub func(int, int, int, int, int, []int, bool, string) (datatypes.Container_Product_Order_Receipt, error)) {
	fake.upgradeInstanceMutex.Lock()
	defer fake.upgradeInstanceMutex.Unlock()
	fake.UpgradeInstanceStub = stub
}

func (fake *FakeVirtualServerManager) UpgradeInstanceArgsForCall(i int) (int, int, int, int, int, []int, bool, string) {
	fake.upgradeInstanceMutex.RLock()
	defer fake.upgradeInstanceMutex.RUnlock()
	argsForCall := fake.upgradeInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *FakeVirtualServerManager) UpgradeInstanceReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.upgradeInstanceMutex.Lock()
	defer fake.upgradeInstanceMutex.Unlock()
	fake.UpgradeInstanceStub = nil
	fake.upgradeInstanceReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) UpgradeInstanceReturnsOnCall(i int, result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.upgradeInstanceMutex.Lock()
	defer fake.upgradeInstanceMutex.Unlock()
	fake.UpgradeInstanceStub = nil
	if fake.upgradeInstanceReturnsOnCall == nil {
		fake.upgradeInstanceReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order_Receipt
			result2 error
		})
	}
	fake.upgradeInstanceReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) VerifyInstanceCreation(arg1 datatypes.Virtual_Guest) (datatypes.Container_Product_Order, error) {
	fake.verifyInstanceCreationMutex.Lock()
	ret, specificReturn := fake.verifyInstanceCreationReturnsOnCall[len(fake.verifyInstanceCreationArgsForCall)]
	fake.verifyInstanceCreationArgsForCall = append(fake.verifyInstanceCreationArgsForCall, struct {
		arg1 datatypes.Virtual_Guest
	}{arg1})
	stub := fake.VerifyInstanceCreationStub
	fakeReturns := fake.verifyInstanceCreationReturns
	fake.recordInvocation("VerifyInstanceCreation", []interface{}{arg1})
	fake.verifyInstanceCreationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVirtualServerManager) VerifyInstanceCreationCallCount() int {
	fake.verifyInstanceCreationMutex.RLock()
	defer fake.verifyInstanceCreationMutex.RUnlock()
	return len(fake.verifyInstanceCreationArgsForCall)
}

func (fake *FakeVirtualServerManager) VerifyInstanceCreationCalls(stub func(datatypes.Virtual_Guest) (datatypes.Container_Product_Order, error)) {
	fake.verifyInstanceCreationMutex.Lock()
	defer fake.verifyInstanceCreationMutex.Unlock()
	fake.VerifyInstanceCreationStub = stub
}

func (fake *FakeVirtualServerManager) VerifyInstanceCreationArgsForCall(i int) datatypes.Virtual_Guest {
	fake.verifyInstanceCreationMutex.RLock()
	defer fake.verifyInstanceCreationMutex.RUnlock()
	argsForCall := fake.verifyInstanceCreationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVirtualServerManager) VerifyInstanceCreationReturns(result1 datatypes.Container_Product_Order, result2 error) {
	fake.verifyInstanceCreationMutex.Lock()
	defer fake.verifyInstanceCreationMutex.Unlock()
	fake.VerifyInstanceCreationStub = nil
	fake.verifyInstanceCreationReturns = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) VerifyInstanceCreationReturnsOnCall(i int, result1 datatypes.Container_Product_Order, result2 error) {
	fake.verifyInstanceCreationMutex.Lock()
	defer fake.verifyInstanceCreationMutex.Unlock()
	fake.VerifyInstanceCreationStub = nil
	if fake.verifyInstanceCreationReturnsOnCall == nil {
		fake.verifyInstanceCreationReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order
			result2 error
		})
	}
	fake.verifyInstanceCreationReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeVirtualServerManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.attachPortableStorageMutex.RLock()
	defer fake.attachPortableStorageMutex.RUnlock()
	fake.authorizeStorageMutex.RLock()
	defer fake.authorizeStorageMutex.RUnlock()
	fake.cancelInstanceMutex.RLock()
	defer fake.cancelInstanceMutex.RUnlock()
	fake.capacityListMutex.RLock()
	defer fake.capacityListMutex.RUnlock()
	fake.captureImageMutex.RLock()
	defer fake.captureImageMutex.RUnlock()
	fake.createDedicatedHostMutex.RLock()
	defer fake.createDedicatedHostMutex.RUnlock()
	fake.createInstanceMutex.RLock()
	defer fake.createInstanceMutex.RUnlock()
	fake.createInstancesMutex.RLock()
	defer fake.createInstancesMutex.RUnlock()
	fake.createUserCustomerNotificationMutex.RLock()
	defer fake.createUserCustomerNotificationMutex.RUnlock()
	fake.deleteUserCustomerNotificationMutex.RLock()
	defer fake.deleteUserCustomerNotificationMutex.RUnlock()
	fake.editInstanceMutex.RLock()
	defer fake.editInstanceMutex.RUnlock()
	fake.generateInstanceCapacityCreationTemplateMutex.RLock()
	defer fake.generateInstanceCapacityCreationTemplateMutex.RUnlock()
	fake.generateInstanceCreationTemplateMutex.RLock()
	defer fake.generateInstanceCreationTemplateMutex.RUnlock()
	fake.getAvailablePlacementRoutersMutex.RLock()
	defer fake.getAvailablePlacementRoutersMutex.RUnlock()
	fake.getBandwidthDataMutex.RLock()
	defer fake.getBandwidthDataMutex.RUnlock()
	fake.getCapacityCreateOptionsMutex.RLock()
	defer fake.getCapacityCreateOptionsMutex.RUnlock()
	fake.getCapacityDetailMutex.RLock()
	defer fake.getCapacityDetailMutex.RUnlock()
	fake.getCreateOptionsMutex.RLock()
	defer fake.getCreateOptionsMutex.RUnlock()
	fake.getDatacentersMutex.RLock()
	defer fake.getDatacentersMutex.RUnlock()
	fake.getDedicatedHostMutex.RLock()
	defer fake.getDedicatedHostMutex.RUnlock()
	fake.getInstanceMutex.RLock()
	defer fake.getInstanceMutex.RUnlock()
	fake.getInstancesMutex.RLock()
	defer fake.getInstancesMutex.RUnlock()
	fake.getLikedInstanceMutex.RLock()
	defer fake.getLikedInstanceMutex.RUnlock()
	fake.getLocalDisksMutex.RLock()
	defer fake.getLocalDisksMutex.RUnlock()
	fake.getPlacementGroupDetailMutex.RLock()
	defer fake.getPlacementGroupDetailMutex.RUnlock()
	fake.getPodsMutex.RLock()
	defer fake.getPodsMutex.RUnlock()
	fake.getPortableStorageMutex.RLock()
	defer fake.getPortableStorageMutex.RUnlock()
	fake.getRoutersMutex.RLock()
	defer fake.getRoutersMutex.RUnlock()
	fake.getRulesMutex.RLock()
	defer fake.getRulesMutex.RUnlock()
	fake.getStorageCredentialsMutex.RLock()
	defer fake.getStorageCredentialsMutex.RUnlock()
	fake.getStorageDetailsMutex.RLock()
	defer fake.getStorageDetailsMutex.RUnlock()
	fake.getSummaryUsageMutex.RLock()
	defer fake.getSummaryUsageMutex.RUnlock()
	fake.getUserCustomerNotificationsByVirtualGuestIdMutex.RLock()
	defer fake.getUserCustomerNotificationsByVirtualGuestIdMutex.RUnlock()
	fake.instanceIsReadyMutex.RLock()
	defer fake.instanceIsReadyMutex.RUnlock()
	fake.listInstancesMutex.RLock()
	defer fake.listInstancesMutex.RUnlock()
	fake.migrateDedicatedHostMutex.RLock()
	defer fake.migrateDedicatedHostMutex.RUnlock()
	fake.migrateInstanceMutex.RLock()
	defer fake.migrateInstanceMutex.RUnlock()
	fake.pauseInstanceMutex.RLock()
	defer fake.pauseInstanceMutex.RUnlock()
	fake.placementCreateMutex.RLock()
	defer fake.placementCreateMutex.RUnlock()
	fake.placementsGroupListMutex.RLock()
	defer fake.placementsGroupListMutex.RUnlock()
	fake.powerOffInstanceMutex.RLock()
	defer fake.powerOffInstanceMutex.RUnlock()
	fake.powerOnInstanceMutex.RLock()
	defer fake.powerOnInstanceMutex.RUnlock()
	fake.rebootInstanceMutex.RLock()
	defer fake.rebootInstanceMutex.RUnlock()
	fake.reloadInstanceMutex.RLock()
	defer fake.reloadInstanceMutex.RUnlock()
	fake.rescueInstanceMutex.RLock()
	defer fake.rescueInstanceMutex.RUnlock()
	fake.resumeInstanceMutex.RLock()
	defer fake.resumeInstanceMutex.RUnlock()
	fake.setNetworkPortSpeedMutex.RLock()
	defer fake.setNetworkPortSpeedMutex.RUnlock()
	fake.setTagsMutex.RLock()
	defer fake.setTagsMutex.RUnlock()
	fake.setUserMetadataMutex.RLock()
	defer fake.setUserMetadataMutex.RUnlock()
	fake.upgradeInstanceMutex.RLock()
	defer fake.upgradeInstanceMutex.RUnlock()
	fake.verifyInstanceCreationMutex.RLock()
	defer fake.verifyInstanceCreationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVirtualServerManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.VirtualServerManager = new(FakeVirtualServerManager)
