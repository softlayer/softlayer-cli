// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeBandwidthManager struct {
	CreatePoolStub        func(string, int) (datatypes.Network_Bandwidth_Version1_Allotment, error)
	createPoolMutex       sync.RWMutex
	createPoolArgsForCall []struct {
		arg1 string
		arg2 int
	}
	createPoolReturns struct {
		result1 datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}
	createPoolReturnsOnCall map[int]struct {
		result1 datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}
	GetLocationGroupStub        func() ([]datatypes.Location_Group, error)
	getLocationGroupMutex       sync.RWMutex
	getLocationGroupArgsForCall []struct {
	}
	getLocationGroupReturns struct {
		result1 []datatypes.Location_Group
		result2 error
	}
	getLocationGroupReturnsOnCall map[int]struct {
		result1 []datatypes.Location_Group
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBandwidthManager) CreatePool(arg1 string, arg2 int) (datatypes.Network_Bandwidth_Version1_Allotment, error) {
	fake.createPoolMutex.Lock()
	ret, specificReturn := fake.createPoolReturnsOnCall[len(fake.createPoolArgsForCall)]
	fake.createPoolArgsForCall = append(fake.createPoolArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	stub := fake.CreatePoolStub
	fakeReturns := fake.createPoolReturns
	fake.recordInvocation("CreatePool", []interface{}{arg1, arg2})
	fake.createPoolMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBandwidthManager) CreatePoolCallCount() int {
	fake.createPoolMutex.RLock()
	defer fake.createPoolMutex.RUnlock()
	return len(fake.createPoolArgsForCall)
}

func (fake *FakeBandwidthManager) CreatePoolCalls(stub func(string, int) (datatypes.Network_Bandwidth_Version1_Allotment, error)) {
	fake.createPoolMutex.Lock()
	defer fake.createPoolMutex.Unlock()
	fake.CreatePoolStub = stub
}

func (fake *FakeBandwidthManager) CreatePoolArgsForCall(i int) (string, int) {
	fake.createPoolMutex.RLock()
	defer fake.createPoolMutex.RUnlock()
	argsForCall := fake.createPoolArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBandwidthManager) CreatePoolReturns(result1 datatypes.Network_Bandwidth_Version1_Allotment, result2 error) {
	fake.createPoolMutex.Lock()
	defer fake.createPoolMutex.Unlock()
	fake.CreatePoolStub = nil
	fake.createPoolReturns = struct {
		result1 datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}{result1, result2}
}

func (fake *FakeBandwidthManager) CreatePoolReturnsOnCall(i int, result1 datatypes.Network_Bandwidth_Version1_Allotment, result2 error) {
	fake.createPoolMutex.Lock()
	defer fake.createPoolMutex.Unlock()
	fake.CreatePoolStub = nil
	if fake.createPoolReturnsOnCall == nil {
		fake.createPoolReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Bandwidth_Version1_Allotment
			result2 error
		})
	}
	fake.createPoolReturnsOnCall[i] = struct {
		result1 datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}{result1, result2}
}

func (fake *FakeBandwidthManager) GetLocationGroup() ([]datatypes.Location_Group, error) {
	fake.getLocationGroupMutex.Lock()
	ret, specificReturn := fake.getLocationGroupReturnsOnCall[len(fake.getLocationGroupArgsForCall)]
	fake.getLocationGroupArgsForCall = append(fake.getLocationGroupArgsForCall, struct {
	}{})
	stub := fake.GetLocationGroupStub
	fakeReturns := fake.getLocationGroupReturns
	fake.recordInvocation("GetLocationGroup", []interface{}{})
	fake.getLocationGroupMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBandwidthManager) GetLocationGroupCallCount() int {
	fake.getLocationGroupMutex.RLock()
	defer fake.getLocationGroupMutex.RUnlock()
	return len(fake.getLocationGroupArgsForCall)
}

func (fake *FakeBandwidthManager) GetLocationGroupCalls(stub func() ([]datatypes.Location_Group, error)) {
	fake.getLocationGroupMutex.Lock()
	defer fake.getLocationGroupMutex.Unlock()
	fake.GetLocationGroupStub = stub
}

func (fake *FakeBandwidthManager) GetLocationGroupReturns(result1 []datatypes.Location_Group, result2 error) {
	fake.getLocationGroupMutex.Lock()
	defer fake.getLocationGroupMutex.Unlock()
	fake.GetLocationGroupStub = nil
	fake.getLocationGroupReturns = struct {
		result1 []datatypes.Location_Group
		result2 error
	}{result1, result2}
}

func (fake *FakeBandwidthManager) GetLocationGroupReturnsOnCall(i int, result1 []datatypes.Location_Group, result2 error) {
	fake.getLocationGroupMutex.Lock()
	defer fake.getLocationGroupMutex.Unlock()
	fake.GetLocationGroupStub = nil
	if fake.getLocationGroupReturnsOnCall == nil {
		fake.getLocationGroupReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Location_Group
			result2 error
		})
	}
	fake.getLocationGroupReturnsOnCall[i] = struct {
		result1 []datatypes.Location_Group
		result2 error
	}{result1, result2}
}

func (fake *FakeBandwidthManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createPoolMutex.RLock()
	defer fake.createPoolMutex.RUnlock()
	fake.getLocationGroupMutex.RLock()
	defer fake.getLocationGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBandwidthManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.BandwidthManager = new(FakeBandwidthManager)
