// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeOrderManager struct {
	GenerateOrderStub        func(string, string, []string, string, bool, string, interface{}, int) (interface{}, error)
	generateOrderMutex       sync.RWMutex
	generateOrderArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
		arg5 bool
		arg6 string
		arg7 interface{}
		arg8 int
	}
	generateOrderReturns struct {
		result1 interface{}
		result2 error
	}
	generateOrderReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	GetActiveQuotesStub        func(string) ([]datatypes.Billing_Order_Quote, error)
	getActiveQuotesMutex       sync.RWMutex
	getActiveQuotesArgsForCall []struct {
		arg1 string
	}
	getActiveQuotesReturns struct {
		result1 []datatypes.Billing_Order_Quote
		result2 error
	}
	getActiveQuotesReturnsOnCall map[int]struct {
		result1 []datatypes.Billing_Order_Quote
		result2 error
	}
	GetLocationStub        func(string) (string, error)
	getLocationMutex       sync.RWMutex
	getLocationArgsForCall []struct {
		arg1 string
	}
	getLocationReturns struct {
		result1 string
		result2 error
	}
	getLocationReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetOrderDetailStub        func(int, string) (datatypes.Billing_Order, error)
	getOrderDetailMutex       sync.RWMutex
	getOrderDetailArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getOrderDetailReturns struct {
		result1 datatypes.Billing_Order
		result2 error
	}
	getOrderDetailReturnsOnCall map[int]struct {
		result1 datatypes.Billing_Order
		result2 error
	}
	GetPackageByKeyStub        func(string, string) (datatypes.Product_Package, error)
	getPackageByKeyMutex       sync.RWMutex
	getPackageByKeyArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getPackageByKeyReturns struct {
		result1 datatypes.Product_Package
		result2 error
	}
	getPackageByKeyReturnsOnCall map[int]struct {
		result1 datatypes.Product_Package
		result2 error
	}
	GetPresetPricesStub        func(int) (datatypes.Product_Package_Preset, error)
	getPresetPricesMutex       sync.RWMutex
	getPresetPricesArgsForCall []struct {
		arg1 int
	}
	getPresetPricesReturns struct {
		result1 datatypes.Product_Package_Preset
		result2 error
	}
	getPresetPricesReturnsOnCall map[int]struct {
		result1 datatypes.Product_Package_Preset
		result2 error
	}
	GetPresetbyKeyStub        func(string, string) (datatypes.Product_Package_Preset, error)
	getPresetbyKeyMutex       sync.RWMutex
	getPresetbyKeyArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getPresetbyKeyReturns struct {
		result1 datatypes.Product_Package_Preset
		result2 error
	}
	getPresetbyKeyReturnsOnCall map[int]struct {
		result1 datatypes.Product_Package_Preset
		result2 error
	}
	GetPriceIdListStub        func(string, []string, float64) ([]int, error)
	getPriceIdListMutex       sync.RWMutex
	getPriceIdListArgsForCall []struct {
		arg1 string
		arg2 []string
		arg3 float64
	}
	getPriceIdListReturns struct {
		result1 []int
		result2 error
	}
	getPriceIdListReturnsOnCall map[int]struct {
		result1 []int
		result2 error
	}
	GetQuoteStub        func(int, string) (datatypes.Billing_Order_Quote, error)
	getQuoteMutex       sync.RWMutex
	getQuoteArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getQuoteReturns struct {
		result1 datatypes.Billing_Order_Quote
		result2 error
	}
	getQuoteReturnsOnCall map[int]struct {
		result1 datatypes.Billing_Order_Quote
		result2 error
	}
	GetRecalculatedOrderContainerStub        func(int) (datatypes.Container_Product_Order, error)
	getRecalculatedOrderContainerMutex       sync.RWMutex
	getRecalculatedOrderContainerArgsForCall []struct {
		arg1 int
	}
	getRecalculatedOrderContainerReturns struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	getRecalculatedOrderContainerReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	ListCategoriesStub        func(string) ([]datatypes.Product_Package_Order_Configuration, error)
	listCategoriesMutex       sync.RWMutex
	listCategoriesArgsForCall []struct {
		arg1 string
	}
	listCategoriesReturns struct {
		result1 []datatypes.Product_Package_Order_Configuration
		result2 error
	}
	listCategoriesReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Package_Order_Configuration
		result2 error
	}
	ListItemsStub        func(string, string, string) ([]datatypes.Product_Item, error)
	listItemsMutex       sync.RWMutex
	listItemsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	listItemsReturns struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	listItemsReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	ListPackageStub        func(string, string) ([]datatypes.Product_Package, error)
	listPackageMutex       sync.RWMutex
	listPackageArgsForCall []struct {
		arg1 string
		arg2 string
	}
	listPackageReturns struct {
		result1 []datatypes.Product_Package
		result2 error
	}
	listPackageReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Package
		result2 error
	}
	ListPresetStub        func(string, string) ([]datatypes.Product_Package_Preset, error)
	listPresetMutex       sync.RWMutex
	listPresetArgsForCall []struct {
		arg1 string
		arg2 string
	}
	listPresetReturns struct {
		result1 []datatypes.Product_Package_Preset
		result2 error
	}
	listPresetReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Package_Preset
		result2 error
	}
	OrderQuoteStub        func(int, datatypes.Container_Product_Order) (datatypes.Container_Product_Order_Receipt, error)
	orderQuoteMutex       sync.RWMutex
	orderQuoteArgsForCall []struct {
		arg1 int
		arg2 datatypes.Container_Product_Order
	}
	orderQuoteReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	orderQuoteReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	PackageLocationStub        func(string) ([]datatypes.Location_Region, error)
	packageLocationMutex       sync.RWMutex
	packageLocationArgsForCall []struct {
		arg1 string
	}
	packageLocationReturns struct {
		result1 []datatypes.Location_Region
		result2 error
	}
	packageLocationReturnsOnCall map[int]struct {
		result1 []datatypes.Location_Region
		result2 error
	}
	PlaceOrderStub        func(string, string, []string, string, bool, string, interface{}, int) (datatypes.Container_Product_Order_Receipt, error)
	placeOrderMutex       sync.RWMutex
	placeOrderArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
		arg5 bool
		arg6 string
		arg7 interface{}
		arg8 int
	}
	placeOrderReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	placeOrderReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	PlaceQuoteStub        func(string, string, []string, string, string, string, interface{}, bool) (datatypes.Container_Product_Order_Receipt, error)
	placeQuoteMutex       sync.RWMutex
	placeQuoteArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
		arg5 string
		arg6 string
		arg7 interface{}
		arg8 bool
	}
	placeQuoteReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	placeQuoteReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	SaveQuoteStub        func(int) (datatypes.Billing_Order_Quote, error)
	saveQuoteMutex       sync.RWMutex
	saveQuoteArgsForCall []struct {
		arg1 int
	}
	saveQuoteReturns struct {
		result1 datatypes.Billing_Order_Quote
		result2 error
	}
	saveQuoteReturnsOnCall map[int]struct {
		result1 datatypes.Billing_Order_Quote
		result2 error
	}
	VerifyOrderStub        func(int, datatypes.Container_Product_Order) (datatypes.Container_Product_Order, error)
	verifyOrderMutex       sync.RWMutex
	verifyOrderArgsForCall []struct {
		arg1 int
		arg2 datatypes.Container_Product_Order
	}
	verifyOrderReturns struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	verifyOrderReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	VerifyPlaceOrderStub        func(string, string, []string, string, bool, string, interface{}, int) (datatypes.Container_Product_Order, error)
	verifyPlaceOrderMutex       sync.RWMutex
	verifyPlaceOrderArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
		arg5 bool
		arg6 string
		arg7 interface{}
		arg8 int
	}
	verifyPlaceOrderReturns struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	verifyPlaceOrderReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOrderManager) GenerateOrder(arg1 string, arg2 string, arg3 []string, arg4 string, arg5 bool, arg6 string, arg7 interface{}, arg8 int) (interface{}, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.generateOrderMutex.Lock()
	ret, specificReturn := fake.generateOrderReturnsOnCall[len(fake.generateOrderArgsForCall)]
	fake.generateOrderArgsForCall = append(fake.generateOrderArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
		arg5 bool
		arg6 string
		arg7 interface{}
		arg8 int
	}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7, arg8})
	stub := fake.GenerateOrderStub
	fakeReturns := fake.generateOrderReturns
	fake.recordInvocation("GenerateOrder", []interface{}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7, arg8})
	fake.generateOrderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GenerateOrderCallCount() int {
	fake.generateOrderMutex.RLock()
	defer fake.generateOrderMutex.RUnlock()
	return len(fake.generateOrderArgsForCall)
}

func (fake *FakeOrderManager) GenerateOrderCalls(stub func(string, string, []string, string, bool, string, interface{}, int) (interface{}, error)) {
	fake.generateOrderMutex.Lock()
	defer fake.generateOrderMutex.Unlock()
	fake.GenerateOrderStub = stub
}

func (fake *FakeOrderManager) GenerateOrderArgsForCall(i int) (string, string, []string, string, bool, string, interface{}, int) {
	fake.generateOrderMutex.RLock()
	defer fake.generateOrderMutex.RUnlock()
	argsForCall := fake.generateOrderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *FakeOrderManager) GenerateOrderReturns(result1 interface{}, result2 error) {
	fake.generateOrderMutex.Lock()
	defer fake.generateOrderMutex.Unlock()
	fake.GenerateOrderStub = nil
	fake.generateOrderReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GenerateOrderReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.generateOrderMutex.Lock()
	defer fake.generateOrderMutex.Unlock()
	fake.GenerateOrderStub = nil
	if fake.generateOrderReturnsOnCall == nil {
		fake.generateOrderReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.generateOrderReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetActiveQuotes(arg1 string) ([]datatypes.Billing_Order_Quote, error) {
	fake.getActiveQuotesMutex.Lock()
	ret, specificReturn := fake.getActiveQuotesReturnsOnCall[len(fake.getActiveQuotesArgsForCall)]
	fake.getActiveQuotesArgsForCall = append(fake.getActiveQuotesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetActiveQuotesStub
	fakeReturns := fake.getActiveQuotesReturns
	fake.recordInvocation("GetActiveQuotes", []interface{}{arg1})
	fake.getActiveQuotesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GetActiveQuotesCallCount() int {
	fake.getActiveQuotesMutex.RLock()
	defer fake.getActiveQuotesMutex.RUnlock()
	return len(fake.getActiveQuotesArgsForCall)
}

func (fake *FakeOrderManager) GetActiveQuotesCalls(stub func(string) ([]datatypes.Billing_Order_Quote, error)) {
	fake.getActiveQuotesMutex.Lock()
	defer fake.getActiveQuotesMutex.Unlock()
	fake.GetActiveQuotesStub = stub
}

func (fake *FakeOrderManager) GetActiveQuotesArgsForCall(i int) string {
	fake.getActiveQuotesMutex.RLock()
	defer fake.getActiveQuotesMutex.RUnlock()
	argsForCall := fake.getActiveQuotesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrderManager) GetActiveQuotesReturns(result1 []datatypes.Billing_Order_Quote, result2 error) {
	fake.getActiveQuotesMutex.Lock()
	defer fake.getActiveQuotesMutex.Unlock()
	fake.GetActiveQuotesStub = nil
	fake.getActiveQuotesReturns = struct {
		result1 []datatypes.Billing_Order_Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetActiveQuotesReturnsOnCall(i int, result1 []datatypes.Billing_Order_Quote, result2 error) {
	fake.getActiveQuotesMutex.Lock()
	defer fake.getActiveQuotesMutex.Unlock()
	fake.GetActiveQuotesStub = nil
	if fake.getActiveQuotesReturnsOnCall == nil {
		fake.getActiveQuotesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Billing_Order_Quote
			result2 error
		})
	}
	fake.getActiveQuotesReturnsOnCall[i] = struct {
		result1 []datatypes.Billing_Order_Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetLocation(arg1 string) (string, error) {
	fake.getLocationMutex.Lock()
	ret, specificReturn := fake.getLocationReturnsOnCall[len(fake.getLocationArgsForCall)]
	fake.getLocationArgsForCall = append(fake.getLocationArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetLocationStub
	fakeReturns := fake.getLocationReturns
	fake.recordInvocation("GetLocation", []interface{}{arg1})
	fake.getLocationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GetLocationCallCount() int {
	fake.getLocationMutex.RLock()
	defer fake.getLocationMutex.RUnlock()
	return len(fake.getLocationArgsForCall)
}

func (fake *FakeOrderManager) GetLocationCalls(stub func(string) (string, error)) {
	fake.getLocationMutex.Lock()
	defer fake.getLocationMutex.Unlock()
	fake.GetLocationStub = stub
}

func (fake *FakeOrderManager) GetLocationArgsForCall(i int) string {
	fake.getLocationMutex.RLock()
	defer fake.getLocationMutex.RUnlock()
	argsForCall := fake.getLocationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrderManager) GetLocationReturns(result1 string, result2 error) {
	fake.getLocationMutex.Lock()
	defer fake.getLocationMutex.Unlock()
	fake.GetLocationStub = nil
	fake.getLocationReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetLocationReturnsOnCall(i int, result1 string, result2 error) {
	fake.getLocationMutex.Lock()
	defer fake.getLocationMutex.Unlock()
	fake.GetLocationStub = nil
	if fake.getLocationReturnsOnCall == nil {
		fake.getLocationReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getLocationReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetOrderDetail(arg1 int, arg2 string) (datatypes.Billing_Order, error) {
	fake.getOrderDetailMutex.Lock()
	ret, specificReturn := fake.getOrderDetailReturnsOnCall[len(fake.getOrderDetailArgsForCall)]
	fake.getOrderDetailArgsForCall = append(fake.getOrderDetailArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.GetOrderDetailStub
	fakeReturns := fake.getOrderDetailReturns
	fake.recordInvocation("GetOrderDetail", []interface{}{arg1, arg2})
	fake.getOrderDetailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GetOrderDetailCallCount() int {
	fake.getOrderDetailMutex.RLock()
	defer fake.getOrderDetailMutex.RUnlock()
	return len(fake.getOrderDetailArgsForCall)
}

func (fake *FakeOrderManager) GetOrderDetailCalls(stub func(int, string) (datatypes.Billing_Order, error)) {
	fake.getOrderDetailMutex.Lock()
	defer fake.getOrderDetailMutex.Unlock()
	fake.GetOrderDetailStub = stub
}

func (fake *FakeOrderManager) GetOrderDetailArgsForCall(i int) (int, string) {
	fake.getOrderDetailMutex.RLock()
	defer fake.getOrderDetailMutex.RUnlock()
	argsForCall := fake.getOrderDetailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrderManager) GetOrderDetailReturns(result1 datatypes.Billing_Order, result2 error) {
	fake.getOrderDetailMutex.Lock()
	defer fake.getOrderDetailMutex.Unlock()
	fake.GetOrderDetailStub = nil
	fake.getOrderDetailReturns = struct {
		result1 datatypes.Billing_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetOrderDetailReturnsOnCall(i int, result1 datatypes.Billing_Order, result2 error) {
	fake.getOrderDetailMutex.Lock()
	defer fake.getOrderDetailMutex.Unlock()
	fake.GetOrderDetailStub = nil
	if fake.getOrderDetailReturnsOnCall == nil {
		fake.getOrderDetailReturnsOnCall = make(map[int]struct {
			result1 datatypes.Billing_Order
			result2 error
		})
	}
	fake.getOrderDetailReturnsOnCall[i] = struct {
		result1 datatypes.Billing_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetPackageByKey(arg1 string, arg2 string) (datatypes.Product_Package, error) {
	fake.getPackageByKeyMutex.Lock()
	ret, specificReturn := fake.getPackageByKeyReturnsOnCall[len(fake.getPackageByKeyArgsForCall)]
	fake.getPackageByKeyArgsForCall = append(fake.getPackageByKeyArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPackageByKeyStub
	fakeReturns := fake.getPackageByKeyReturns
	fake.recordInvocation("GetPackageByKey", []interface{}{arg1, arg2})
	fake.getPackageByKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GetPackageByKeyCallCount() int {
	fake.getPackageByKeyMutex.RLock()
	defer fake.getPackageByKeyMutex.RUnlock()
	return len(fake.getPackageByKeyArgsForCall)
}

func (fake *FakeOrderManager) GetPackageByKeyCalls(stub func(string, string) (datatypes.Product_Package, error)) {
	fake.getPackageByKeyMutex.Lock()
	defer fake.getPackageByKeyMutex.Unlock()
	fake.GetPackageByKeyStub = stub
}

func (fake *FakeOrderManager) GetPackageByKeyArgsForCall(i int) (string, string) {
	fake.getPackageByKeyMutex.RLock()
	defer fake.getPackageByKeyMutex.RUnlock()
	argsForCall := fake.getPackageByKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrderManager) GetPackageByKeyReturns(result1 datatypes.Product_Package, result2 error) {
	fake.getPackageByKeyMutex.Lock()
	defer fake.getPackageByKeyMutex.Unlock()
	fake.GetPackageByKeyStub = nil
	fake.getPackageByKeyReturns = struct {
		result1 datatypes.Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetPackageByKeyReturnsOnCall(i int, result1 datatypes.Product_Package, result2 error) {
	fake.getPackageByKeyMutex.Lock()
	defer fake.getPackageByKeyMutex.Unlock()
	fake.GetPackageByKeyStub = nil
	if fake.getPackageByKeyReturnsOnCall == nil {
		fake.getPackageByKeyReturnsOnCall = make(map[int]struct {
			result1 datatypes.Product_Package
			result2 error
		})
	}
	fake.getPackageByKeyReturnsOnCall[i] = struct {
		result1 datatypes.Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetPresetPrices(arg1 int) (datatypes.Product_Package_Preset, error) {
	fake.getPresetPricesMutex.Lock()
	ret, specificReturn := fake.getPresetPricesReturnsOnCall[len(fake.getPresetPricesArgsForCall)]
	fake.getPresetPricesArgsForCall = append(fake.getPresetPricesArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetPresetPricesStub
	fakeReturns := fake.getPresetPricesReturns
	fake.recordInvocation("GetPresetPrices", []interface{}{arg1})
	fake.getPresetPricesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GetPresetPricesCallCount() int {
	fake.getPresetPricesMutex.RLock()
	defer fake.getPresetPricesMutex.RUnlock()
	return len(fake.getPresetPricesArgsForCall)
}

func (fake *FakeOrderManager) GetPresetPricesCalls(stub func(int) (datatypes.Product_Package_Preset, error)) {
	fake.getPresetPricesMutex.Lock()
	defer fake.getPresetPricesMutex.Unlock()
	fake.GetPresetPricesStub = stub
}

func (fake *FakeOrderManager) GetPresetPricesArgsForCall(i int) int {
	fake.getPresetPricesMutex.RLock()
	defer fake.getPresetPricesMutex.RUnlock()
	argsForCall := fake.getPresetPricesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrderManager) GetPresetPricesReturns(result1 datatypes.Product_Package_Preset, result2 error) {
	fake.getPresetPricesMutex.Lock()
	defer fake.getPresetPricesMutex.Unlock()
	fake.GetPresetPricesStub = nil
	fake.getPresetPricesReturns = struct {
		result1 datatypes.Product_Package_Preset
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetPresetPricesReturnsOnCall(i int, result1 datatypes.Product_Package_Preset, result2 error) {
	fake.getPresetPricesMutex.Lock()
	defer fake.getPresetPricesMutex.Unlock()
	fake.GetPresetPricesStub = nil
	if fake.getPresetPricesReturnsOnCall == nil {
		fake.getPresetPricesReturnsOnCall = make(map[int]struct {
			result1 datatypes.Product_Package_Preset
			result2 error
		})
	}
	fake.getPresetPricesReturnsOnCall[i] = struct {
		result1 datatypes.Product_Package_Preset
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetPresetbyKey(arg1 string, arg2 string) (datatypes.Product_Package_Preset, error) {
	fake.getPresetbyKeyMutex.Lock()
	ret, specificReturn := fake.getPresetbyKeyReturnsOnCall[len(fake.getPresetbyKeyArgsForCall)]
	fake.getPresetbyKeyArgsForCall = append(fake.getPresetbyKeyArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPresetbyKeyStub
	fakeReturns := fake.getPresetbyKeyReturns
	fake.recordInvocation("GetPresetbyKey", []interface{}{arg1, arg2})
	fake.getPresetbyKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GetPresetbyKeyCallCount() int {
	fake.getPresetbyKeyMutex.RLock()
	defer fake.getPresetbyKeyMutex.RUnlock()
	return len(fake.getPresetbyKeyArgsForCall)
}

func (fake *FakeOrderManager) GetPresetbyKeyCalls(stub func(string, string) (datatypes.Product_Package_Preset, error)) {
	fake.getPresetbyKeyMutex.Lock()
	defer fake.getPresetbyKeyMutex.Unlock()
	fake.GetPresetbyKeyStub = stub
}

func (fake *FakeOrderManager) GetPresetbyKeyArgsForCall(i int) (string, string) {
	fake.getPresetbyKeyMutex.RLock()
	defer fake.getPresetbyKeyMutex.RUnlock()
	argsForCall := fake.getPresetbyKeyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrderManager) GetPresetbyKeyReturns(result1 datatypes.Product_Package_Preset, result2 error) {
	fake.getPresetbyKeyMutex.Lock()
	defer fake.getPresetbyKeyMutex.Unlock()
	fake.GetPresetbyKeyStub = nil
	fake.getPresetbyKeyReturns = struct {
		result1 datatypes.Product_Package_Preset
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetPresetbyKeyReturnsOnCall(i int, result1 datatypes.Product_Package_Preset, result2 error) {
	fake.getPresetbyKeyMutex.Lock()
	defer fake.getPresetbyKeyMutex.Unlock()
	fake.GetPresetbyKeyStub = nil
	if fake.getPresetbyKeyReturnsOnCall == nil {
		fake.getPresetbyKeyReturnsOnCall = make(map[int]struct {
			result1 datatypes.Product_Package_Preset
			result2 error
		})
	}
	fake.getPresetbyKeyReturnsOnCall[i] = struct {
		result1 datatypes.Product_Package_Preset
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetPriceIdList(arg1 string, arg2 []string, arg3 float64) ([]int, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.getPriceIdListMutex.Lock()
	ret, specificReturn := fake.getPriceIdListReturnsOnCall[len(fake.getPriceIdListArgsForCall)]
	fake.getPriceIdListArgsForCall = append(fake.getPriceIdListArgsForCall, struct {
		arg1 string
		arg2 []string
		arg3 float64
	}{arg1, arg2Copy, arg3})
	stub := fake.GetPriceIdListStub
	fakeReturns := fake.getPriceIdListReturns
	fake.recordInvocation("GetPriceIdList", []interface{}{arg1, arg2Copy, arg3})
	fake.getPriceIdListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GetPriceIdListCallCount() int {
	fake.getPriceIdListMutex.RLock()
	defer fake.getPriceIdListMutex.RUnlock()
	return len(fake.getPriceIdListArgsForCall)
}

func (fake *FakeOrderManager) GetPriceIdListCalls(stub func(string, []string, float64) ([]int, error)) {
	fake.getPriceIdListMutex.Lock()
	defer fake.getPriceIdListMutex.Unlock()
	fake.GetPriceIdListStub = stub
}

func (fake *FakeOrderManager) GetPriceIdListArgsForCall(i int) (string, []string, float64) {
	fake.getPriceIdListMutex.RLock()
	defer fake.getPriceIdListMutex.RUnlock()
	argsForCall := fake.getPriceIdListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOrderManager) GetPriceIdListReturns(result1 []int, result2 error) {
	fake.getPriceIdListMutex.Lock()
	defer fake.getPriceIdListMutex.Unlock()
	fake.GetPriceIdListStub = nil
	fake.getPriceIdListReturns = struct {
		result1 []int
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetPriceIdListReturnsOnCall(i int, result1 []int, result2 error) {
	fake.getPriceIdListMutex.Lock()
	defer fake.getPriceIdListMutex.Unlock()
	fake.GetPriceIdListStub = nil
	if fake.getPriceIdListReturnsOnCall == nil {
		fake.getPriceIdListReturnsOnCall = make(map[int]struct {
			result1 []int
			result2 error
		})
	}
	fake.getPriceIdListReturnsOnCall[i] = struct {
		result1 []int
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetQuote(arg1 int, arg2 string) (datatypes.Billing_Order_Quote, error) {
	fake.getQuoteMutex.Lock()
	ret, specificReturn := fake.getQuoteReturnsOnCall[len(fake.getQuoteArgsForCall)]
	fake.getQuoteArgsForCall = append(fake.getQuoteArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.GetQuoteStub
	fakeReturns := fake.getQuoteReturns
	fake.recordInvocation("GetQuote", []interface{}{arg1, arg2})
	fake.getQuoteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GetQuoteCallCount() int {
	fake.getQuoteMutex.RLock()
	defer fake.getQuoteMutex.RUnlock()
	return len(fake.getQuoteArgsForCall)
}

func (fake *FakeOrderManager) GetQuoteCalls(stub func(int, string) (datatypes.Billing_Order_Quote, error)) {
	fake.getQuoteMutex.Lock()
	defer fake.getQuoteMutex.Unlock()
	fake.GetQuoteStub = stub
}

func (fake *FakeOrderManager) GetQuoteArgsForCall(i int) (int, string) {
	fake.getQuoteMutex.RLock()
	defer fake.getQuoteMutex.RUnlock()
	argsForCall := fake.getQuoteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrderManager) GetQuoteReturns(result1 datatypes.Billing_Order_Quote, result2 error) {
	fake.getQuoteMutex.Lock()
	defer fake.getQuoteMutex.Unlock()
	fake.GetQuoteStub = nil
	fake.getQuoteReturns = struct {
		result1 datatypes.Billing_Order_Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetQuoteReturnsOnCall(i int, result1 datatypes.Billing_Order_Quote, result2 error) {
	fake.getQuoteMutex.Lock()
	defer fake.getQuoteMutex.Unlock()
	fake.GetQuoteStub = nil
	if fake.getQuoteReturnsOnCall == nil {
		fake.getQuoteReturnsOnCall = make(map[int]struct {
			result1 datatypes.Billing_Order_Quote
			result2 error
		})
	}
	fake.getQuoteReturnsOnCall[i] = struct {
		result1 datatypes.Billing_Order_Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetRecalculatedOrderContainer(arg1 int) (datatypes.Container_Product_Order, error) {
	fake.getRecalculatedOrderContainerMutex.Lock()
	ret, specificReturn := fake.getRecalculatedOrderContainerReturnsOnCall[len(fake.getRecalculatedOrderContainerArgsForCall)]
	fake.getRecalculatedOrderContainerArgsForCall = append(fake.getRecalculatedOrderContainerArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetRecalculatedOrderContainerStub
	fakeReturns := fake.getRecalculatedOrderContainerReturns
	fake.recordInvocation("GetRecalculatedOrderContainer", []interface{}{arg1})
	fake.getRecalculatedOrderContainerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) GetRecalculatedOrderContainerCallCount() int {
	fake.getRecalculatedOrderContainerMutex.RLock()
	defer fake.getRecalculatedOrderContainerMutex.RUnlock()
	return len(fake.getRecalculatedOrderContainerArgsForCall)
}

func (fake *FakeOrderManager) GetRecalculatedOrderContainerCalls(stub func(int) (datatypes.Container_Product_Order, error)) {
	fake.getRecalculatedOrderContainerMutex.Lock()
	defer fake.getRecalculatedOrderContainerMutex.Unlock()
	fake.GetRecalculatedOrderContainerStub = stub
}

func (fake *FakeOrderManager) GetRecalculatedOrderContainerArgsForCall(i int) int {
	fake.getRecalculatedOrderContainerMutex.RLock()
	defer fake.getRecalculatedOrderContainerMutex.RUnlock()
	argsForCall := fake.getRecalculatedOrderContainerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrderManager) GetRecalculatedOrderContainerReturns(result1 datatypes.Container_Product_Order, result2 error) {
	fake.getRecalculatedOrderContainerMutex.Lock()
	defer fake.getRecalculatedOrderContainerMutex.Unlock()
	fake.GetRecalculatedOrderContainerStub = nil
	fake.getRecalculatedOrderContainerReturns = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) GetRecalculatedOrderContainerReturnsOnCall(i int, result1 datatypes.Container_Product_Order, result2 error) {
	fake.getRecalculatedOrderContainerMutex.Lock()
	defer fake.getRecalculatedOrderContainerMutex.Unlock()
	fake.GetRecalculatedOrderContainerStub = nil
	if fake.getRecalculatedOrderContainerReturnsOnCall == nil {
		fake.getRecalculatedOrderContainerReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order
			result2 error
		})
	}
	fake.getRecalculatedOrderContainerReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) ListCategories(arg1 string) ([]datatypes.Product_Package_Order_Configuration, error) {
	fake.listCategoriesMutex.Lock()
	ret, specificReturn := fake.listCategoriesReturnsOnCall[len(fake.listCategoriesArgsForCall)]
	fake.listCategoriesArgsForCall = append(fake.listCategoriesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListCategoriesStub
	fakeReturns := fake.listCategoriesReturns
	fake.recordInvocation("ListCategories", []interface{}{arg1})
	fake.listCategoriesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) ListCategoriesCallCount() int {
	fake.listCategoriesMutex.RLock()
	defer fake.listCategoriesMutex.RUnlock()
	return len(fake.listCategoriesArgsForCall)
}

func (fake *FakeOrderManager) ListCategoriesCalls(stub func(string) ([]datatypes.Product_Package_Order_Configuration, error)) {
	fake.listCategoriesMutex.Lock()
	defer fake.listCategoriesMutex.Unlock()
	fake.ListCategoriesStub = stub
}

func (fake *FakeOrderManager) ListCategoriesArgsForCall(i int) string {
	fake.listCategoriesMutex.RLock()
	defer fake.listCategoriesMutex.RUnlock()
	argsForCall := fake.listCategoriesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrderManager) ListCategoriesReturns(result1 []datatypes.Product_Package_Order_Configuration, result2 error) {
	fake.listCategoriesMutex.Lock()
	defer fake.listCategoriesMutex.Unlock()
	fake.ListCategoriesStub = nil
	fake.listCategoriesReturns = struct {
		result1 []datatypes.Product_Package_Order_Configuration
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) ListCategoriesReturnsOnCall(i int, result1 []datatypes.Product_Package_Order_Configuration, result2 error) {
	fake.listCategoriesMutex.Lock()
	defer fake.listCategoriesMutex.Unlock()
	fake.ListCategoriesStub = nil
	if fake.listCategoriesReturnsOnCall == nil {
		fake.listCategoriesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Package_Order_Configuration
			result2 error
		})
	}
	fake.listCategoriesReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Package_Order_Configuration
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) ListItems(arg1 string, arg2 string, arg3 string) ([]datatypes.Product_Item, error) {
	fake.listItemsMutex.Lock()
	ret, specificReturn := fake.listItemsReturnsOnCall[len(fake.listItemsArgsForCall)]
	fake.listItemsArgsForCall = append(fake.listItemsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ListItemsStub
	fakeReturns := fake.listItemsReturns
	fake.recordInvocation("ListItems", []interface{}{arg1, arg2, arg3})
	fake.listItemsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) ListItemsCallCount() int {
	fake.listItemsMutex.RLock()
	defer fake.listItemsMutex.RUnlock()
	return len(fake.listItemsArgsForCall)
}

func (fake *FakeOrderManager) ListItemsCalls(stub func(string, string, string) ([]datatypes.Product_Item, error)) {
	fake.listItemsMutex.Lock()
	defer fake.listItemsMutex.Unlock()
	fake.ListItemsStub = stub
}

func (fake *FakeOrderManager) ListItemsArgsForCall(i int) (string, string, string) {
	fake.listItemsMutex.RLock()
	defer fake.listItemsMutex.RUnlock()
	argsForCall := fake.listItemsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOrderManager) ListItemsReturns(result1 []datatypes.Product_Item, result2 error) {
	fake.listItemsMutex.Lock()
	defer fake.listItemsMutex.Unlock()
	fake.ListItemsStub = nil
	fake.listItemsReturns = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) ListItemsReturnsOnCall(i int, result1 []datatypes.Product_Item, result2 error) {
	fake.listItemsMutex.Lock()
	defer fake.listItemsMutex.Unlock()
	fake.ListItemsStub = nil
	if fake.listItemsReturnsOnCall == nil {
		fake.listItemsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Item
			result2 error
		})
	}
	fake.listItemsReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) ListPackage(arg1 string, arg2 string) ([]datatypes.Product_Package, error) {
	fake.listPackageMutex.Lock()
	ret, specificReturn := fake.listPackageReturnsOnCall[len(fake.listPackageArgsForCall)]
	fake.listPackageArgsForCall = append(fake.listPackageArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.ListPackageStub
	fakeReturns := fake.listPackageReturns
	fake.recordInvocation("ListPackage", []interface{}{arg1, arg2})
	fake.listPackageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) ListPackageCallCount() int {
	fake.listPackageMutex.RLock()
	defer fake.listPackageMutex.RUnlock()
	return len(fake.listPackageArgsForCall)
}

func (fake *FakeOrderManager) ListPackageCalls(stub func(string, string) ([]datatypes.Product_Package, error)) {
	fake.listPackageMutex.Lock()
	defer fake.listPackageMutex.Unlock()
	fake.ListPackageStub = stub
}

func (fake *FakeOrderManager) ListPackageArgsForCall(i int) (string, string) {
	fake.listPackageMutex.RLock()
	defer fake.listPackageMutex.RUnlock()
	argsForCall := fake.listPackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrderManager) ListPackageReturns(result1 []datatypes.Product_Package, result2 error) {
	fake.listPackageMutex.Lock()
	defer fake.listPackageMutex.Unlock()
	fake.ListPackageStub = nil
	fake.listPackageReturns = struct {
		result1 []datatypes.Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) ListPackageReturnsOnCall(i int, result1 []datatypes.Product_Package, result2 error) {
	fake.listPackageMutex.Lock()
	defer fake.listPackageMutex.Unlock()
	fake.ListPackageStub = nil
	if fake.listPackageReturnsOnCall == nil {
		fake.listPackageReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Package
			result2 error
		})
	}
	fake.listPackageReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Package
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) ListPreset(arg1 string, arg2 string) ([]datatypes.Product_Package_Preset, error) {
	fake.listPresetMutex.Lock()
	ret, specificReturn := fake.listPresetReturnsOnCall[len(fake.listPresetArgsForCall)]
	fake.listPresetArgsForCall = append(fake.listPresetArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.ListPresetStub
	fakeReturns := fake.listPresetReturns
	fake.recordInvocation("ListPreset", []interface{}{arg1, arg2})
	fake.listPresetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) ListPresetCallCount() int {
	fake.listPresetMutex.RLock()
	defer fake.listPresetMutex.RUnlock()
	return len(fake.listPresetArgsForCall)
}

func (fake *FakeOrderManager) ListPresetCalls(stub func(string, string) ([]datatypes.Product_Package_Preset, error)) {
	fake.listPresetMutex.Lock()
	defer fake.listPresetMutex.Unlock()
	fake.ListPresetStub = stub
}

func (fake *FakeOrderManager) ListPresetArgsForCall(i int) (string, string) {
	fake.listPresetMutex.RLock()
	defer fake.listPresetMutex.RUnlock()
	argsForCall := fake.listPresetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrderManager) ListPresetReturns(result1 []datatypes.Product_Package_Preset, result2 error) {
	fake.listPresetMutex.Lock()
	defer fake.listPresetMutex.Unlock()
	fake.ListPresetStub = nil
	fake.listPresetReturns = struct {
		result1 []datatypes.Product_Package_Preset
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) ListPresetReturnsOnCall(i int, result1 []datatypes.Product_Package_Preset, result2 error) {
	fake.listPresetMutex.Lock()
	defer fake.listPresetMutex.Unlock()
	fake.ListPresetStub = nil
	if fake.listPresetReturnsOnCall == nil {
		fake.listPresetReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Package_Preset
			result2 error
		})
	}
	fake.listPresetReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Package_Preset
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) OrderQuote(arg1 int, arg2 datatypes.Container_Product_Order) (datatypes.Container_Product_Order_Receipt, error) {
	fake.orderQuoteMutex.Lock()
	ret, specificReturn := fake.orderQuoteReturnsOnCall[len(fake.orderQuoteArgsForCall)]
	fake.orderQuoteArgsForCall = append(fake.orderQuoteArgsForCall, struct {
		arg1 int
		arg2 datatypes.Container_Product_Order
	}{arg1, arg2})
	stub := fake.OrderQuoteStub
	fakeReturns := fake.orderQuoteReturns
	fake.recordInvocation("OrderQuote", []interface{}{arg1, arg2})
	fake.orderQuoteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) OrderQuoteCallCount() int {
	fake.orderQuoteMutex.RLock()
	defer fake.orderQuoteMutex.RUnlock()
	return len(fake.orderQuoteArgsForCall)
}

func (fake *FakeOrderManager) OrderQuoteCalls(stub func(int, datatypes.Container_Product_Order) (datatypes.Container_Product_Order_Receipt, error)) {
	fake.orderQuoteMutex.Lock()
	defer fake.orderQuoteMutex.Unlock()
	fake.OrderQuoteStub = stub
}

func (fake *FakeOrderManager) OrderQuoteArgsForCall(i int) (int, datatypes.Container_Product_Order) {
	fake.orderQuoteMutex.RLock()
	defer fake.orderQuoteMutex.RUnlock()
	argsForCall := fake.orderQuoteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrderManager) OrderQuoteReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.orderQuoteMutex.Lock()
	defer fake.orderQuoteMutex.Unlock()
	fake.OrderQuoteStub = nil
	fake.orderQuoteReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) OrderQuoteReturnsOnCall(i int, result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.orderQuoteMutex.Lock()
	defer fake.orderQuoteMutex.Unlock()
	fake.OrderQuoteStub = nil
	if fake.orderQuoteReturnsOnCall == nil {
		fake.orderQuoteReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order_Receipt
			result2 error
		})
	}
	fake.orderQuoteReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) PackageLocation(arg1 string) ([]datatypes.Location_Region, error) {
	fake.packageLocationMutex.Lock()
	ret, specificReturn := fake.packageLocationReturnsOnCall[len(fake.packageLocationArgsForCall)]
	fake.packageLocationArgsForCall = append(fake.packageLocationArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PackageLocationStub
	fakeReturns := fake.packageLocationReturns
	fake.recordInvocation("PackageLocation", []interface{}{arg1})
	fake.packageLocationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) PackageLocationCallCount() int {
	fake.packageLocationMutex.RLock()
	defer fake.packageLocationMutex.RUnlock()
	return len(fake.packageLocationArgsForCall)
}

func (fake *FakeOrderManager) PackageLocationCalls(stub func(string) ([]datatypes.Location_Region, error)) {
	fake.packageLocationMutex.Lock()
	defer fake.packageLocationMutex.Unlock()
	fake.PackageLocationStub = stub
}

func (fake *FakeOrderManager) PackageLocationArgsForCall(i int) string {
	fake.packageLocationMutex.RLock()
	defer fake.packageLocationMutex.RUnlock()
	argsForCall := fake.packageLocationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrderManager) PackageLocationReturns(result1 []datatypes.Location_Region, result2 error) {
	fake.packageLocationMutex.Lock()
	defer fake.packageLocationMutex.Unlock()
	fake.PackageLocationStub = nil
	fake.packageLocationReturns = struct {
		result1 []datatypes.Location_Region
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) PackageLocationReturnsOnCall(i int, result1 []datatypes.Location_Region, result2 error) {
	fake.packageLocationMutex.Lock()
	defer fake.packageLocationMutex.Unlock()
	fake.PackageLocationStub = nil
	if fake.packageLocationReturnsOnCall == nil {
		fake.packageLocationReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Location_Region
			result2 error
		})
	}
	fake.packageLocationReturnsOnCall[i] = struct {
		result1 []datatypes.Location_Region
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) PlaceOrder(arg1 string, arg2 string, arg3 []string, arg4 string, arg5 bool, arg6 string, arg7 interface{}, arg8 int) (datatypes.Container_Product_Order_Receipt, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.placeOrderMutex.Lock()
	ret, specificReturn := fake.placeOrderReturnsOnCall[len(fake.placeOrderArgsForCall)]
	fake.placeOrderArgsForCall = append(fake.placeOrderArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
		arg5 bool
		arg6 string
		arg7 interface{}
		arg8 int
	}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7, arg8})
	stub := fake.PlaceOrderStub
	fakeReturns := fake.placeOrderReturns
	fake.recordInvocation("PlaceOrder", []interface{}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7, arg8})
	fake.placeOrderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) PlaceOrderCallCount() int {
	fake.placeOrderMutex.RLock()
	defer fake.placeOrderMutex.RUnlock()
	return len(fake.placeOrderArgsForCall)
}

func (fake *FakeOrderManager) PlaceOrderCalls(stub func(string, string, []string, string, bool, string, interface{}, int) (datatypes.Container_Product_Order_Receipt, error)) {
	fake.placeOrderMutex.Lock()
	defer fake.placeOrderMutex.Unlock()
	fake.PlaceOrderStub = stub
}

func (fake *FakeOrderManager) PlaceOrderArgsForCall(i int) (string, string, []string, string, bool, string, interface{}, int) {
	fake.placeOrderMutex.RLock()
	defer fake.placeOrderMutex.RUnlock()
	argsForCall := fake.placeOrderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *FakeOrderManager) PlaceOrderReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.placeOrderMutex.Lock()
	defer fake.placeOrderMutex.Unlock()
	fake.PlaceOrderStub = nil
	fake.placeOrderReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) PlaceOrderReturnsOnCall(i int, result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.placeOrderMutex.Lock()
	defer fake.placeOrderMutex.Unlock()
	fake.PlaceOrderStub = nil
	if fake.placeOrderReturnsOnCall == nil {
		fake.placeOrderReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order_Receipt
			result2 error
		})
	}
	fake.placeOrderReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) PlaceQuote(arg1 string, arg2 string, arg3 []string, arg4 string, arg5 string, arg6 string, arg7 interface{}, arg8 bool) (datatypes.Container_Product_Order_Receipt, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.placeQuoteMutex.Lock()
	ret, specificReturn := fake.placeQuoteReturnsOnCall[len(fake.placeQuoteArgsForCall)]
	fake.placeQuoteArgsForCall = append(fake.placeQuoteArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
		arg5 string
		arg6 string
		arg7 interface{}
		arg8 bool
	}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7, arg8})
	stub := fake.PlaceQuoteStub
	fakeReturns := fake.placeQuoteReturns
	fake.recordInvocation("PlaceQuote", []interface{}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7, arg8})
	fake.placeQuoteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) PlaceQuoteCallCount() int {
	fake.placeQuoteMutex.RLock()
	defer fake.placeQuoteMutex.RUnlock()
	return len(fake.placeQuoteArgsForCall)
}

func (fake *FakeOrderManager) PlaceQuoteCalls(stub func(string, string, []string, string, string, string, interface{}, bool) (datatypes.Container_Product_Order_Receipt, error)) {
	fake.placeQuoteMutex.Lock()
	defer fake.placeQuoteMutex.Unlock()
	fake.PlaceQuoteStub = stub
}

func (fake *FakeOrderManager) PlaceQuoteArgsForCall(i int) (string, string, []string, string, string, string, interface{}, bool) {
	fake.placeQuoteMutex.RLock()
	defer fake.placeQuoteMutex.RUnlock()
	argsForCall := fake.placeQuoteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *FakeOrderManager) PlaceQuoteReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.placeQuoteMutex.Lock()
	defer fake.placeQuoteMutex.Unlock()
	fake.PlaceQuoteStub = nil
	fake.placeQuoteReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) PlaceQuoteReturnsOnCall(i int, result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.placeQuoteMutex.Lock()
	defer fake.placeQuoteMutex.Unlock()
	fake.PlaceQuoteStub = nil
	if fake.placeQuoteReturnsOnCall == nil {
		fake.placeQuoteReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order_Receipt
			result2 error
		})
	}
	fake.placeQuoteReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) SaveQuote(arg1 int) (datatypes.Billing_Order_Quote, error) {
	fake.saveQuoteMutex.Lock()
	ret, specificReturn := fake.saveQuoteReturnsOnCall[len(fake.saveQuoteArgsForCall)]
	fake.saveQuoteArgsForCall = append(fake.saveQuoteArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.SaveQuoteStub
	fakeReturns := fake.saveQuoteReturns
	fake.recordInvocation("SaveQuote", []interface{}{arg1})
	fake.saveQuoteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) SaveQuoteCallCount() int {
	fake.saveQuoteMutex.RLock()
	defer fake.saveQuoteMutex.RUnlock()
	return len(fake.saveQuoteArgsForCall)
}

func (fake *FakeOrderManager) SaveQuoteCalls(stub func(int) (datatypes.Billing_Order_Quote, error)) {
	fake.saveQuoteMutex.Lock()
	defer fake.saveQuoteMutex.Unlock()
	fake.SaveQuoteStub = stub
}

func (fake *FakeOrderManager) SaveQuoteArgsForCall(i int) int {
	fake.saveQuoteMutex.RLock()
	defer fake.saveQuoteMutex.RUnlock()
	argsForCall := fake.saveQuoteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOrderManager) SaveQuoteReturns(result1 datatypes.Billing_Order_Quote, result2 error) {
	fake.saveQuoteMutex.Lock()
	defer fake.saveQuoteMutex.Unlock()
	fake.SaveQuoteStub = nil
	fake.saveQuoteReturns = struct {
		result1 datatypes.Billing_Order_Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) SaveQuoteReturnsOnCall(i int, result1 datatypes.Billing_Order_Quote, result2 error) {
	fake.saveQuoteMutex.Lock()
	defer fake.saveQuoteMutex.Unlock()
	fake.SaveQuoteStub = nil
	if fake.saveQuoteReturnsOnCall == nil {
		fake.saveQuoteReturnsOnCall = make(map[int]struct {
			result1 datatypes.Billing_Order_Quote
			result2 error
		})
	}
	fake.saveQuoteReturnsOnCall[i] = struct {
		result1 datatypes.Billing_Order_Quote
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) VerifyOrder(arg1 int, arg2 datatypes.Container_Product_Order) (datatypes.Container_Product_Order, error) {
	fake.verifyOrderMutex.Lock()
	ret, specificReturn := fake.verifyOrderReturnsOnCall[len(fake.verifyOrderArgsForCall)]
	fake.verifyOrderArgsForCall = append(fake.verifyOrderArgsForCall, struct {
		arg1 int
		arg2 datatypes.Container_Product_Order
	}{arg1, arg2})
	stub := fake.VerifyOrderStub
	fakeReturns := fake.verifyOrderReturns
	fake.recordInvocation("VerifyOrder", []interface{}{arg1, arg2})
	fake.verifyOrderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) VerifyOrderCallCount() int {
	fake.verifyOrderMutex.RLock()
	defer fake.verifyOrderMutex.RUnlock()
	return len(fake.verifyOrderArgsForCall)
}

func (fake *FakeOrderManager) VerifyOrderCalls(stub func(int, datatypes.Container_Product_Order) (datatypes.Container_Product_Order, error)) {
	fake.verifyOrderMutex.Lock()
	defer fake.verifyOrderMutex.Unlock()
	fake.VerifyOrderStub = stub
}

func (fake *FakeOrderManager) VerifyOrderArgsForCall(i int) (int, datatypes.Container_Product_Order) {
	fake.verifyOrderMutex.RLock()
	defer fake.verifyOrderMutex.RUnlock()
	argsForCall := fake.verifyOrderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOrderManager) VerifyOrderReturns(result1 datatypes.Container_Product_Order, result2 error) {
	fake.verifyOrderMutex.Lock()
	defer fake.verifyOrderMutex.Unlock()
	fake.VerifyOrderStub = nil
	fake.verifyOrderReturns = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) VerifyOrderReturnsOnCall(i int, result1 datatypes.Container_Product_Order, result2 error) {
	fake.verifyOrderMutex.Lock()
	defer fake.verifyOrderMutex.Unlock()
	fake.VerifyOrderStub = nil
	if fake.verifyOrderReturnsOnCall == nil {
		fake.verifyOrderReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order
			result2 error
		})
	}
	fake.verifyOrderReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) VerifyPlaceOrder(arg1 string, arg2 string, arg3 []string, arg4 string, arg5 bool, arg6 string, arg7 interface{}, arg8 int) (datatypes.Container_Product_Order, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.verifyPlaceOrderMutex.Lock()
	ret, specificReturn := fake.verifyPlaceOrderReturnsOnCall[len(fake.verifyPlaceOrderArgsForCall)]
	fake.verifyPlaceOrderArgsForCall = append(fake.verifyPlaceOrderArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
		arg4 string
		arg5 bool
		arg6 string
		arg7 interface{}
		arg8 int
	}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7, arg8})
	stub := fake.VerifyPlaceOrderStub
	fakeReturns := fake.verifyPlaceOrderReturns
	fake.recordInvocation("VerifyPlaceOrder", []interface{}{arg1, arg2, arg3Copy, arg4, arg5, arg6, arg7, arg8})
	fake.verifyPlaceOrderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOrderManager) VerifyPlaceOrderCallCount() int {
	fake.verifyPlaceOrderMutex.RLock()
	defer fake.verifyPlaceOrderMutex.RUnlock()
	return len(fake.verifyPlaceOrderArgsForCall)
}

func (fake *FakeOrderManager) VerifyPlaceOrderCalls(stub func(string, string, []string, string, bool, string, interface{}, int) (datatypes.Container_Product_Order, error)) {
	fake.verifyPlaceOrderMutex.Lock()
	defer fake.verifyPlaceOrderMutex.Unlock()
	fake.VerifyPlaceOrderStub = stub
}

func (fake *FakeOrderManager) VerifyPlaceOrderArgsForCall(i int) (string, string, []string, string, bool, string, interface{}, int) {
	fake.verifyPlaceOrderMutex.RLock()
	defer fake.verifyPlaceOrderMutex.RUnlock()
	argsForCall := fake.verifyPlaceOrderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *FakeOrderManager) VerifyPlaceOrderReturns(result1 datatypes.Container_Product_Order, result2 error) {
	fake.verifyPlaceOrderMutex.Lock()
	defer fake.verifyPlaceOrderMutex.Unlock()
	fake.VerifyPlaceOrderStub = nil
	fake.verifyPlaceOrderReturns = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) VerifyPlaceOrderReturnsOnCall(i int, result1 datatypes.Container_Product_Order, result2 error) {
	fake.verifyPlaceOrderMutex.Lock()
	defer fake.verifyPlaceOrderMutex.Unlock()
	fake.VerifyPlaceOrderStub = nil
	if fake.verifyPlaceOrderReturnsOnCall == nil {
		fake.verifyPlaceOrderReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order
			result2 error
		})
	}
	fake.verifyPlaceOrderReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order
		result2 error
	}{result1, result2}
}

func (fake *FakeOrderManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateOrderMutex.RLock()
	defer fake.generateOrderMutex.RUnlock()
	fake.getActiveQuotesMutex.RLock()
	defer fake.getActiveQuotesMutex.RUnlock()
	fake.getLocationMutex.RLock()
	defer fake.getLocationMutex.RUnlock()
	fake.getOrderDetailMutex.RLock()
	defer fake.getOrderDetailMutex.RUnlock()
	fake.getPackageByKeyMutex.RLock()
	defer fake.getPackageByKeyMutex.RUnlock()
	fake.getPresetPricesMutex.RLock()
	defer fake.getPresetPricesMutex.RUnlock()
	fake.getPresetbyKeyMutex.RLock()
	defer fake.getPresetbyKeyMutex.RUnlock()
	fake.getPriceIdListMutex.RLock()
	defer fake.getPriceIdListMutex.RUnlock()
	fake.getQuoteMutex.RLock()
	defer fake.getQuoteMutex.RUnlock()
	fake.getRecalculatedOrderContainerMutex.RLock()
	defer fake.getRecalculatedOrderContainerMutex.RUnlock()
	fake.listCategoriesMutex.RLock()
	defer fake.listCategoriesMutex.RUnlock()
	fake.listItemsMutex.RLock()
	defer fake.listItemsMutex.RUnlock()
	fake.listPackageMutex.RLock()
	defer fake.listPackageMutex.RUnlock()
	fake.listPresetMutex.RLock()
	defer fake.listPresetMutex.RUnlock()
	fake.orderQuoteMutex.RLock()
	defer fake.orderQuoteMutex.RUnlock()
	fake.packageLocationMutex.RLock()
	defer fake.packageLocationMutex.RUnlock()
	fake.placeOrderMutex.RLock()
	defer fake.placeOrderMutex.RUnlock()
	fake.placeQuoteMutex.RLock()
	defer fake.placeQuoteMutex.RUnlock()
	fake.saveQuoteMutex.RLock()
	defer fake.saveQuoteMutex.RUnlock()
	fake.verifyOrderMutex.RLock()
	defer fake.verifyOrderMutex.RUnlock()
	fake.verifyPlaceOrderMutex.RLock()
	defer fake.verifyPlaceOrderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOrderManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.OrderManager = new(FakeOrderManager)
