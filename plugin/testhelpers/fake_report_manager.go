// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeReportManager struct {
	GetHardwareServersStub        func(string) ([]datatypes.Hardware, error)
	getHardwareServersMutex       sync.RWMutex
	getHardwareServersArgsForCall []struct {
		arg1 string
	}
	getHardwareServersReturns struct {
		result1 []datatypes.Hardware
		result2 error
	}
	getHardwareServersReturnsOnCall map[int]struct {
		result1 []datatypes.Hardware
		result2 error
	}
	GetMetricTrackingSummaryDataStub        func(int, datatypes.Time, datatypes.Time, []datatypes.Container_Metric_Data_Type) ([]datatypes.Metric_Tracking_Object_Data, error)
	getMetricTrackingSummaryDataMutex       sync.RWMutex
	getMetricTrackingSummaryDataArgsForCall []struct {
		arg1 int
		arg2 datatypes.Time
		arg3 datatypes.Time
		arg4 []datatypes.Container_Metric_Data_Type
	}
	getMetricTrackingSummaryDataReturns struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}
	getMetricTrackingSummaryDataReturnsOnCall map[int]struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}
	GetVirtualDedicatedRacksStub        func(string) ([]datatypes.Network_Bandwidth_Version1_Allotment, error)
	getVirtualDedicatedRacksMutex       sync.RWMutex
	getVirtualDedicatedRacksArgsForCall []struct {
		arg1 string
	}
	getVirtualDedicatedRacksReturns struct {
		result1 []datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}
	getVirtualDedicatedRacksReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}
	GetVirtualGuestsStub        func(string) ([]datatypes.Virtual_Guest, error)
	getVirtualGuestsMutex       sync.RWMutex
	getVirtualGuestsArgsForCall []struct {
		arg1 string
	}
	getVirtualGuestsReturns struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	getVirtualGuestsReturnsOnCall map[int]struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReportManager) GetHardwareServers(arg1 string) ([]datatypes.Hardware, error) {
	fake.getHardwareServersMutex.Lock()
	ret, specificReturn := fake.getHardwareServersReturnsOnCall[len(fake.getHardwareServersArgsForCall)]
	fake.getHardwareServersArgsForCall = append(fake.getHardwareServersArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetHardwareServersStub
	fakeReturns := fake.getHardwareServersReturns
	fake.recordInvocation("GetHardwareServers", []interface{}{arg1})
	fake.getHardwareServersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReportManager) GetHardwareServersCallCount() int {
	fake.getHardwareServersMutex.RLock()
	defer fake.getHardwareServersMutex.RUnlock()
	return len(fake.getHardwareServersArgsForCall)
}

func (fake *FakeReportManager) GetHardwareServersCalls(stub func(string) ([]datatypes.Hardware, error)) {
	fake.getHardwareServersMutex.Lock()
	defer fake.getHardwareServersMutex.Unlock()
	fake.GetHardwareServersStub = stub
}

func (fake *FakeReportManager) GetHardwareServersArgsForCall(i int) string {
	fake.getHardwareServersMutex.RLock()
	defer fake.getHardwareServersMutex.RUnlock()
	argsForCall := fake.getHardwareServersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReportManager) GetHardwareServersReturns(result1 []datatypes.Hardware, result2 error) {
	fake.getHardwareServersMutex.Lock()
	defer fake.getHardwareServersMutex.Unlock()
	fake.GetHardwareServersStub = nil
	fake.getHardwareServersReturns = struct {
		result1 []datatypes.Hardware
		result2 error
	}{result1, result2}
}

func (fake *FakeReportManager) GetHardwareServersReturnsOnCall(i int, result1 []datatypes.Hardware, result2 error) {
	fake.getHardwareServersMutex.Lock()
	defer fake.getHardwareServersMutex.Unlock()
	fake.GetHardwareServersStub = nil
	if fake.getHardwareServersReturnsOnCall == nil {
		fake.getHardwareServersReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Hardware
			result2 error
		})
	}
	fake.getHardwareServersReturnsOnCall[i] = struct {
		result1 []datatypes.Hardware
		result2 error
	}{result1, result2}
}

func (fake *FakeReportManager) GetMetricTrackingSummaryData(arg1 int, arg2 datatypes.Time, arg3 datatypes.Time, arg4 []datatypes.Container_Metric_Data_Type) ([]datatypes.Metric_Tracking_Object_Data, error) {
	var arg4Copy []datatypes.Container_Metric_Data_Type
	if arg4 != nil {
		arg4Copy = make([]datatypes.Container_Metric_Data_Type, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.getMetricTrackingSummaryDataMutex.Lock()
	ret, specificReturn := fake.getMetricTrackingSummaryDataReturnsOnCall[len(fake.getMetricTrackingSummaryDataArgsForCall)]
	fake.getMetricTrackingSummaryDataArgsForCall = append(fake.getMetricTrackingSummaryDataArgsForCall, struct {
		arg1 int
		arg2 datatypes.Time
		arg3 datatypes.Time
		arg4 []datatypes.Container_Metric_Data_Type
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.GetMetricTrackingSummaryDataStub
	fakeReturns := fake.getMetricTrackingSummaryDataReturns
	fake.recordInvocation("GetMetricTrackingSummaryData", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.getMetricTrackingSummaryDataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReportManager) GetMetricTrackingSummaryDataCallCount() int {
	fake.getMetricTrackingSummaryDataMutex.RLock()
	defer fake.getMetricTrackingSummaryDataMutex.RUnlock()
	return len(fake.getMetricTrackingSummaryDataArgsForCall)
}

func (fake *FakeReportManager) GetMetricTrackingSummaryDataCalls(stub func(int, datatypes.Time, datatypes.Time, []datatypes.Container_Metric_Data_Type) ([]datatypes.Metric_Tracking_Object_Data, error)) {
	fake.getMetricTrackingSummaryDataMutex.Lock()
	defer fake.getMetricTrackingSummaryDataMutex.Unlock()
	fake.GetMetricTrackingSummaryDataStub = stub
}

func (fake *FakeReportManager) GetMetricTrackingSummaryDataArgsForCall(i int) (int, datatypes.Time, datatypes.Time, []datatypes.Container_Metric_Data_Type) {
	fake.getMetricTrackingSummaryDataMutex.RLock()
	defer fake.getMetricTrackingSummaryDataMutex.RUnlock()
	argsForCall := fake.getMetricTrackingSummaryDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeReportManager) GetMetricTrackingSummaryDataReturns(result1 []datatypes.Metric_Tracking_Object_Data, result2 error) {
	fake.getMetricTrackingSummaryDataMutex.Lock()
	defer fake.getMetricTrackingSummaryDataMutex.Unlock()
	fake.GetMetricTrackingSummaryDataStub = nil
	fake.getMetricTrackingSummaryDataReturns = struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}{result1, result2}
}

func (fake *FakeReportManager) GetMetricTrackingSummaryDataReturnsOnCall(i int, result1 []datatypes.Metric_Tracking_Object_Data, result2 error) {
	fake.getMetricTrackingSummaryDataMutex.Lock()
	defer fake.getMetricTrackingSummaryDataMutex.Unlock()
	fake.GetMetricTrackingSummaryDataStub = nil
	if fake.getMetricTrackingSummaryDataReturnsOnCall == nil {
		fake.getMetricTrackingSummaryDataReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Metric_Tracking_Object_Data
			result2 error
		})
	}
	fake.getMetricTrackingSummaryDataReturnsOnCall[i] = struct {
		result1 []datatypes.Metric_Tracking_Object_Data
		result2 error
	}{result1, result2}
}

func (fake *FakeReportManager) GetVirtualDedicatedRacks(arg1 string) ([]datatypes.Network_Bandwidth_Version1_Allotment, error) {
	fake.getVirtualDedicatedRacksMutex.Lock()
	ret, specificReturn := fake.getVirtualDedicatedRacksReturnsOnCall[len(fake.getVirtualDedicatedRacksArgsForCall)]
	fake.getVirtualDedicatedRacksArgsForCall = append(fake.getVirtualDedicatedRacksArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetVirtualDedicatedRacksStub
	fakeReturns := fake.getVirtualDedicatedRacksReturns
	fake.recordInvocation("GetVirtualDedicatedRacks", []interface{}{arg1})
	fake.getVirtualDedicatedRacksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReportManager) GetVirtualDedicatedRacksCallCount() int {
	fake.getVirtualDedicatedRacksMutex.RLock()
	defer fake.getVirtualDedicatedRacksMutex.RUnlock()
	return len(fake.getVirtualDedicatedRacksArgsForCall)
}

func (fake *FakeReportManager) GetVirtualDedicatedRacksCalls(stub func(string) ([]datatypes.Network_Bandwidth_Version1_Allotment, error)) {
	fake.getVirtualDedicatedRacksMutex.Lock()
	defer fake.getVirtualDedicatedRacksMutex.Unlock()
	fake.GetVirtualDedicatedRacksStub = stub
}

func (fake *FakeReportManager) GetVirtualDedicatedRacksArgsForCall(i int) string {
	fake.getVirtualDedicatedRacksMutex.RLock()
	defer fake.getVirtualDedicatedRacksMutex.RUnlock()
	argsForCall := fake.getVirtualDedicatedRacksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReportManager) GetVirtualDedicatedRacksReturns(result1 []datatypes.Network_Bandwidth_Version1_Allotment, result2 error) {
	fake.getVirtualDedicatedRacksMutex.Lock()
	defer fake.getVirtualDedicatedRacksMutex.Unlock()
	fake.GetVirtualDedicatedRacksStub = nil
	fake.getVirtualDedicatedRacksReturns = struct {
		result1 []datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}{result1, result2}
}

func (fake *FakeReportManager) GetVirtualDedicatedRacksReturnsOnCall(i int, result1 []datatypes.Network_Bandwidth_Version1_Allotment, result2 error) {
	fake.getVirtualDedicatedRacksMutex.Lock()
	defer fake.getVirtualDedicatedRacksMutex.Unlock()
	fake.GetVirtualDedicatedRacksStub = nil
	if fake.getVirtualDedicatedRacksReturnsOnCall == nil {
		fake.getVirtualDedicatedRacksReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Bandwidth_Version1_Allotment
			result2 error
		})
	}
	fake.getVirtualDedicatedRacksReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Bandwidth_Version1_Allotment
		result2 error
	}{result1, result2}
}

func (fake *FakeReportManager) GetVirtualGuests(arg1 string) ([]datatypes.Virtual_Guest, error) {
	fake.getVirtualGuestsMutex.Lock()
	ret, specificReturn := fake.getVirtualGuestsReturnsOnCall[len(fake.getVirtualGuestsArgsForCall)]
	fake.getVirtualGuestsArgsForCall = append(fake.getVirtualGuestsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetVirtualGuestsStub
	fakeReturns := fake.getVirtualGuestsReturns
	fake.recordInvocation("GetVirtualGuests", []interface{}{arg1})
	fake.getVirtualGuestsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReportManager) GetVirtualGuestsCallCount() int {
	fake.getVirtualGuestsMutex.RLock()
	defer fake.getVirtualGuestsMutex.RUnlock()
	return len(fake.getVirtualGuestsArgsForCall)
}

func (fake *FakeReportManager) GetVirtualGuestsCalls(stub func(string) ([]datatypes.Virtual_Guest, error)) {
	fake.getVirtualGuestsMutex.Lock()
	defer fake.getVirtualGuestsMutex.Unlock()
	fake.GetVirtualGuestsStub = stub
}

func (fake *FakeReportManager) GetVirtualGuestsArgsForCall(i int) string {
	fake.getVirtualGuestsMutex.RLock()
	defer fake.getVirtualGuestsMutex.RUnlock()
	argsForCall := fake.getVirtualGuestsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReportManager) GetVirtualGuestsReturns(result1 []datatypes.Virtual_Guest, result2 error) {
	fake.getVirtualGuestsMutex.Lock()
	defer fake.getVirtualGuestsMutex.Unlock()
	fake.GetVirtualGuestsStub = nil
	fake.getVirtualGuestsReturns = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportManager) GetVirtualGuestsReturnsOnCall(i int, result1 []datatypes.Virtual_Guest, result2 error) {
	fake.getVirtualGuestsMutex.Lock()
	defer fake.getVirtualGuestsMutex.Unlock()
	fake.GetVirtualGuestsStub = nil
	if fake.getVirtualGuestsReturnsOnCall == nil {
		fake.getVirtualGuestsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Virtual_Guest
			result2 error
		})
	}
	fake.getVirtualGuestsReturnsOnCall[i] = struct {
		result1 []datatypes.Virtual_Guest
		result2 error
	}{result1, result2}
}

func (fake *FakeReportManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getHardwareServersMutex.RLock()
	defer fake.getHardwareServersMutex.RUnlock()
	fake.getMetricTrackingSummaryDataMutex.RLock()
	defer fake.getMetricTrackingSummaryDataMutex.RUnlock()
	fake.getVirtualDedicatedRacksMutex.RLock()
	defer fake.getVirtualDedicatedRacksMutex.RUnlock()
	fake.getVirtualGuestsMutex.RLock()
	defer fake.getVirtualGuestsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReportManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.ReportManager = new(FakeReportManager)
