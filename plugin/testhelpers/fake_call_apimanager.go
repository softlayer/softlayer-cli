// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/sl"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeCallAPIManager struct {
	CallAPIStub        func(string, string, sl.Options, string) ([]byte, error)
	callAPIMutex       sync.RWMutex
	callAPIArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 sl.Options
		arg4 string
	}
	callAPIReturns struct {
		result1 []byte
		result2 error
	}
	callAPIReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCallAPIManager) CallAPI(arg1 string, arg2 string, arg3 sl.Options, arg4 string) ([]byte, error) {
	fake.callAPIMutex.Lock()
	ret, specificReturn := fake.callAPIReturnsOnCall[len(fake.callAPIArgsForCall)]
	fake.callAPIArgsForCall = append(fake.callAPIArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 sl.Options
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.CallAPIStub
	fakeReturns := fake.callAPIReturns
	fake.recordInvocation("CallAPI", []interface{}{arg1, arg2, arg3, arg4})
	fake.callAPIMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCallAPIManager) CallAPICallCount() int {
	fake.callAPIMutex.RLock()
	defer fake.callAPIMutex.RUnlock()
	return len(fake.callAPIArgsForCall)
}

func (fake *FakeCallAPIManager) CallAPICalls(stub func(string, string, sl.Options, string) ([]byte, error)) {
	fake.callAPIMutex.Lock()
	defer fake.callAPIMutex.Unlock()
	fake.CallAPIStub = stub
}

func (fake *FakeCallAPIManager) CallAPIArgsForCall(i int) (string, string, sl.Options, string) {
	fake.callAPIMutex.RLock()
	defer fake.callAPIMutex.RUnlock()
	argsForCall := fake.callAPIArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCallAPIManager) CallAPIReturns(result1 []byte, result2 error) {
	fake.callAPIMutex.Lock()
	defer fake.callAPIMutex.Unlock()
	fake.CallAPIStub = nil
	fake.callAPIReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCallAPIManager) CallAPIReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.callAPIMutex.Lock()
	defer fake.callAPIMutex.Unlock()
	fake.CallAPIStub = nil
	if fake.callAPIReturnsOnCall == nil {
		fake.callAPIReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.callAPIReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeCallAPIManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.callAPIMutex.RLock()
	defer fake.callAPIMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCallAPIManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.CallAPIManager = new(FakeCallAPIManager)
