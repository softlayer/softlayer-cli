// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.ibm.com/SoftLayer/softlayer-cli/plugin/i18n/detection"
)

type FakeDetector struct {
	DetectLanguageStub        func() string
	detectLanguageMutex       sync.RWMutex
	detectLanguageArgsForCall []struct {
	}
	detectLanguageReturns struct {
		result1 string
	}
	detectLanguageReturnsOnCall map[int]struct {
		result1 string
	}
	DetectLocaleStub        func() string
	detectLocaleMutex       sync.RWMutex
	detectLocaleArgsForCall []struct {
	}
	detectLocaleReturns struct {
		result1 string
	}
	detectLocaleReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDetector) DetectLanguage() string {
	fake.detectLanguageMutex.Lock()
	ret, specificReturn := fake.detectLanguageReturnsOnCall[len(fake.detectLanguageArgsForCall)]
	fake.detectLanguageArgsForCall = append(fake.detectLanguageArgsForCall, struct {
	}{})
	fake.recordInvocation("DetectLanguage", []interface{}{})
	fake.detectLanguageMutex.Unlock()
	if fake.DetectLanguageStub != nil {
		return fake.DetectLanguageStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.detectLanguageReturns
	return fakeReturns.result1
}

func (fake *FakeDetector) DetectLanguageCallCount() int {
	fake.detectLanguageMutex.RLock()
	defer fake.detectLanguageMutex.RUnlock()
	return len(fake.detectLanguageArgsForCall)
}

func (fake *FakeDetector) DetectLanguageCalls(stub func() string) {
	fake.detectLanguageMutex.Lock()
	defer fake.detectLanguageMutex.Unlock()
	fake.DetectLanguageStub = stub
}

func (fake *FakeDetector) DetectLanguageReturns(result1 string) {
	fake.detectLanguageMutex.Lock()
	defer fake.detectLanguageMutex.Unlock()
	fake.DetectLanguageStub = nil
	fake.detectLanguageReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDetector) DetectLanguageReturnsOnCall(i int, result1 string) {
	fake.detectLanguageMutex.Lock()
	defer fake.detectLanguageMutex.Unlock()
	fake.DetectLanguageStub = nil
	if fake.detectLanguageReturnsOnCall == nil {
		fake.detectLanguageReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.detectLanguageReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDetector) DetectLocale() string {
	fake.detectLocaleMutex.Lock()
	ret, specificReturn := fake.detectLocaleReturnsOnCall[len(fake.detectLocaleArgsForCall)]
	fake.detectLocaleArgsForCall = append(fake.detectLocaleArgsForCall, struct {
	}{})
	fake.recordInvocation("DetectLocale", []interface{}{})
	fake.detectLocaleMutex.Unlock()
	if fake.DetectLocaleStub != nil {
		return fake.DetectLocaleStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.detectLocaleReturns
	return fakeReturns.result1
}

func (fake *FakeDetector) DetectLocaleCallCount() int {
	fake.detectLocaleMutex.RLock()
	defer fake.detectLocaleMutex.RUnlock()
	return len(fake.detectLocaleArgsForCall)
}

func (fake *FakeDetector) DetectLocaleCalls(stub func() string) {
	fake.detectLocaleMutex.Lock()
	defer fake.detectLocaleMutex.Unlock()
	fake.DetectLocaleStub = stub
}

func (fake *FakeDetector) DetectLocaleReturns(result1 string) {
	fake.detectLocaleMutex.Lock()
	defer fake.detectLocaleMutex.Unlock()
	fake.DetectLocaleStub = nil
	fake.detectLocaleReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeDetector) DetectLocaleReturnsOnCall(i int, result1 string) {
	fake.detectLocaleMutex.Lock()
	defer fake.detectLocaleMutex.Unlock()
	fake.DetectLocaleStub = nil
	if fake.detectLocaleReturnsOnCall == nil {
		fake.detectLocaleReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.detectLocaleReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeDetector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.detectLanguageMutex.RLock()
	defer fake.detectLanguageMutex.RUnlock()
	fake.detectLocaleMutex.RLock()
	defer fake.detectLocaleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDetector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ detection.Detector = new(FakeDetector)
