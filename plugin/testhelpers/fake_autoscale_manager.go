// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeAutoScaleManager struct {
	GetLogsScaleGroupStub        func(int, string, string) ([]datatypes.Scale_Group_Log, error)
	getLogsScaleGroupMutex       sync.RWMutex
	getLogsScaleGroupArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 string
	}
	getLogsScaleGroupReturns struct {
		result1 []datatypes.Scale_Group_Log
		result2 error
	}
	getLogsScaleGroupReturnsOnCall map[int]struct {
		result1 []datatypes.Scale_Group_Log
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAutoScaleManager) GetLogsScaleGroup(arg1 int, arg2 string, arg3 string) ([]datatypes.Scale_Group_Log, error) {
	fake.getLogsScaleGroupMutex.Lock()
	ret, specificReturn := fake.getLogsScaleGroupReturnsOnCall[len(fake.getLogsScaleGroupArgsForCall)]
	fake.getLogsScaleGroupArgsForCall = append(fake.getLogsScaleGroupArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetLogsScaleGroupStub
	fakeReturns := fake.getLogsScaleGroupReturns
	fake.recordInvocation("GetLogsScaleGroup", []interface{}{arg1, arg2, arg3})
	fake.getLogsScaleGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAutoScaleManager) GetLogsScaleGroupCallCount() int {
	fake.getLogsScaleGroupMutex.RLock()
	defer fake.getLogsScaleGroupMutex.RUnlock()
	return len(fake.getLogsScaleGroupArgsForCall)
}

func (fake *FakeAutoScaleManager) GetLogsScaleGroupCalls(stub func(int, string, string) ([]datatypes.Scale_Group_Log, error)) {
	fake.getLogsScaleGroupMutex.Lock()
	defer fake.getLogsScaleGroupMutex.Unlock()
	fake.GetLogsScaleGroupStub = stub
}

func (fake *FakeAutoScaleManager) GetLogsScaleGroupArgsForCall(i int) (int, string, string) {
	fake.getLogsScaleGroupMutex.RLock()
	defer fake.getLogsScaleGroupMutex.RUnlock()
	argsForCall := fake.getLogsScaleGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAutoScaleManager) GetLogsScaleGroupReturns(result1 []datatypes.Scale_Group_Log, result2 error) {
	fake.getLogsScaleGroupMutex.Lock()
	defer fake.getLogsScaleGroupMutex.Unlock()
	fake.GetLogsScaleGroupStub = nil
	fake.getLogsScaleGroupReturns = struct {
		result1 []datatypes.Scale_Group_Log
		result2 error
	}{result1, result2}
}

func (fake *FakeAutoScaleManager) GetLogsScaleGroupReturnsOnCall(i int, result1 []datatypes.Scale_Group_Log, result2 error) {
	fake.getLogsScaleGroupMutex.Lock()
	defer fake.getLogsScaleGroupMutex.Unlock()
	fake.GetLogsScaleGroupStub = nil
	if fake.getLogsScaleGroupReturnsOnCall == nil {
		fake.getLogsScaleGroupReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Scale_Group_Log
			result2 error
		})
	}
	fake.getLogsScaleGroupReturnsOnCall[i] = struct {
		result1 []datatypes.Scale_Group_Log
		result2 error
	}{result1, result2}
}

func (fake *FakeAutoScaleManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLogsScaleGroupMutex.RLock()
	defer fake.getLogsScaleGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAutoScaleManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.AutoScaleManager = new(FakeAutoScaleManager)
