// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeAutoScaleManager struct {
	EditScaleGroupStub        func(int, *datatypes.Scale_Group) (bool, error)
	editScaleGroupMutex       sync.RWMutex
	editScaleGroupArgsForCall []struct {
		arg1 int
		arg2 *datatypes.Scale_Group
	}
	editScaleGroupReturns struct {
		result1 bool
		result2 error
	}
	editScaleGroupReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GetScaleGroupStub        func(int, string) (datatypes.Scale_Group, error)
	getScaleGroupMutex       sync.RWMutex
	getScaleGroupArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getScaleGroupReturns struct {
		result1 datatypes.Scale_Group
		result2 error
	}
	getScaleGroupReturnsOnCall map[int]struct {
		result1 datatypes.Scale_Group
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAutoScaleManager) EditScaleGroup(arg1 int, arg2 *datatypes.Scale_Group) (bool, error) {
	fake.editScaleGroupMutex.Lock()
	ret, specificReturn := fake.editScaleGroupReturnsOnCall[len(fake.editScaleGroupArgsForCall)]
	fake.editScaleGroupArgsForCall = append(fake.editScaleGroupArgsForCall, struct {
		arg1 int
		arg2 *datatypes.Scale_Group
	}{arg1, arg2})
	stub := fake.EditScaleGroupStub
	fakeReturns := fake.editScaleGroupReturns
	fake.recordInvocation("EditScaleGroup", []interface{}{arg1, arg2})
	fake.editScaleGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAutoScaleManager) EditScaleGroupCallCount() int {
	fake.editScaleGroupMutex.RLock()
	defer fake.editScaleGroupMutex.RUnlock()
	return len(fake.editScaleGroupArgsForCall)
}

func (fake *FakeAutoScaleManager) EditScaleGroupCalls(stub func(int, *datatypes.Scale_Group) (bool, error)) {
	fake.editScaleGroupMutex.Lock()
	defer fake.editScaleGroupMutex.Unlock()
	fake.EditScaleGroupStub = stub
}

func (fake *FakeAutoScaleManager) EditScaleGroupArgsForCall(i int) (int, *datatypes.Scale_Group) {
	fake.editScaleGroupMutex.RLock()
	defer fake.editScaleGroupMutex.RUnlock()
	argsForCall := fake.editScaleGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAutoScaleManager) EditScaleGroupReturns(result1 bool, result2 error) {
	fake.editScaleGroupMutex.Lock()
	defer fake.editScaleGroupMutex.Unlock()
	fake.EditScaleGroupStub = nil
	fake.editScaleGroupReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAutoScaleManager) EditScaleGroupReturnsOnCall(i int, result1 bool, result2 error) {
	fake.editScaleGroupMutex.Lock()
	defer fake.editScaleGroupMutex.Unlock()
	fake.EditScaleGroupStub = nil
	if fake.editScaleGroupReturnsOnCall == nil {
		fake.editScaleGroupReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.editScaleGroupReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAutoScaleManager) GetScaleGroup(arg1 int, arg2 string) (datatypes.Scale_Group, error) {
	fake.getScaleGroupMutex.Lock()
	ret, specificReturn := fake.getScaleGroupReturnsOnCall[len(fake.getScaleGroupArgsForCall)]
	fake.getScaleGroupArgsForCall = append(fake.getScaleGroupArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.GetScaleGroupStub
	fakeReturns := fake.getScaleGroupReturns
	fake.recordInvocation("GetScaleGroup", []interface{}{arg1, arg2})
	fake.getScaleGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAutoScaleManager) GetScaleGroupCallCount() int {
	fake.getScaleGroupMutex.RLock()
	defer fake.getScaleGroupMutex.RUnlock()
	return len(fake.getScaleGroupArgsForCall)
}

func (fake *FakeAutoScaleManager) GetScaleGroupCalls(stub func(int, string) (datatypes.Scale_Group, error)) {
	fake.getScaleGroupMutex.Lock()
	defer fake.getScaleGroupMutex.Unlock()
	fake.GetScaleGroupStub = stub
}

func (fake *FakeAutoScaleManager) GetScaleGroupArgsForCall(i int) (int, string) {
	fake.getScaleGroupMutex.RLock()
	defer fake.getScaleGroupMutex.RUnlock()
	argsForCall := fake.getScaleGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAutoScaleManager) GetScaleGroupReturns(result1 datatypes.Scale_Group, result2 error) {
	fake.getScaleGroupMutex.Lock()
	defer fake.getScaleGroupMutex.Unlock()
	fake.GetScaleGroupStub = nil
	fake.getScaleGroupReturns = struct {
		result1 datatypes.Scale_Group
		result2 error
	}{result1, result2}
}

func (fake *FakeAutoScaleManager) GetScaleGroupReturnsOnCall(i int, result1 datatypes.Scale_Group, result2 error) {
	fake.getScaleGroupMutex.Lock()
	defer fake.getScaleGroupMutex.Unlock()
	fake.GetScaleGroupStub = nil
	if fake.getScaleGroupReturnsOnCall == nil {
		fake.getScaleGroupReturnsOnCall = make(map[int]struct {
			result1 datatypes.Scale_Group
			result2 error
		})
	}
	fake.getScaleGroupReturnsOnCall[i] = struct {
		result1 datatypes.Scale_Group
		result2 error
	}{result1, result2}
}

func (fake *FakeAutoScaleManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.editScaleGroupMutex.RLock()
	defer fake.editScaleGroupMutex.RUnlock()
	fake.getScaleGroupMutex.RLock()
	defer fake.getScaleGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAutoScaleManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.AutoScaleManager = new(FakeAutoScaleManager)
