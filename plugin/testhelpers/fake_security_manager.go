// This file was generated by counterfeiter
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/cgallo/softlayer-cli/plugin/managers"
)

type FakeSecurityManager struct {
	AddSSHKeyStub        func(key string, label string, notes string) (datatypes.Security_Ssh_Key, error)
	addSSHKeyMutex       sync.RWMutex
	addSSHKeyArgsForCall []struct {
		key   string
		label string
		notes string
	}
	addSSHKeyReturns struct {
		result1 datatypes.Security_Ssh_Key
		result2 error
	}
	DeleteSSHKeyStub        func(keyID int) error
	deleteSSHKeyMutex       sync.RWMutex
	deleteSSHKeyArgsForCall []struct {
		keyID int
	}
	deleteSSHKeyReturns struct {
		result1 error
	}
	EditSSHKeyStub        func(keyID int, label string, notes string) error
	editSSHKeyMutex       sync.RWMutex
	editSSHKeyArgsForCall []struct {
		keyID int
		label string
		notes string
	}
	editSSHKeyReturns struct {
		result1 error
	}
	GetSSHKeyStub        func(keyID int) (datatypes.Security_Ssh_Key, error)
	getSSHKeyMutex       sync.RWMutex
	getSSHKeyArgsForCall []struct {
		keyID int
	}
	getSSHKeyReturns struct {
		result1 datatypes.Security_Ssh_Key
		result2 error
	}
	ListSSHKeysStub        func(label string) ([]datatypes.Security_Ssh_Key, error)
	listSSHKeysMutex       sync.RWMutex
	listSSHKeysArgsForCall []struct {
		label string
	}
	listSSHKeysReturns struct {
		result1 []datatypes.Security_Ssh_Key
		result2 error
	}
	GetSSHKeyIDsFromLabelStub        func(label string) ([]int, error)
	getSSHKeyIDsFromLabelMutex       sync.RWMutex
	getSSHKeyIDsFromLabelArgsForCall []struct {
		label string
	}
	getSSHKeyIDsFromLabelReturns struct {
		result1 []int
		result2 error
	}
	ListCertificatesStub        func(method string) ([]datatypes.Security_Certificate, error)
	listCertificatesMutex       sync.RWMutex
	listCertificatesArgsForCall []struct {
		method string
	}
	listCertificatesReturns struct {
		result1 []datatypes.Security_Certificate
		result2 error
	}
	AddCertificateStub        func(cert datatypes.Security_Certificate) (datatypes.Security_Certificate, error)
	addCertificateMutex       sync.RWMutex
	addCertificateArgsForCall []struct {
		cert datatypes.Security_Certificate
	}
	addCertificateReturns struct {
		result1 datatypes.Security_Certificate
		result2 error
	}
	RemoveCertificateStub        func(certID int) error
	removeCertificateMutex       sync.RWMutex
	removeCertificateArgsForCall []struct {
		certID int
	}
	removeCertificateReturns struct {
		result1 error
	}
	EditCertificateStub        func(cert datatypes.Security_Certificate) error
	editCertificateMutex       sync.RWMutex
	editCertificateArgsForCall []struct {
		cert datatypes.Security_Certificate
	}
	editCertificateReturns struct {
		result1 error
	}
	GetCertificateStub        func(certID int) (datatypes.Security_Certificate, error)
	getCertificateMutex       sync.RWMutex
	getCertificateArgsForCall []struct {
		certID int
	}
	getCertificateReturns struct {
		result1 datatypes.Security_Certificate
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecurityManager) AddSSHKey(key string, label string, notes string) (datatypes.Security_Ssh_Key, error) {
	fake.addSSHKeyMutex.Lock()
	fake.addSSHKeyArgsForCall = append(fake.addSSHKeyArgsForCall, struct {
		key   string
		label string
		notes string
	}{key, label, notes})
	fake.recordInvocation("AddSSHKey", []interface{}{key, label, notes})
	fake.addSSHKeyMutex.Unlock()
	if fake.AddSSHKeyStub != nil {
		return fake.AddSSHKeyStub(key, label, notes)
	} else {
		return fake.addSSHKeyReturns.result1, fake.addSSHKeyReturns.result2
	}
}

func (fake *FakeSecurityManager) AddSSHKeyCallCount() int {
	fake.addSSHKeyMutex.RLock()
	defer fake.addSSHKeyMutex.RUnlock()
	return len(fake.addSSHKeyArgsForCall)
}

func (fake *FakeSecurityManager) AddSSHKeyArgsForCall(i int) (string, string, string) {
	fake.addSSHKeyMutex.RLock()
	defer fake.addSSHKeyMutex.RUnlock()
	return fake.addSSHKeyArgsForCall[i].key, fake.addSSHKeyArgsForCall[i].label, fake.addSSHKeyArgsForCall[i].notes
}

func (fake *FakeSecurityManager) AddSSHKeyReturns(result1 datatypes.Security_Ssh_Key, result2 error) {
	fake.AddSSHKeyStub = nil
	fake.addSSHKeyReturns = struct {
		result1 datatypes.Security_Ssh_Key
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityManager) DeleteSSHKey(keyID int) error {
	fake.deleteSSHKeyMutex.Lock()
	fake.deleteSSHKeyArgsForCall = append(fake.deleteSSHKeyArgsForCall, struct {
		keyID int
	}{keyID})
	fake.recordInvocation("DeleteSSHKey", []interface{}{keyID})
	fake.deleteSSHKeyMutex.Unlock()
	if fake.DeleteSSHKeyStub != nil {
		return fake.DeleteSSHKeyStub(keyID)
	} else {
		return fake.deleteSSHKeyReturns.result1
	}
}

func (fake *FakeSecurityManager) DeleteSSHKeyCallCount() int {
	fake.deleteSSHKeyMutex.RLock()
	defer fake.deleteSSHKeyMutex.RUnlock()
	return len(fake.deleteSSHKeyArgsForCall)
}

func (fake *FakeSecurityManager) DeleteSSHKeyArgsForCall(i int) int {
	fake.deleteSSHKeyMutex.RLock()
	defer fake.deleteSSHKeyMutex.RUnlock()
	return fake.deleteSSHKeyArgsForCall[i].keyID
}

func (fake *FakeSecurityManager) DeleteSSHKeyReturns(result1 error) {
	fake.DeleteSSHKeyStub = nil
	fake.deleteSSHKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityManager) EditSSHKey(keyID int, label string, notes string) error {
	fake.editSSHKeyMutex.Lock()
	fake.editSSHKeyArgsForCall = append(fake.editSSHKeyArgsForCall, struct {
		keyID int
		label string
		notes string
	}{keyID, label, notes})
	fake.recordInvocation("EditSSHKey", []interface{}{keyID, label, notes})
	fake.editSSHKeyMutex.Unlock()
	if fake.EditSSHKeyStub != nil {
		return fake.EditSSHKeyStub(keyID, label, notes)
	} else {
		return fake.editSSHKeyReturns.result1
	}
}

func (fake *FakeSecurityManager) EditSSHKeyCallCount() int {
	fake.editSSHKeyMutex.RLock()
	defer fake.editSSHKeyMutex.RUnlock()
	return len(fake.editSSHKeyArgsForCall)
}

func (fake *FakeSecurityManager) EditSSHKeyArgsForCall(i int) (int, string, string) {
	fake.editSSHKeyMutex.RLock()
	defer fake.editSSHKeyMutex.RUnlock()
	return fake.editSSHKeyArgsForCall[i].keyID, fake.editSSHKeyArgsForCall[i].label, fake.editSSHKeyArgsForCall[i].notes
}

func (fake *FakeSecurityManager) EditSSHKeyReturns(result1 error) {
	fake.EditSSHKeyStub = nil
	fake.editSSHKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityManager) GetSSHKey(keyID int) (datatypes.Security_Ssh_Key, error) {
	fake.getSSHKeyMutex.Lock()
	fake.getSSHKeyArgsForCall = append(fake.getSSHKeyArgsForCall, struct {
		keyID int
	}{keyID})
	fake.recordInvocation("GetSSHKey", []interface{}{keyID})
	fake.getSSHKeyMutex.Unlock()
	if fake.GetSSHKeyStub != nil {
		return fake.GetSSHKeyStub(keyID)
	} else {
		return fake.getSSHKeyReturns.result1, fake.getSSHKeyReturns.result2
	}
}

func (fake *FakeSecurityManager) GetSSHKeyCallCount() int {
	fake.getSSHKeyMutex.RLock()
	defer fake.getSSHKeyMutex.RUnlock()
	return len(fake.getSSHKeyArgsForCall)
}

func (fake *FakeSecurityManager) GetSSHKeyArgsForCall(i int) int {
	fake.getSSHKeyMutex.RLock()
	defer fake.getSSHKeyMutex.RUnlock()
	return fake.getSSHKeyArgsForCall[i].keyID
}

func (fake *FakeSecurityManager) GetSSHKeyReturns(result1 datatypes.Security_Ssh_Key, result2 error) {
	fake.GetSSHKeyStub = nil
	fake.getSSHKeyReturns = struct {
		result1 datatypes.Security_Ssh_Key
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityManager) ListSSHKeys(label string) ([]datatypes.Security_Ssh_Key, error) {
	fake.listSSHKeysMutex.Lock()
	fake.listSSHKeysArgsForCall = append(fake.listSSHKeysArgsForCall, struct {
		label string
	}{label})
	fake.recordInvocation("ListSSHKeys", []interface{}{label})
	fake.listSSHKeysMutex.Unlock()
	if fake.ListSSHKeysStub != nil {
		return fake.ListSSHKeysStub(label)
	} else {
		return fake.listSSHKeysReturns.result1, fake.listSSHKeysReturns.result2
	}
}

func (fake *FakeSecurityManager) ListSSHKeysCallCount() int {
	fake.listSSHKeysMutex.RLock()
	defer fake.listSSHKeysMutex.RUnlock()
	return len(fake.listSSHKeysArgsForCall)
}

func (fake *FakeSecurityManager) ListSSHKeysArgsForCall(i int) string {
	fake.listSSHKeysMutex.RLock()
	defer fake.listSSHKeysMutex.RUnlock()
	return fake.listSSHKeysArgsForCall[i].label
}

func (fake *FakeSecurityManager) ListSSHKeysReturns(result1 []datatypes.Security_Ssh_Key, result2 error) {
	fake.ListSSHKeysStub = nil
	fake.listSSHKeysReturns = struct {
		result1 []datatypes.Security_Ssh_Key
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityManager) GetSSHKeyIDsFromLabel(label string) ([]int, error) {
	fake.getSSHKeyIDsFromLabelMutex.Lock()
	fake.getSSHKeyIDsFromLabelArgsForCall = append(fake.getSSHKeyIDsFromLabelArgsForCall, struct {
		label string
	}{label})
	fake.recordInvocation("GetSSHKeyIDsFromLabel", []interface{}{label})
	fake.getSSHKeyIDsFromLabelMutex.Unlock()
	if fake.GetSSHKeyIDsFromLabelStub != nil {
		return fake.GetSSHKeyIDsFromLabelStub(label)
	} else {
		return fake.getSSHKeyIDsFromLabelReturns.result1, fake.getSSHKeyIDsFromLabelReturns.result2
	}
}

func (fake *FakeSecurityManager) GetSSHKeyIDsFromLabelCallCount() int {
	fake.getSSHKeyIDsFromLabelMutex.RLock()
	defer fake.getSSHKeyIDsFromLabelMutex.RUnlock()
	return len(fake.getSSHKeyIDsFromLabelArgsForCall)
}

func (fake *FakeSecurityManager) GetSSHKeyIDsFromLabelArgsForCall(i int) string {
	fake.getSSHKeyIDsFromLabelMutex.RLock()
	defer fake.getSSHKeyIDsFromLabelMutex.RUnlock()
	return fake.getSSHKeyIDsFromLabelArgsForCall[i].label
}

func (fake *FakeSecurityManager) GetSSHKeyIDsFromLabelReturns(result1 []int, result2 error) {
	fake.GetSSHKeyIDsFromLabelStub = nil
	fake.getSSHKeyIDsFromLabelReturns = struct {
		result1 []int
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityManager) ListCertificates(method string) ([]datatypes.Security_Certificate, error) {
	fake.listCertificatesMutex.Lock()
	fake.listCertificatesArgsForCall = append(fake.listCertificatesArgsForCall, struct {
		method string
	}{method})
	fake.recordInvocation("ListCertificates", []interface{}{method})
	fake.listCertificatesMutex.Unlock()
	if fake.ListCertificatesStub != nil {
		return fake.ListCertificatesStub(method)
	} else {
		return fake.listCertificatesReturns.result1, fake.listCertificatesReturns.result2
	}
}

func (fake *FakeSecurityManager) ListCertificatesCallCount() int {
	fake.listCertificatesMutex.RLock()
	defer fake.listCertificatesMutex.RUnlock()
	return len(fake.listCertificatesArgsForCall)
}

func (fake *FakeSecurityManager) ListCertificatesArgsForCall(i int) string {
	fake.listCertificatesMutex.RLock()
	defer fake.listCertificatesMutex.RUnlock()
	return fake.listCertificatesArgsForCall[i].method
}

func (fake *FakeSecurityManager) ListCertificatesReturns(result1 []datatypes.Security_Certificate, result2 error) {
	fake.ListCertificatesStub = nil
	fake.listCertificatesReturns = struct {
		result1 []datatypes.Security_Certificate
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityManager) AddCertificate(cert datatypes.Security_Certificate) (datatypes.Security_Certificate, error) {
	fake.addCertificateMutex.Lock()
	fake.addCertificateArgsForCall = append(fake.addCertificateArgsForCall, struct {
		cert datatypes.Security_Certificate
	}{cert})
	fake.recordInvocation("AddCertificate", []interface{}{cert})
	fake.addCertificateMutex.Unlock()
	if fake.AddCertificateStub != nil {
		return fake.AddCertificateStub(cert)
	} else {
		return fake.addCertificateReturns.result1, fake.addCertificateReturns.result2
	}
}

func (fake *FakeSecurityManager) AddCertificateCallCount() int {
	fake.addCertificateMutex.RLock()
	defer fake.addCertificateMutex.RUnlock()
	return len(fake.addCertificateArgsForCall)
}

func (fake *FakeSecurityManager) AddCertificateArgsForCall(i int) datatypes.Security_Certificate {
	fake.addCertificateMutex.RLock()
	defer fake.addCertificateMutex.RUnlock()
	return fake.addCertificateArgsForCall[i].cert
}

func (fake *FakeSecurityManager) AddCertificateReturns(result1 datatypes.Security_Certificate, result2 error) {
	fake.AddCertificateStub = nil
	fake.addCertificateReturns = struct {
		result1 datatypes.Security_Certificate
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityManager) RemoveCertificate(certID int) error {
	fake.removeCertificateMutex.Lock()
	fake.removeCertificateArgsForCall = append(fake.removeCertificateArgsForCall, struct {
		certID int
	}{certID})
	fake.recordInvocation("RemoveCertificate", []interface{}{certID})
	fake.removeCertificateMutex.Unlock()
	if fake.RemoveCertificateStub != nil {
		return fake.RemoveCertificateStub(certID)
	} else {
		return fake.removeCertificateReturns.result1
	}
}

func (fake *FakeSecurityManager) RemoveCertificateCallCount() int {
	fake.removeCertificateMutex.RLock()
	defer fake.removeCertificateMutex.RUnlock()
	return len(fake.removeCertificateArgsForCall)
}

func (fake *FakeSecurityManager) RemoveCertificateArgsForCall(i int) int {
	fake.removeCertificateMutex.RLock()
	defer fake.removeCertificateMutex.RUnlock()
	return fake.removeCertificateArgsForCall[i].certID
}

func (fake *FakeSecurityManager) RemoveCertificateReturns(result1 error) {
	fake.RemoveCertificateStub = nil
	fake.removeCertificateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityManager) EditCertificate(cert datatypes.Security_Certificate) error {
	fake.editCertificateMutex.Lock()
	fake.editCertificateArgsForCall = append(fake.editCertificateArgsForCall, struct {
		cert datatypes.Security_Certificate
	}{cert})
	fake.recordInvocation("EditCertificate", []interface{}{cert})
	fake.editCertificateMutex.Unlock()
	if fake.EditCertificateStub != nil {
		return fake.EditCertificateStub(cert)
	} else {
		return fake.editCertificateReturns.result1
	}
}

func (fake *FakeSecurityManager) EditCertificateCallCount() int {
	fake.editCertificateMutex.RLock()
	defer fake.editCertificateMutex.RUnlock()
	return len(fake.editCertificateArgsForCall)
}

func (fake *FakeSecurityManager) EditCertificateArgsForCall(i int) datatypes.Security_Certificate {
	fake.editCertificateMutex.RLock()
	defer fake.editCertificateMutex.RUnlock()
	return fake.editCertificateArgsForCall[i].cert
}

func (fake *FakeSecurityManager) EditCertificateReturns(result1 error) {
	fake.EditCertificateStub = nil
	fake.editCertificateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityManager) GetCertificate(certID int) (datatypes.Security_Certificate, error) {
	fake.getCertificateMutex.Lock()
	fake.getCertificateArgsForCall = append(fake.getCertificateArgsForCall, struct {
		certID int
	}{certID})
	fake.recordInvocation("GetCertificate", []interface{}{certID})
	fake.getCertificateMutex.Unlock()
	if fake.GetCertificateStub != nil {
		return fake.GetCertificateStub(certID)
	} else {
		return fake.getCertificateReturns.result1, fake.getCertificateReturns.result2
	}
}

func (fake *FakeSecurityManager) GetCertificateCallCount() int {
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	return len(fake.getCertificateArgsForCall)
}

func (fake *FakeSecurityManager) GetCertificateArgsForCall(i int) int {
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	return fake.getCertificateArgsForCall[i].certID
}

func (fake *FakeSecurityManager) GetCertificateReturns(result1 datatypes.Security_Certificate, result2 error) {
	fake.GetCertificateStub = nil
	fake.getCertificateReturns = struct {
		result1 datatypes.Security_Certificate
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addSSHKeyMutex.RLock()
	defer fake.addSSHKeyMutex.RUnlock()
	fake.deleteSSHKeyMutex.RLock()
	defer fake.deleteSSHKeyMutex.RUnlock()
	fake.editSSHKeyMutex.RLock()
	defer fake.editSSHKeyMutex.RUnlock()
	fake.getSSHKeyMutex.RLock()
	defer fake.getSSHKeyMutex.RUnlock()
	fake.listSSHKeysMutex.RLock()
	defer fake.listSSHKeysMutex.RUnlock()
	fake.getSSHKeyIDsFromLabelMutex.RLock()
	defer fake.getSSHKeyIDsFromLabelMutex.RUnlock()
	fake.listCertificatesMutex.RLock()
	defer fake.listCertificatesMutex.RUnlock()
	fake.addCertificateMutex.RLock()
	defer fake.addCertificateMutex.RUnlock()
	fake.removeCertificateMutex.RLock()
	defer fake.removeCertificateMutex.RUnlock()
	fake.editCertificateMutex.RLock()
	defer fake.editCertificateMutex.RUnlock()
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSecurityManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.SecurityManager = new(FakeSecurityManager)
