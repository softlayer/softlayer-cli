// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeFirewallManager struct {
	AddStandardFirewallStub        func(int, bool) (datatypes.Container_Product_Order_Receipt, error)
	addStandardFirewallMutex       sync.RWMutex
	addStandardFirewallArgsForCall []struct {
		arg1 int
		arg2 bool
	}
	addStandardFirewallReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	addStandardFirewallReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	AddVlanFirewallStub        func(int, bool) (datatypes.Container_Product_Order_Receipt, error)
	addVlanFirewallMutex       sync.RWMutex
	addVlanFirewallArgsForCall []struct {
		arg1 int
		arg2 bool
	}
	addVlanFirewallReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	addVlanFirewallReturnsOnCall map[int]struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	CancelFirewallStub        func(int, bool) error
	cancelFirewallMutex       sync.RWMutex
	cancelFirewallArgsForCall []struct {
		arg1 int
		arg2 bool
	}
	cancelFirewallReturns struct {
		result1 error
	}
	cancelFirewallReturnsOnCall map[int]struct {
		result1 error
	}
	EditDedicatedFirewallRulesStub        func(int, []datatypes.Network_Vlan_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error)
	editDedicatedFirewallRulesMutex       sync.RWMutex
	editDedicatedFirewallRulesArgsForCall []struct {
		arg1 int
		arg2 []datatypes.Network_Vlan_Firewall_Rule
	}
	editDedicatedFirewallRulesReturns struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}
	editDedicatedFirewallRulesReturnsOnCall map[int]struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}
	EditStandardFirewallRulesStub        func(int, []datatypes.Network_Component_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error)
	editStandardFirewallRulesMutex       sync.RWMutex
	editStandardFirewallRulesArgsForCall []struct {
		arg1 int
		arg2 []datatypes.Network_Component_Firewall_Rule
	}
	editStandardFirewallRulesReturns struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}
	editStandardFirewallRulesReturnsOnCall map[int]struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}
	GetDedicatedFirewallRulesStub        func(int) ([]datatypes.Network_Vlan_Firewall_Rule, error)
	getDedicatedFirewallRulesMutex       sync.RWMutex
	getDedicatedFirewallRulesArgsForCall []struct {
		arg1 int
	}
	getDedicatedFirewallRulesReturns struct {
		result1 []datatypes.Network_Vlan_Firewall_Rule
		result2 error
	}
	getDedicatedFirewallRulesReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Vlan_Firewall_Rule
		result2 error
	}
	GetDedicatedPackageStub        func(bool) ([]datatypes.Product_Item, error)
	getDedicatedPackageMutex       sync.RWMutex
	getDedicatedPackageArgsForCall []struct {
		arg1 bool
	}
	getDedicatedPackageReturns struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	getDedicatedPackageReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	GetFirewallBillingItemStub        func(int, bool) (datatypes.Billing_Item, error)
	getFirewallBillingItemMutex       sync.RWMutex
	getFirewallBillingItemArgsForCall []struct {
		arg1 int
		arg2 bool
	}
	getFirewallBillingItemReturns struct {
		result1 datatypes.Billing_Item
		result2 error
	}
	getFirewallBillingItemReturnsOnCall map[int]struct {
		result1 datatypes.Billing_Item
		result2 error
	}
	GetFirewallPortSpeedStub        func(int, bool) (int, error)
	getFirewallPortSpeedMutex       sync.RWMutex
	getFirewallPortSpeedArgsForCall []struct {
		arg1 int
		arg2 bool
	}
	getFirewallPortSpeedReturns struct {
		result1 int
		result2 error
	}
	getFirewallPortSpeedReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	GetFirewallsStub        func() ([]datatypes.Network_Vlan, error)
	getFirewallsMutex       sync.RWMutex
	getFirewallsArgsForCall []struct {
	}
	getFirewallsReturns struct {
		result1 []datatypes.Network_Vlan
		result2 error
	}
	getFirewallsReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Vlan
		result2 error
	}
	GetMultiVlanFirewallStub        func(int, string) (datatypes.Network_Vlan_Firewall, error)
	getMultiVlanFirewallMutex       sync.RWMutex
	getMultiVlanFirewallArgsForCall []struct {
		arg1 int
		arg2 string
	}
	getMultiVlanFirewallReturns struct {
		result1 datatypes.Network_Vlan_Firewall
		result2 error
	}
	getMultiVlanFirewallReturnsOnCall map[int]struct {
		result1 datatypes.Network_Vlan_Firewall
		result2 error
	}
	GetMultiVlanFirewallsStub        func(string) ([]datatypes.Network_Gateway, error)
	getMultiVlanFirewallsMutex       sync.RWMutex
	getMultiVlanFirewallsArgsForCall []struct {
		arg1 string
	}
	getMultiVlanFirewallsReturns struct {
		result1 []datatypes.Network_Gateway
		result2 error
	}
	getMultiVlanFirewallsReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Gateway
		result2 error
	}
	GetStandardFirewallRulesStub        func(int) ([]datatypes.Network_Component_Firewall_Rule, error)
	getStandardFirewallRulesMutex       sync.RWMutex
	getStandardFirewallRulesArgsForCall []struct {
		arg1 int
	}
	getStandardFirewallRulesReturns struct {
		result1 []datatypes.Network_Component_Firewall_Rule
		result2 error
	}
	getStandardFirewallRulesReturnsOnCall map[int]struct {
		result1 []datatypes.Network_Component_Firewall_Rule
		result2 error
	}
	GetStandardPackageStub        func(int, bool) ([]datatypes.Product_Item, error)
	getStandardPackageMutex       sync.RWMutex
	getStandardPackageArgsForCall []struct {
		arg1 int
		arg2 bool
	}
	getStandardPackageReturns struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	getStandardPackageReturnsOnCall map[int]struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	HasFirewallStub        func(datatypes.Network_Vlan) bool
	hasFirewallMutex       sync.RWMutex
	hasFirewallArgsForCall []struct {
		arg1 datatypes.Network_Vlan
	}
	hasFirewallReturns struct {
		result1 bool
	}
	hasFirewallReturnsOnCall map[int]struct {
		result1 bool
	}
	ParseFirewallIDStub        func(string) (string, int, error)
	parseFirewallIDMutex       sync.RWMutex
	parseFirewallIDArgsForCall []struct {
		arg1 string
	}
	parseFirewallIDReturns struct {
		result1 string
		result2 int
		result3 error
	}
	parseFirewallIDReturnsOnCall map[int]struct {
		result1 string
		result2 int
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFirewallManager) AddStandardFirewall(arg1 int, arg2 bool) (datatypes.Container_Product_Order_Receipt, error) {
	fake.addStandardFirewallMutex.Lock()
	ret, specificReturn := fake.addStandardFirewallReturnsOnCall[len(fake.addStandardFirewallArgsForCall)]
	fake.addStandardFirewallArgsForCall = append(fake.addStandardFirewallArgsForCall, struct {
		arg1 int
		arg2 bool
	}{arg1, arg2})
	stub := fake.AddStandardFirewallStub
	fakeReturns := fake.addStandardFirewallReturns
	fake.recordInvocation("AddStandardFirewall", []interface{}{arg1, arg2})
	fake.addStandardFirewallMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) AddStandardFirewallCallCount() int {
	fake.addStandardFirewallMutex.RLock()
	defer fake.addStandardFirewallMutex.RUnlock()
	return len(fake.addStandardFirewallArgsForCall)
}

func (fake *FakeFirewallManager) AddStandardFirewallCalls(stub func(int, bool) (datatypes.Container_Product_Order_Receipt, error)) {
	fake.addStandardFirewallMutex.Lock()
	defer fake.addStandardFirewallMutex.Unlock()
	fake.AddStandardFirewallStub = stub
}

func (fake *FakeFirewallManager) AddStandardFirewallArgsForCall(i int) (int, bool) {
	fake.addStandardFirewallMutex.RLock()
	defer fake.addStandardFirewallMutex.RUnlock()
	argsForCall := fake.addStandardFirewallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallManager) AddStandardFirewallReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.addStandardFirewallMutex.Lock()
	defer fake.addStandardFirewallMutex.Unlock()
	fake.AddStandardFirewallStub = nil
	fake.addStandardFirewallReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) AddStandardFirewallReturnsOnCall(i int, result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.addStandardFirewallMutex.Lock()
	defer fake.addStandardFirewallMutex.Unlock()
	fake.AddStandardFirewallStub = nil
	if fake.addStandardFirewallReturnsOnCall == nil {
		fake.addStandardFirewallReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order_Receipt
			result2 error
		})
	}
	fake.addStandardFirewallReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) AddVlanFirewall(arg1 int, arg2 bool) (datatypes.Container_Product_Order_Receipt, error) {
	fake.addVlanFirewallMutex.Lock()
	ret, specificReturn := fake.addVlanFirewallReturnsOnCall[len(fake.addVlanFirewallArgsForCall)]
	fake.addVlanFirewallArgsForCall = append(fake.addVlanFirewallArgsForCall, struct {
		arg1 int
		arg2 bool
	}{arg1, arg2})
	stub := fake.AddVlanFirewallStub
	fakeReturns := fake.addVlanFirewallReturns
	fake.recordInvocation("AddVlanFirewall", []interface{}{arg1, arg2})
	fake.addVlanFirewallMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) AddVlanFirewallCallCount() int {
	fake.addVlanFirewallMutex.RLock()
	defer fake.addVlanFirewallMutex.RUnlock()
	return len(fake.addVlanFirewallArgsForCall)
}

func (fake *FakeFirewallManager) AddVlanFirewallCalls(stub func(int, bool) (datatypes.Container_Product_Order_Receipt, error)) {
	fake.addVlanFirewallMutex.Lock()
	defer fake.addVlanFirewallMutex.Unlock()
	fake.AddVlanFirewallStub = stub
}

func (fake *FakeFirewallManager) AddVlanFirewallArgsForCall(i int) (int, bool) {
	fake.addVlanFirewallMutex.RLock()
	defer fake.addVlanFirewallMutex.RUnlock()
	argsForCall := fake.addVlanFirewallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallManager) AddVlanFirewallReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.addVlanFirewallMutex.Lock()
	defer fake.addVlanFirewallMutex.Unlock()
	fake.AddVlanFirewallStub = nil
	fake.addVlanFirewallReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) AddVlanFirewallReturnsOnCall(i int, result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.addVlanFirewallMutex.Lock()
	defer fake.addVlanFirewallMutex.Unlock()
	fake.AddVlanFirewallStub = nil
	if fake.addVlanFirewallReturnsOnCall == nil {
		fake.addVlanFirewallReturnsOnCall = make(map[int]struct {
			result1 datatypes.Container_Product_Order_Receipt
			result2 error
		})
	}
	fake.addVlanFirewallReturnsOnCall[i] = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) CancelFirewall(arg1 int, arg2 bool) error {
	fake.cancelFirewallMutex.Lock()
	ret, specificReturn := fake.cancelFirewallReturnsOnCall[len(fake.cancelFirewallArgsForCall)]
	fake.cancelFirewallArgsForCall = append(fake.cancelFirewallArgsForCall, struct {
		arg1 int
		arg2 bool
	}{arg1, arg2})
	stub := fake.CancelFirewallStub
	fakeReturns := fake.cancelFirewallReturns
	fake.recordInvocation("CancelFirewall", []interface{}{arg1, arg2})
	fake.cancelFirewallMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFirewallManager) CancelFirewallCallCount() int {
	fake.cancelFirewallMutex.RLock()
	defer fake.cancelFirewallMutex.RUnlock()
	return len(fake.cancelFirewallArgsForCall)
}

func (fake *FakeFirewallManager) CancelFirewallCalls(stub func(int, bool) error) {
	fake.cancelFirewallMutex.Lock()
	defer fake.cancelFirewallMutex.Unlock()
	fake.CancelFirewallStub = stub
}

func (fake *FakeFirewallManager) CancelFirewallArgsForCall(i int) (int, bool) {
	fake.cancelFirewallMutex.RLock()
	defer fake.cancelFirewallMutex.RUnlock()
	argsForCall := fake.cancelFirewallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallManager) CancelFirewallReturns(result1 error) {
	fake.cancelFirewallMutex.Lock()
	defer fake.cancelFirewallMutex.Unlock()
	fake.CancelFirewallStub = nil
	fake.cancelFirewallReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallManager) CancelFirewallReturnsOnCall(i int, result1 error) {
	fake.cancelFirewallMutex.Lock()
	defer fake.cancelFirewallMutex.Unlock()
	fake.CancelFirewallStub = nil
	if fake.cancelFirewallReturnsOnCall == nil {
		fake.cancelFirewallReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cancelFirewallReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRules(arg1 int, arg2 []datatypes.Network_Vlan_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error) {
	var arg2Copy []datatypes.Network_Vlan_Firewall_Rule
	if arg2 != nil {
		arg2Copy = make([]datatypes.Network_Vlan_Firewall_Rule, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.editDedicatedFirewallRulesMutex.Lock()
	ret, specificReturn := fake.editDedicatedFirewallRulesReturnsOnCall[len(fake.editDedicatedFirewallRulesArgsForCall)]
	fake.editDedicatedFirewallRulesArgsForCall = append(fake.editDedicatedFirewallRulesArgsForCall, struct {
		arg1 int
		arg2 []datatypes.Network_Vlan_Firewall_Rule
	}{arg1, arg2Copy})
	stub := fake.EditDedicatedFirewallRulesStub
	fakeReturns := fake.editDedicatedFirewallRulesReturns
	fake.recordInvocation("EditDedicatedFirewallRules", []interface{}{arg1, arg2Copy})
	fake.editDedicatedFirewallRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRulesCallCount() int {
	fake.editDedicatedFirewallRulesMutex.RLock()
	defer fake.editDedicatedFirewallRulesMutex.RUnlock()
	return len(fake.editDedicatedFirewallRulesArgsForCall)
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRulesCalls(stub func(int, []datatypes.Network_Vlan_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error)) {
	fake.editDedicatedFirewallRulesMutex.Lock()
	defer fake.editDedicatedFirewallRulesMutex.Unlock()
	fake.EditDedicatedFirewallRulesStub = stub
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRulesArgsForCall(i int) (int, []datatypes.Network_Vlan_Firewall_Rule) {
	fake.editDedicatedFirewallRulesMutex.RLock()
	defer fake.editDedicatedFirewallRulesMutex.RUnlock()
	argsForCall := fake.editDedicatedFirewallRulesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRulesReturns(result1 datatypes.Network_Firewall_Update_Request, result2 error) {
	fake.editDedicatedFirewallRulesMutex.Lock()
	defer fake.editDedicatedFirewallRulesMutex.Unlock()
	fake.EditDedicatedFirewallRulesStub = nil
	fake.editDedicatedFirewallRulesReturns = struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRulesReturnsOnCall(i int, result1 datatypes.Network_Firewall_Update_Request, result2 error) {
	fake.editDedicatedFirewallRulesMutex.Lock()
	defer fake.editDedicatedFirewallRulesMutex.Unlock()
	fake.EditDedicatedFirewallRulesStub = nil
	if fake.editDedicatedFirewallRulesReturnsOnCall == nil {
		fake.editDedicatedFirewallRulesReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Firewall_Update_Request
			result2 error
		})
	}
	fake.editDedicatedFirewallRulesReturnsOnCall[i] = struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) EditStandardFirewallRules(arg1 int, arg2 []datatypes.Network_Component_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error) {
	var arg2Copy []datatypes.Network_Component_Firewall_Rule
	if arg2 != nil {
		arg2Copy = make([]datatypes.Network_Component_Firewall_Rule, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.editStandardFirewallRulesMutex.Lock()
	ret, specificReturn := fake.editStandardFirewallRulesReturnsOnCall[len(fake.editStandardFirewallRulesArgsForCall)]
	fake.editStandardFirewallRulesArgsForCall = append(fake.editStandardFirewallRulesArgsForCall, struct {
		arg1 int
		arg2 []datatypes.Network_Component_Firewall_Rule
	}{arg1, arg2Copy})
	stub := fake.EditStandardFirewallRulesStub
	fakeReturns := fake.editStandardFirewallRulesReturns
	fake.recordInvocation("EditStandardFirewallRules", []interface{}{arg1, arg2Copy})
	fake.editStandardFirewallRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) EditStandardFirewallRulesCallCount() int {
	fake.editStandardFirewallRulesMutex.RLock()
	defer fake.editStandardFirewallRulesMutex.RUnlock()
	return len(fake.editStandardFirewallRulesArgsForCall)
}

func (fake *FakeFirewallManager) EditStandardFirewallRulesCalls(stub func(int, []datatypes.Network_Component_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error)) {
	fake.editStandardFirewallRulesMutex.Lock()
	defer fake.editStandardFirewallRulesMutex.Unlock()
	fake.EditStandardFirewallRulesStub = stub
}

func (fake *FakeFirewallManager) EditStandardFirewallRulesArgsForCall(i int) (int, []datatypes.Network_Component_Firewall_Rule) {
	fake.editStandardFirewallRulesMutex.RLock()
	defer fake.editStandardFirewallRulesMutex.RUnlock()
	argsForCall := fake.editStandardFirewallRulesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallManager) EditStandardFirewallRulesReturns(result1 datatypes.Network_Firewall_Update_Request, result2 error) {
	fake.editStandardFirewallRulesMutex.Lock()
	defer fake.editStandardFirewallRulesMutex.Unlock()
	fake.EditStandardFirewallRulesStub = nil
	fake.editStandardFirewallRulesReturns = struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) EditStandardFirewallRulesReturnsOnCall(i int, result1 datatypes.Network_Firewall_Update_Request, result2 error) {
	fake.editStandardFirewallRulesMutex.Lock()
	defer fake.editStandardFirewallRulesMutex.Unlock()
	fake.EditStandardFirewallRulesStub = nil
	if fake.editStandardFirewallRulesReturnsOnCall == nil {
		fake.editStandardFirewallRulesReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Firewall_Update_Request
			result2 error
		})
	}
	fake.editStandardFirewallRulesReturnsOnCall[i] = struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRules(arg1 int) ([]datatypes.Network_Vlan_Firewall_Rule, error) {
	fake.getDedicatedFirewallRulesMutex.Lock()
	ret, specificReturn := fake.getDedicatedFirewallRulesReturnsOnCall[len(fake.getDedicatedFirewallRulesArgsForCall)]
	fake.getDedicatedFirewallRulesArgsForCall = append(fake.getDedicatedFirewallRulesArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetDedicatedFirewallRulesStub
	fakeReturns := fake.getDedicatedFirewallRulesReturns
	fake.recordInvocation("GetDedicatedFirewallRules", []interface{}{arg1})
	fake.getDedicatedFirewallRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRulesCallCount() int {
	fake.getDedicatedFirewallRulesMutex.RLock()
	defer fake.getDedicatedFirewallRulesMutex.RUnlock()
	return len(fake.getDedicatedFirewallRulesArgsForCall)
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRulesCalls(stub func(int) ([]datatypes.Network_Vlan_Firewall_Rule, error)) {
	fake.getDedicatedFirewallRulesMutex.Lock()
	defer fake.getDedicatedFirewallRulesMutex.Unlock()
	fake.GetDedicatedFirewallRulesStub = stub
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRulesArgsForCall(i int) int {
	fake.getDedicatedFirewallRulesMutex.RLock()
	defer fake.getDedicatedFirewallRulesMutex.RUnlock()
	argsForCall := fake.getDedicatedFirewallRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRulesReturns(result1 []datatypes.Network_Vlan_Firewall_Rule, result2 error) {
	fake.getDedicatedFirewallRulesMutex.Lock()
	defer fake.getDedicatedFirewallRulesMutex.Unlock()
	fake.GetDedicatedFirewallRulesStub = nil
	fake.getDedicatedFirewallRulesReturns = struct {
		result1 []datatypes.Network_Vlan_Firewall_Rule
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRulesReturnsOnCall(i int, result1 []datatypes.Network_Vlan_Firewall_Rule, result2 error) {
	fake.getDedicatedFirewallRulesMutex.Lock()
	defer fake.getDedicatedFirewallRulesMutex.Unlock()
	fake.GetDedicatedFirewallRulesStub = nil
	if fake.getDedicatedFirewallRulesReturnsOnCall == nil {
		fake.getDedicatedFirewallRulesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Vlan_Firewall_Rule
			result2 error
		})
	}
	fake.getDedicatedFirewallRulesReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Vlan_Firewall_Rule
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetDedicatedPackage(arg1 bool) ([]datatypes.Product_Item, error) {
	fake.getDedicatedPackageMutex.Lock()
	ret, specificReturn := fake.getDedicatedPackageReturnsOnCall[len(fake.getDedicatedPackageArgsForCall)]
	fake.getDedicatedPackageArgsForCall = append(fake.getDedicatedPackageArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.GetDedicatedPackageStub
	fakeReturns := fake.getDedicatedPackageReturns
	fake.recordInvocation("GetDedicatedPackage", []interface{}{arg1})
	fake.getDedicatedPackageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) GetDedicatedPackageCallCount() int {
	fake.getDedicatedPackageMutex.RLock()
	defer fake.getDedicatedPackageMutex.RUnlock()
	return len(fake.getDedicatedPackageArgsForCall)
}

func (fake *FakeFirewallManager) GetDedicatedPackageCalls(stub func(bool) ([]datatypes.Product_Item, error)) {
	fake.getDedicatedPackageMutex.Lock()
	defer fake.getDedicatedPackageMutex.Unlock()
	fake.GetDedicatedPackageStub = stub
}

func (fake *FakeFirewallManager) GetDedicatedPackageArgsForCall(i int) bool {
	fake.getDedicatedPackageMutex.RLock()
	defer fake.getDedicatedPackageMutex.RUnlock()
	argsForCall := fake.getDedicatedPackageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFirewallManager) GetDedicatedPackageReturns(result1 []datatypes.Product_Item, result2 error) {
	fake.getDedicatedPackageMutex.Lock()
	defer fake.getDedicatedPackageMutex.Unlock()
	fake.GetDedicatedPackageStub = nil
	fake.getDedicatedPackageReturns = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetDedicatedPackageReturnsOnCall(i int, result1 []datatypes.Product_Item, result2 error) {
	fake.getDedicatedPackageMutex.Lock()
	defer fake.getDedicatedPackageMutex.Unlock()
	fake.GetDedicatedPackageStub = nil
	if fake.getDedicatedPackageReturnsOnCall == nil {
		fake.getDedicatedPackageReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Item
			result2 error
		})
	}
	fake.getDedicatedPackageReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetFirewallBillingItem(arg1 int, arg2 bool) (datatypes.Billing_Item, error) {
	fake.getFirewallBillingItemMutex.Lock()
	ret, specificReturn := fake.getFirewallBillingItemReturnsOnCall[len(fake.getFirewallBillingItemArgsForCall)]
	fake.getFirewallBillingItemArgsForCall = append(fake.getFirewallBillingItemArgsForCall, struct {
		arg1 int
		arg2 bool
	}{arg1, arg2})
	stub := fake.GetFirewallBillingItemStub
	fakeReturns := fake.getFirewallBillingItemReturns
	fake.recordInvocation("GetFirewallBillingItem", []interface{}{arg1, arg2})
	fake.getFirewallBillingItemMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) GetFirewallBillingItemCallCount() int {
	fake.getFirewallBillingItemMutex.RLock()
	defer fake.getFirewallBillingItemMutex.RUnlock()
	return len(fake.getFirewallBillingItemArgsForCall)
}

func (fake *FakeFirewallManager) GetFirewallBillingItemCalls(stub func(int, bool) (datatypes.Billing_Item, error)) {
	fake.getFirewallBillingItemMutex.Lock()
	defer fake.getFirewallBillingItemMutex.Unlock()
	fake.GetFirewallBillingItemStub = stub
}

func (fake *FakeFirewallManager) GetFirewallBillingItemArgsForCall(i int) (int, bool) {
	fake.getFirewallBillingItemMutex.RLock()
	defer fake.getFirewallBillingItemMutex.RUnlock()
	argsForCall := fake.getFirewallBillingItemArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallManager) GetFirewallBillingItemReturns(result1 datatypes.Billing_Item, result2 error) {
	fake.getFirewallBillingItemMutex.Lock()
	defer fake.getFirewallBillingItemMutex.Unlock()
	fake.GetFirewallBillingItemStub = nil
	fake.getFirewallBillingItemReturns = struct {
		result1 datatypes.Billing_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetFirewallBillingItemReturnsOnCall(i int, result1 datatypes.Billing_Item, result2 error) {
	fake.getFirewallBillingItemMutex.Lock()
	defer fake.getFirewallBillingItemMutex.Unlock()
	fake.GetFirewallBillingItemStub = nil
	if fake.getFirewallBillingItemReturnsOnCall == nil {
		fake.getFirewallBillingItemReturnsOnCall = make(map[int]struct {
			result1 datatypes.Billing_Item
			result2 error
		})
	}
	fake.getFirewallBillingItemReturnsOnCall[i] = struct {
		result1 datatypes.Billing_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetFirewallPortSpeed(arg1 int, arg2 bool) (int, error) {
	fake.getFirewallPortSpeedMutex.Lock()
	ret, specificReturn := fake.getFirewallPortSpeedReturnsOnCall[len(fake.getFirewallPortSpeedArgsForCall)]
	fake.getFirewallPortSpeedArgsForCall = append(fake.getFirewallPortSpeedArgsForCall, struct {
		arg1 int
		arg2 bool
	}{arg1, arg2})
	stub := fake.GetFirewallPortSpeedStub
	fakeReturns := fake.getFirewallPortSpeedReturns
	fake.recordInvocation("GetFirewallPortSpeed", []interface{}{arg1, arg2})
	fake.getFirewallPortSpeedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) GetFirewallPortSpeedCallCount() int {
	fake.getFirewallPortSpeedMutex.RLock()
	defer fake.getFirewallPortSpeedMutex.RUnlock()
	return len(fake.getFirewallPortSpeedArgsForCall)
}

func (fake *FakeFirewallManager) GetFirewallPortSpeedCalls(stub func(int, bool) (int, error)) {
	fake.getFirewallPortSpeedMutex.Lock()
	defer fake.getFirewallPortSpeedMutex.Unlock()
	fake.GetFirewallPortSpeedStub = stub
}

func (fake *FakeFirewallManager) GetFirewallPortSpeedArgsForCall(i int) (int, bool) {
	fake.getFirewallPortSpeedMutex.RLock()
	defer fake.getFirewallPortSpeedMutex.RUnlock()
	argsForCall := fake.getFirewallPortSpeedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallManager) GetFirewallPortSpeedReturns(result1 int, result2 error) {
	fake.getFirewallPortSpeedMutex.Lock()
	defer fake.getFirewallPortSpeedMutex.Unlock()
	fake.GetFirewallPortSpeedStub = nil
	fake.getFirewallPortSpeedReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetFirewallPortSpeedReturnsOnCall(i int, result1 int, result2 error) {
	fake.getFirewallPortSpeedMutex.Lock()
	defer fake.getFirewallPortSpeedMutex.Unlock()
	fake.GetFirewallPortSpeedStub = nil
	if fake.getFirewallPortSpeedReturnsOnCall == nil {
		fake.getFirewallPortSpeedReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.getFirewallPortSpeedReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetFirewalls() ([]datatypes.Network_Vlan, error) {
	fake.getFirewallsMutex.Lock()
	ret, specificReturn := fake.getFirewallsReturnsOnCall[len(fake.getFirewallsArgsForCall)]
	fake.getFirewallsArgsForCall = append(fake.getFirewallsArgsForCall, struct {
	}{})
	stub := fake.GetFirewallsStub
	fakeReturns := fake.getFirewallsReturns
	fake.recordInvocation("GetFirewalls", []interface{}{})
	fake.getFirewallsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) GetFirewallsCallCount() int {
	fake.getFirewallsMutex.RLock()
	defer fake.getFirewallsMutex.RUnlock()
	return len(fake.getFirewallsArgsForCall)
}

func (fake *FakeFirewallManager) GetFirewallsCalls(stub func() ([]datatypes.Network_Vlan, error)) {
	fake.getFirewallsMutex.Lock()
	defer fake.getFirewallsMutex.Unlock()
	fake.GetFirewallsStub = stub
}

func (fake *FakeFirewallManager) GetFirewallsReturns(result1 []datatypes.Network_Vlan, result2 error) {
	fake.getFirewallsMutex.Lock()
	defer fake.getFirewallsMutex.Unlock()
	fake.GetFirewallsStub = nil
	fake.getFirewallsReturns = struct {
		result1 []datatypes.Network_Vlan
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetFirewallsReturnsOnCall(i int, result1 []datatypes.Network_Vlan, result2 error) {
	fake.getFirewallsMutex.Lock()
	defer fake.getFirewallsMutex.Unlock()
	fake.GetFirewallsStub = nil
	if fake.getFirewallsReturnsOnCall == nil {
		fake.getFirewallsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Vlan
			result2 error
		})
	}
	fake.getFirewallsReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Vlan
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetMultiVlanFirewall(arg1 int, arg2 string) (datatypes.Network_Vlan_Firewall, error) {
	fake.getMultiVlanFirewallMutex.Lock()
	ret, specificReturn := fake.getMultiVlanFirewallReturnsOnCall[len(fake.getMultiVlanFirewallArgsForCall)]
	fake.getMultiVlanFirewallArgsForCall = append(fake.getMultiVlanFirewallArgsForCall, struct {
		arg1 int
		arg2 string
	}{arg1, arg2})
	stub := fake.GetMultiVlanFirewallStub
	fakeReturns := fake.getMultiVlanFirewallReturns
	fake.recordInvocation("GetMultiVlanFirewall", []interface{}{arg1, arg2})
	fake.getMultiVlanFirewallMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallCallCount() int {
	fake.getMultiVlanFirewallMutex.RLock()
	defer fake.getMultiVlanFirewallMutex.RUnlock()
	return len(fake.getMultiVlanFirewallArgsForCall)
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallCalls(stub func(int, string) (datatypes.Network_Vlan_Firewall, error)) {
	fake.getMultiVlanFirewallMutex.Lock()
	defer fake.getMultiVlanFirewallMutex.Unlock()
	fake.GetMultiVlanFirewallStub = stub
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallArgsForCall(i int) (int, string) {
	fake.getMultiVlanFirewallMutex.RLock()
	defer fake.getMultiVlanFirewallMutex.RUnlock()
	argsForCall := fake.getMultiVlanFirewallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallReturns(result1 datatypes.Network_Vlan_Firewall, result2 error) {
	fake.getMultiVlanFirewallMutex.Lock()
	defer fake.getMultiVlanFirewallMutex.Unlock()
	fake.GetMultiVlanFirewallStub = nil
	fake.getMultiVlanFirewallReturns = struct {
		result1 datatypes.Network_Vlan_Firewall
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallReturnsOnCall(i int, result1 datatypes.Network_Vlan_Firewall, result2 error) {
	fake.getMultiVlanFirewallMutex.Lock()
	defer fake.getMultiVlanFirewallMutex.Unlock()
	fake.GetMultiVlanFirewallStub = nil
	if fake.getMultiVlanFirewallReturnsOnCall == nil {
		fake.getMultiVlanFirewallReturnsOnCall = make(map[int]struct {
			result1 datatypes.Network_Vlan_Firewall
			result2 error
		})
	}
	fake.getMultiVlanFirewallReturnsOnCall[i] = struct {
		result1 datatypes.Network_Vlan_Firewall
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetMultiVlanFirewalls(arg1 string) ([]datatypes.Network_Gateway, error) {
	fake.getMultiVlanFirewallsMutex.Lock()
	ret, specificReturn := fake.getMultiVlanFirewallsReturnsOnCall[len(fake.getMultiVlanFirewallsArgsForCall)]
	fake.getMultiVlanFirewallsArgsForCall = append(fake.getMultiVlanFirewallsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetMultiVlanFirewallsStub
	fakeReturns := fake.getMultiVlanFirewallsReturns
	fake.recordInvocation("GetMultiVlanFirewalls", []interface{}{arg1})
	fake.getMultiVlanFirewallsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallsCallCount() int {
	fake.getMultiVlanFirewallsMutex.RLock()
	defer fake.getMultiVlanFirewallsMutex.RUnlock()
	return len(fake.getMultiVlanFirewallsArgsForCall)
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallsCalls(stub func(string) ([]datatypes.Network_Gateway, error)) {
	fake.getMultiVlanFirewallsMutex.Lock()
	defer fake.getMultiVlanFirewallsMutex.Unlock()
	fake.GetMultiVlanFirewallsStub = stub
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallsArgsForCall(i int) string {
	fake.getMultiVlanFirewallsMutex.RLock()
	defer fake.getMultiVlanFirewallsMutex.RUnlock()
	argsForCall := fake.getMultiVlanFirewallsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallsReturns(result1 []datatypes.Network_Gateway, result2 error) {
	fake.getMultiVlanFirewallsMutex.Lock()
	defer fake.getMultiVlanFirewallsMutex.Unlock()
	fake.GetMultiVlanFirewallsStub = nil
	fake.getMultiVlanFirewallsReturns = struct {
		result1 []datatypes.Network_Gateway
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetMultiVlanFirewallsReturnsOnCall(i int, result1 []datatypes.Network_Gateway, result2 error) {
	fake.getMultiVlanFirewallsMutex.Lock()
	defer fake.getMultiVlanFirewallsMutex.Unlock()
	fake.GetMultiVlanFirewallsStub = nil
	if fake.getMultiVlanFirewallsReturnsOnCall == nil {
		fake.getMultiVlanFirewallsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Gateway
			result2 error
		})
	}
	fake.getMultiVlanFirewallsReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Gateway
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetStandardFirewallRules(arg1 int) ([]datatypes.Network_Component_Firewall_Rule, error) {
	fake.getStandardFirewallRulesMutex.Lock()
	ret, specificReturn := fake.getStandardFirewallRulesReturnsOnCall[len(fake.getStandardFirewallRulesArgsForCall)]
	fake.getStandardFirewallRulesArgsForCall = append(fake.getStandardFirewallRulesArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetStandardFirewallRulesStub
	fakeReturns := fake.getStandardFirewallRulesReturns
	fake.recordInvocation("GetStandardFirewallRules", []interface{}{arg1})
	fake.getStandardFirewallRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) GetStandardFirewallRulesCallCount() int {
	fake.getStandardFirewallRulesMutex.RLock()
	defer fake.getStandardFirewallRulesMutex.RUnlock()
	return len(fake.getStandardFirewallRulesArgsForCall)
}

func (fake *FakeFirewallManager) GetStandardFirewallRulesCalls(stub func(int) ([]datatypes.Network_Component_Firewall_Rule, error)) {
	fake.getStandardFirewallRulesMutex.Lock()
	defer fake.getStandardFirewallRulesMutex.Unlock()
	fake.GetStandardFirewallRulesStub = stub
}

func (fake *FakeFirewallManager) GetStandardFirewallRulesArgsForCall(i int) int {
	fake.getStandardFirewallRulesMutex.RLock()
	defer fake.getStandardFirewallRulesMutex.RUnlock()
	argsForCall := fake.getStandardFirewallRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFirewallManager) GetStandardFirewallRulesReturns(result1 []datatypes.Network_Component_Firewall_Rule, result2 error) {
	fake.getStandardFirewallRulesMutex.Lock()
	defer fake.getStandardFirewallRulesMutex.Unlock()
	fake.GetStandardFirewallRulesStub = nil
	fake.getStandardFirewallRulesReturns = struct {
		result1 []datatypes.Network_Component_Firewall_Rule
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetStandardFirewallRulesReturnsOnCall(i int, result1 []datatypes.Network_Component_Firewall_Rule, result2 error) {
	fake.getStandardFirewallRulesMutex.Lock()
	defer fake.getStandardFirewallRulesMutex.Unlock()
	fake.GetStandardFirewallRulesStub = nil
	if fake.getStandardFirewallRulesReturnsOnCall == nil {
		fake.getStandardFirewallRulesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Network_Component_Firewall_Rule
			result2 error
		})
	}
	fake.getStandardFirewallRulesReturnsOnCall[i] = struct {
		result1 []datatypes.Network_Component_Firewall_Rule
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetStandardPackage(arg1 int, arg2 bool) ([]datatypes.Product_Item, error) {
	fake.getStandardPackageMutex.Lock()
	ret, specificReturn := fake.getStandardPackageReturnsOnCall[len(fake.getStandardPackageArgsForCall)]
	fake.getStandardPackageArgsForCall = append(fake.getStandardPackageArgsForCall, struct {
		arg1 int
		arg2 bool
	}{arg1, arg2})
	stub := fake.GetStandardPackageStub
	fakeReturns := fake.getStandardPackageReturns
	fake.recordInvocation("GetStandardPackage", []interface{}{arg1, arg2})
	fake.getStandardPackageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFirewallManager) GetStandardPackageCallCount() int {
	fake.getStandardPackageMutex.RLock()
	defer fake.getStandardPackageMutex.RUnlock()
	return len(fake.getStandardPackageArgsForCall)
}

func (fake *FakeFirewallManager) GetStandardPackageCalls(stub func(int, bool) ([]datatypes.Product_Item, error)) {
	fake.getStandardPackageMutex.Lock()
	defer fake.getStandardPackageMutex.Unlock()
	fake.GetStandardPackageStub = stub
}

func (fake *FakeFirewallManager) GetStandardPackageArgsForCall(i int) (int, bool) {
	fake.getStandardPackageMutex.RLock()
	defer fake.getStandardPackageMutex.RUnlock()
	argsForCall := fake.getStandardPackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFirewallManager) GetStandardPackageReturns(result1 []datatypes.Product_Item, result2 error) {
	fake.getStandardPackageMutex.Lock()
	defer fake.getStandardPackageMutex.Unlock()
	fake.GetStandardPackageStub = nil
	fake.getStandardPackageReturns = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetStandardPackageReturnsOnCall(i int, result1 []datatypes.Product_Item, result2 error) {
	fake.getStandardPackageMutex.Lock()
	defer fake.getStandardPackageMutex.Unlock()
	fake.GetStandardPackageStub = nil
	if fake.getStandardPackageReturnsOnCall == nil {
		fake.getStandardPackageReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Product_Item
			result2 error
		})
	}
	fake.getStandardPackageReturnsOnCall[i] = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) HasFirewall(arg1 datatypes.Network_Vlan) bool {
	fake.hasFirewallMutex.Lock()
	ret, specificReturn := fake.hasFirewallReturnsOnCall[len(fake.hasFirewallArgsForCall)]
	fake.hasFirewallArgsForCall = append(fake.hasFirewallArgsForCall, struct {
		arg1 datatypes.Network_Vlan
	}{arg1})
	stub := fake.HasFirewallStub
	fakeReturns := fake.hasFirewallReturns
	fake.recordInvocation("HasFirewall", []interface{}{arg1})
	fake.hasFirewallMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFirewallManager) HasFirewallCallCount() int {
	fake.hasFirewallMutex.RLock()
	defer fake.hasFirewallMutex.RUnlock()
	return len(fake.hasFirewallArgsForCall)
}

func (fake *FakeFirewallManager) HasFirewallCalls(stub func(datatypes.Network_Vlan) bool) {
	fake.hasFirewallMutex.Lock()
	defer fake.hasFirewallMutex.Unlock()
	fake.HasFirewallStub = stub
}

func (fake *FakeFirewallManager) HasFirewallArgsForCall(i int) datatypes.Network_Vlan {
	fake.hasFirewallMutex.RLock()
	defer fake.hasFirewallMutex.RUnlock()
	argsForCall := fake.hasFirewallArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFirewallManager) HasFirewallReturns(result1 bool) {
	fake.hasFirewallMutex.Lock()
	defer fake.hasFirewallMutex.Unlock()
	fake.HasFirewallStub = nil
	fake.hasFirewallReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFirewallManager) HasFirewallReturnsOnCall(i int, result1 bool) {
	fake.hasFirewallMutex.Lock()
	defer fake.hasFirewallMutex.Unlock()
	fake.HasFirewallStub = nil
	if fake.hasFirewallReturnsOnCall == nil {
		fake.hasFirewallReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasFirewallReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFirewallManager) ParseFirewallID(arg1 string) (string, int, error) {
	fake.parseFirewallIDMutex.Lock()
	ret, specificReturn := fake.parseFirewallIDReturnsOnCall[len(fake.parseFirewallIDArgsForCall)]
	fake.parseFirewallIDArgsForCall = append(fake.parseFirewallIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ParseFirewallIDStub
	fakeReturns := fake.parseFirewallIDReturns
	fake.recordInvocation("ParseFirewallID", []interface{}{arg1})
	fake.parseFirewallIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeFirewallManager) ParseFirewallIDCallCount() int {
	fake.parseFirewallIDMutex.RLock()
	defer fake.parseFirewallIDMutex.RUnlock()
	return len(fake.parseFirewallIDArgsForCall)
}

func (fake *FakeFirewallManager) ParseFirewallIDCalls(stub func(string) (string, int, error)) {
	fake.parseFirewallIDMutex.Lock()
	defer fake.parseFirewallIDMutex.Unlock()
	fake.ParseFirewallIDStub = stub
}

func (fake *FakeFirewallManager) ParseFirewallIDArgsForCall(i int) string {
	fake.parseFirewallIDMutex.RLock()
	defer fake.parseFirewallIDMutex.RUnlock()
	argsForCall := fake.parseFirewallIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFirewallManager) ParseFirewallIDReturns(result1 string, result2 int, result3 error) {
	fake.parseFirewallIDMutex.Lock()
	defer fake.parseFirewallIDMutex.Unlock()
	fake.ParseFirewallIDStub = nil
	fake.parseFirewallIDReturns = struct {
		result1 string
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFirewallManager) ParseFirewallIDReturnsOnCall(i int, result1 string, result2 int, result3 error) {
	fake.parseFirewallIDMutex.Lock()
	defer fake.parseFirewallIDMutex.Unlock()
	fake.ParseFirewallIDStub = nil
	if fake.parseFirewallIDReturnsOnCall == nil {
		fake.parseFirewallIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 int
			result3 error
		})
	}
	fake.parseFirewallIDReturnsOnCall[i] = struct {
		result1 string
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFirewallManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addStandardFirewallMutex.RLock()
	defer fake.addStandardFirewallMutex.RUnlock()
	fake.addVlanFirewallMutex.RLock()
	defer fake.addVlanFirewallMutex.RUnlock()
	fake.cancelFirewallMutex.RLock()
	defer fake.cancelFirewallMutex.RUnlock()
	fake.editDedicatedFirewallRulesMutex.RLock()
	defer fake.editDedicatedFirewallRulesMutex.RUnlock()
	fake.editStandardFirewallRulesMutex.RLock()
	defer fake.editStandardFirewallRulesMutex.RUnlock()
	fake.getDedicatedFirewallRulesMutex.RLock()
	defer fake.getDedicatedFirewallRulesMutex.RUnlock()
	fake.getDedicatedPackageMutex.RLock()
	defer fake.getDedicatedPackageMutex.RUnlock()
	fake.getFirewallBillingItemMutex.RLock()
	defer fake.getFirewallBillingItemMutex.RUnlock()
	fake.getFirewallPortSpeedMutex.RLock()
	defer fake.getFirewallPortSpeedMutex.RUnlock()
	fake.getFirewallsMutex.RLock()
	defer fake.getFirewallsMutex.RUnlock()
	fake.getMultiVlanFirewallMutex.RLock()
	defer fake.getMultiVlanFirewallMutex.RUnlock()
	fake.getMultiVlanFirewallsMutex.RLock()
	defer fake.getMultiVlanFirewallsMutex.RUnlock()
	fake.getStandardFirewallRulesMutex.RLock()
	defer fake.getStandardFirewallRulesMutex.RUnlock()
	fake.getStandardPackageMutex.RLock()
	defer fake.getStandardPackageMutex.RUnlock()
	fake.hasFirewallMutex.RLock()
	defer fake.hasFirewallMutex.RUnlock()
	fake.parseFirewallIDMutex.RLock()
	defer fake.parseFirewallIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFirewallManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.FirewallManager = new(FakeFirewallManager)
