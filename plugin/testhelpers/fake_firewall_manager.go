// This file was generated by counterfeiter
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/cgallo/softlayer-cli/plugin/managers"
)

type FakeFirewallManager struct {
	AddVlanFirewallStub        func(vlanId int, HAenabled bool) (datatypes.Container_Product_Order_Receipt, error)
	addVlanFirewallMutex       sync.RWMutex
	addVlanFirewallArgsForCall []struct {
		vlanId    int
		HAenabled bool
	}
	addVlanFirewallReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	AddStandardFirewallStub        func(serverId int, isVirtual bool) (datatypes.Container_Product_Order_Receipt, error)
	addStandardFirewallMutex       sync.RWMutex
	addStandardFirewallArgsForCall []struct {
		serverId  int
		isVirtual bool
	}
	addStandardFirewallReturns struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}
	GetFirewallsStub        func() ([]datatypes.Network_Vlan, error)
	getFirewallsMutex       sync.RWMutex
	getFirewallsArgsForCall []struct{}
	getFirewallsReturns     struct {
		result1 []datatypes.Network_Vlan
		result2 error
	}
	HasFirewallStub        func(vlan datatypes.Network_Vlan) bool
	hasFirewallMutex       sync.RWMutex
	hasFirewallArgsForCall []struct {
		vlan datatypes.Network_Vlan
	}
	hasFirewallReturns struct {
		result1 bool
	}
	GetFirewallBillingItemStub        func(fwId int, dedicated bool) (datatypes.Billing_Item, error)
	getFirewallBillingItemMutex       sync.RWMutex
	getFirewallBillingItemArgsForCall []struct {
		fwId      int
		dedicated bool
	}
	getFirewallBillingItemReturns struct {
		result1 datatypes.Billing_Item
		result2 error
	}
	GetStandardFirewallRulesStub        func(fwId int) ([]datatypes.Network_Component_Firewall_Rule, error)
	getStandardFirewallRulesMutex       sync.RWMutex
	getStandardFirewallRulesArgsForCall []struct {
		fwId int
	}
	getStandardFirewallRulesReturns struct {
		result1 []datatypes.Network_Component_Firewall_Rule
		result2 error
	}
	GetDedicatedFirewallRulesStub        func(fwId int) ([]datatypes.Network_Vlan_Firewall_Rule, error)
	getDedicatedFirewallRulesMutex       sync.RWMutex
	getDedicatedFirewallRulesArgsForCall []struct {
		fwId int
	}
	getDedicatedFirewallRulesReturns struct {
		result1 []datatypes.Network_Vlan_Firewall_Rule
		result2 error
	}
	CancelFirewallStub        func(fwId int, dedicated bool) error
	cancelFirewallMutex       sync.RWMutex
	cancelFirewallArgsForCall []struct {
		fwId      int
		dedicated bool
	}
	cancelFirewallReturns struct {
		result1 error
	}
	GetStandardPackageStub        func(serverId int, isVirtual bool) ([]datatypes.Product_Item, error)
	getStandardPackageMutex       sync.RWMutex
	getStandardPackageArgsForCall []struct {
		serverId  int
		isVirtual bool
	}
	getStandardPackageReturns struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	GetDedicatedPackageStub        func(HAEnabled bool) ([]datatypes.Product_Item, error)
	getDedicatedPackageMutex       sync.RWMutex
	getDedicatedPackageArgsForCall []struct {
		HAEnabled bool
	}
	getDedicatedPackageReturns struct {
		result1 []datatypes.Product_Item
		result2 error
	}
	GetFirewallPortSpeedStub        func(serverId int, isVirtual bool) (int, error)
	getFirewallPortSpeedMutex       sync.RWMutex
	getFirewallPortSpeedArgsForCall []struct {
		serverId  int
		isVirtual bool
	}
	getFirewallPortSpeedReturns struct {
		result1 int
		result2 error
	}
	ParseFirewallIDStub        func(inputString string) (string, int, error)
	parseFirewallIDMutex       sync.RWMutex
	parseFirewallIDArgsForCall []struct {
		inputString string
	}
	parseFirewallIDReturns struct {
		result1 string
		result2 int
		result3 error
	}
	EditDedicatedFirewallRulesStub        func(firewallId int, rules []datatypes.Network_Vlan_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error)
	editDedicatedFirewallRulesMutex       sync.RWMutex
	editDedicatedFirewallRulesArgsForCall []struct {
		firewallId int
		rules      []datatypes.Network_Vlan_Firewall_Rule
	}
	editDedicatedFirewallRulesReturns struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}
	EditStandardFirewallRulesStub        func(firewallId int, rules []datatypes.Network_Component_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error)
	editStandardFirewallRulesMutex       sync.RWMutex
	editStandardFirewallRulesArgsForCall []struct {
		firewallId int
		rules      []datatypes.Network_Component_Firewall_Rule
	}
	editStandardFirewallRulesReturns struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFirewallManager) AddVlanFirewall(vlanId int, HAenabled bool) (datatypes.Container_Product_Order_Receipt, error) {
	fake.addVlanFirewallMutex.Lock()
	fake.addVlanFirewallArgsForCall = append(fake.addVlanFirewallArgsForCall, struct {
		vlanId    int
		HAenabled bool
	}{vlanId, HAenabled})
	fake.recordInvocation("AddVlanFirewall", []interface{}{vlanId, HAenabled})
	fake.addVlanFirewallMutex.Unlock()
	if fake.AddVlanFirewallStub != nil {
		return fake.AddVlanFirewallStub(vlanId, HAenabled)
	} else {
		return fake.addVlanFirewallReturns.result1, fake.addVlanFirewallReturns.result2
	}
}

func (fake *FakeFirewallManager) AddVlanFirewallCallCount() int {
	fake.addVlanFirewallMutex.RLock()
	defer fake.addVlanFirewallMutex.RUnlock()
	return len(fake.addVlanFirewallArgsForCall)
}

func (fake *FakeFirewallManager) AddVlanFirewallArgsForCall(i int) (int, bool) {
	fake.addVlanFirewallMutex.RLock()
	defer fake.addVlanFirewallMutex.RUnlock()
	return fake.addVlanFirewallArgsForCall[i].vlanId, fake.addVlanFirewallArgsForCall[i].HAenabled
}

func (fake *FakeFirewallManager) AddVlanFirewallReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.AddVlanFirewallStub = nil
	fake.addVlanFirewallReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) AddStandardFirewall(serverId int, isVirtual bool) (datatypes.Container_Product_Order_Receipt, error) {
	fake.addStandardFirewallMutex.Lock()
	fake.addStandardFirewallArgsForCall = append(fake.addStandardFirewallArgsForCall, struct {
		serverId  int
		isVirtual bool
	}{serverId, isVirtual})
	fake.recordInvocation("AddStandardFirewall", []interface{}{serverId, isVirtual})
	fake.addStandardFirewallMutex.Unlock()
	if fake.AddStandardFirewallStub != nil {
		return fake.AddStandardFirewallStub(serverId, isVirtual)
	} else {
		return fake.addStandardFirewallReturns.result1, fake.addStandardFirewallReturns.result2
	}
}

func (fake *FakeFirewallManager) AddStandardFirewallCallCount() int {
	fake.addStandardFirewallMutex.RLock()
	defer fake.addStandardFirewallMutex.RUnlock()
	return len(fake.addStandardFirewallArgsForCall)
}

func (fake *FakeFirewallManager) AddStandardFirewallArgsForCall(i int) (int, bool) {
	fake.addStandardFirewallMutex.RLock()
	defer fake.addStandardFirewallMutex.RUnlock()
	return fake.addStandardFirewallArgsForCall[i].serverId, fake.addStandardFirewallArgsForCall[i].isVirtual
}

func (fake *FakeFirewallManager) AddStandardFirewallReturns(result1 datatypes.Container_Product_Order_Receipt, result2 error) {
	fake.AddStandardFirewallStub = nil
	fake.addStandardFirewallReturns = struct {
		result1 datatypes.Container_Product_Order_Receipt
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetFirewalls() ([]datatypes.Network_Vlan, error) {
	fake.getFirewallsMutex.Lock()
	fake.getFirewallsArgsForCall = append(fake.getFirewallsArgsForCall, struct{}{})
	fake.recordInvocation("GetFirewalls", []interface{}{})
	fake.getFirewallsMutex.Unlock()
	if fake.GetFirewallsStub != nil {
		return fake.GetFirewallsStub()
	} else {
		return fake.getFirewallsReturns.result1, fake.getFirewallsReturns.result2
	}
}

func (fake *FakeFirewallManager) GetFirewallsCallCount() int {
	fake.getFirewallsMutex.RLock()
	defer fake.getFirewallsMutex.RUnlock()
	return len(fake.getFirewallsArgsForCall)
}

func (fake *FakeFirewallManager) GetFirewallsReturns(result1 []datatypes.Network_Vlan, result2 error) {
	fake.GetFirewallsStub = nil
	fake.getFirewallsReturns = struct {
		result1 []datatypes.Network_Vlan
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) HasFirewall(vlan datatypes.Network_Vlan) bool {
	fake.hasFirewallMutex.Lock()
	fake.hasFirewallArgsForCall = append(fake.hasFirewallArgsForCall, struct {
		vlan datatypes.Network_Vlan
	}{vlan})
	fake.recordInvocation("HasFirewall", []interface{}{vlan})
	fake.hasFirewallMutex.Unlock()
	if fake.HasFirewallStub != nil {
		return fake.HasFirewallStub(vlan)
	} else {
		return fake.hasFirewallReturns.result1
	}
}

func (fake *FakeFirewallManager) HasFirewallCallCount() int {
	fake.hasFirewallMutex.RLock()
	defer fake.hasFirewallMutex.RUnlock()
	return len(fake.hasFirewallArgsForCall)
}

func (fake *FakeFirewallManager) HasFirewallArgsForCall(i int) datatypes.Network_Vlan {
	fake.hasFirewallMutex.RLock()
	defer fake.hasFirewallMutex.RUnlock()
	return fake.hasFirewallArgsForCall[i].vlan
}

func (fake *FakeFirewallManager) HasFirewallReturns(result1 bool) {
	fake.HasFirewallStub = nil
	fake.hasFirewallReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeFirewallManager) GetFirewallBillingItem(fwId int, dedicated bool) (datatypes.Billing_Item, error) {
	fake.getFirewallBillingItemMutex.Lock()
	fake.getFirewallBillingItemArgsForCall = append(fake.getFirewallBillingItemArgsForCall, struct {
		fwId      int
		dedicated bool
	}{fwId, dedicated})
	fake.recordInvocation("GetFirewallBillingItem", []interface{}{fwId, dedicated})
	fake.getFirewallBillingItemMutex.Unlock()
	if fake.GetFirewallBillingItemStub != nil {
		return fake.GetFirewallBillingItemStub(fwId, dedicated)
	} else {
		return fake.getFirewallBillingItemReturns.result1, fake.getFirewallBillingItemReturns.result2
	}
}

func (fake *FakeFirewallManager) GetFirewallBillingItemCallCount() int {
	fake.getFirewallBillingItemMutex.RLock()
	defer fake.getFirewallBillingItemMutex.RUnlock()
	return len(fake.getFirewallBillingItemArgsForCall)
}

func (fake *FakeFirewallManager) GetFirewallBillingItemArgsForCall(i int) (int, bool) {
	fake.getFirewallBillingItemMutex.RLock()
	defer fake.getFirewallBillingItemMutex.RUnlock()
	return fake.getFirewallBillingItemArgsForCall[i].fwId, fake.getFirewallBillingItemArgsForCall[i].dedicated
}

func (fake *FakeFirewallManager) GetFirewallBillingItemReturns(result1 datatypes.Billing_Item, result2 error) {
	fake.GetFirewallBillingItemStub = nil
	fake.getFirewallBillingItemReturns = struct {
		result1 datatypes.Billing_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetStandardFirewallRules(fwId int) ([]datatypes.Network_Component_Firewall_Rule, error) {
	fake.getStandardFirewallRulesMutex.Lock()
	fake.getStandardFirewallRulesArgsForCall = append(fake.getStandardFirewallRulesArgsForCall, struct {
		fwId int
	}{fwId})
	fake.recordInvocation("GetStandardFirewallRules", []interface{}{fwId})
	fake.getStandardFirewallRulesMutex.Unlock()
	if fake.GetStandardFirewallRulesStub != nil {
		return fake.GetStandardFirewallRulesStub(fwId)
	} else {
		return fake.getStandardFirewallRulesReturns.result1, fake.getStandardFirewallRulesReturns.result2
	}
}

func (fake *FakeFirewallManager) GetStandardFirewallRulesCallCount() int {
	fake.getStandardFirewallRulesMutex.RLock()
	defer fake.getStandardFirewallRulesMutex.RUnlock()
	return len(fake.getStandardFirewallRulesArgsForCall)
}

func (fake *FakeFirewallManager) GetStandardFirewallRulesArgsForCall(i int) int {
	fake.getStandardFirewallRulesMutex.RLock()
	defer fake.getStandardFirewallRulesMutex.RUnlock()
	return fake.getStandardFirewallRulesArgsForCall[i].fwId
}

func (fake *FakeFirewallManager) GetStandardFirewallRulesReturns(result1 []datatypes.Network_Component_Firewall_Rule, result2 error) {
	fake.GetStandardFirewallRulesStub = nil
	fake.getStandardFirewallRulesReturns = struct {
		result1 []datatypes.Network_Component_Firewall_Rule
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRules(fwId int) ([]datatypes.Network_Vlan_Firewall_Rule, error) {
	fake.getDedicatedFirewallRulesMutex.Lock()
	fake.getDedicatedFirewallRulesArgsForCall = append(fake.getDedicatedFirewallRulesArgsForCall, struct {
		fwId int
	}{fwId})
	fake.recordInvocation("GetDedicatedFirewallRules", []interface{}{fwId})
	fake.getDedicatedFirewallRulesMutex.Unlock()
	if fake.GetDedicatedFirewallRulesStub != nil {
		return fake.GetDedicatedFirewallRulesStub(fwId)
	} else {
		return fake.getDedicatedFirewallRulesReturns.result1, fake.getDedicatedFirewallRulesReturns.result2
	}
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRulesCallCount() int {
	fake.getDedicatedFirewallRulesMutex.RLock()
	defer fake.getDedicatedFirewallRulesMutex.RUnlock()
	return len(fake.getDedicatedFirewallRulesArgsForCall)
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRulesArgsForCall(i int) int {
	fake.getDedicatedFirewallRulesMutex.RLock()
	defer fake.getDedicatedFirewallRulesMutex.RUnlock()
	return fake.getDedicatedFirewallRulesArgsForCall[i].fwId
}

func (fake *FakeFirewallManager) GetDedicatedFirewallRulesReturns(result1 []datatypes.Network_Vlan_Firewall_Rule, result2 error) {
	fake.GetDedicatedFirewallRulesStub = nil
	fake.getDedicatedFirewallRulesReturns = struct {
		result1 []datatypes.Network_Vlan_Firewall_Rule
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) CancelFirewall(fwId int, dedicated bool) error {
	fake.cancelFirewallMutex.Lock()
	fake.cancelFirewallArgsForCall = append(fake.cancelFirewallArgsForCall, struct {
		fwId      int
		dedicated bool
	}{fwId, dedicated})
	fake.recordInvocation("CancelFirewall", []interface{}{fwId, dedicated})
	fake.cancelFirewallMutex.Unlock()
	if fake.CancelFirewallStub != nil {
		return fake.CancelFirewallStub(fwId, dedicated)
	} else {
		return fake.cancelFirewallReturns.result1
	}
}

func (fake *FakeFirewallManager) CancelFirewallCallCount() int {
	fake.cancelFirewallMutex.RLock()
	defer fake.cancelFirewallMutex.RUnlock()
	return len(fake.cancelFirewallArgsForCall)
}

func (fake *FakeFirewallManager) CancelFirewallArgsForCall(i int) (int, bool) {
	fake.cancelFirewallMutex.RLock()
	defer fake.cancelFirewallMutex.RUnlock()
	return fake.cancelFirewallArgsForCall[i].fwId, fake.cancelFirewallArgsForCall[i].dedicated
}

func (fake *FakeFirewallManager) CancelFirewallReturns(result1 error) {
	fake.CancelFirewallStub = nil
	fake.cancelFirewallReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallManager) GetStandardPackage(serverId int, isVirtual bool) ([]datatypes.Product_Item, error) {
	fake.getStandardPackageMutex.Lock()
	fake.getStandardPackageArgsForCall = append(fake.getStandardPackageArgsForCall, struct {
		serverId  int
		isVirtual bool
	}{serverId, isVirtual})
	fake.recordInvocation("GetStandardPackage", []interface{}{serverId, isVirtual})
	fake.getStandardPackageMutex.Unlock()
	if fake.GetStandardPackageStub != nil {
		return fake.GetStandardPackageStub(serverId, isVirtual)
	} else {
		return fake.getStandardPackageReturns.result1, fake.getStandardPackageReturns.result2
	}
}

func (fake *FakeFirewallManager) GetStandardPackageCallCount() int {
	fake.getStandardPackageMutex.RLock()
	defer fake.getStandardPackageMutex.RUnlock()
	return len(fake.getStandardPackageArgsForCall)
}

func (fake *FakeFirewallManager) GetStandardPackageArgsForCall(i int) (int, bool) {
	fake.getStandardPackageMutex.RLock()
	defer fake.getStandardPackageMutex.RUnlock()
	return fake.getStandardPackageArgsForCall[i].serverId, fake.getStandardPackageArgsForCall[i].isVirtual
}

func (fake *FakeFirewallManager) GetStandardPackageReturns(result1 []datatypes.Product_Item, result2 error) {
	fake.GetStandardPackageStub = nil
	fake.getStandardPackageReturns = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetDedicatedPackage(HAEnabled bool) ([]datatypes.Product_Item, error) {
	fake.getDedicatedPackageMutex.Lock()
	fake.getDedicatedPackageArgsForCall = append(fake.getDedicatedPackageArgsForCall, struct {
		HAEnabled bool
	}{HAEnabled})
	fake.recordInvocation("GetDedicatedPackage", []interface{}{HAEnabled})
	fake.getDedicatedPackageMutex.Unlock()
	if fake.GetDedicatedPackageStub != nil {
		return fake.GetDedicatedPackageStub(HAEnabled)
	} else {
		return fake.getDedicatedPackageReturns.result1, fake.getDedicatedPackageReturns.result2
	}
}

func (fake *FakeFirewallManager) GetDedicatedPackageCallCount() int {
	fake.getDedicatedPackageMutex.RLock()
	defer fake.getDedicatedPackageMutex.RUnlock()
	return len(fake.getDedicatedPackageArgsForCall)
}

func (fake *FakeFirewallManager) GetDedicatedPackageArgsForCall(i int) bool {
	fake.getDedicatedPackageMutex.RLock()
	defer fake.getDedicatedPackageMutex.RUnlock()
	return fake.getDedicatedPackageArgsForCall[i].HAEnabled
}

func (fake *FakeFirewallManager) GetDedicatedPackageReturns(result1 []datatypes.Product_Item, result2 error) {
	fake.GetDedicatedPackageStub = nil
	fake.getDedicatedPackageReturns = struct {
		result1 []datatypes.Product_Item
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) GetFirewallPortSpeed(serverId int, isVirtual bool) (int, error) {
	fake.getFirewallPortSpeedMutex.Lock()
	fake.getFirewallPortSpeedArgsForCall = append(fake.getFirewallPortSpeedArgsForCall, struct {
		serverId  int
		isVirtual bool
	}{serverId, isVirtual})
	fake.recordInvocation("GetFirewallPortSpeed", []interface{}{serverId, isVirtual})
	fake.getFirewallPortSpeedMutex.Unlock()
	if fake.GetFirewallPortSpeedStub != nil {
		return fake.GetFirewallPortSpeedStub(serverId, isVirtual)
	} else {
		return fake.getFirewallPortSpeedReturns.result1, fake.getFirewallPortSpeedReturns.result2
	}
}

func (fake *FakeFirewallManager) GetFirewallPortSpeedCallCount() int {
	fake.getFirewallPortSpeedMutex.RLock()
	defer fake.getFirewallPortSpeedMutex.RUnlock()
	return len(fake.getFirewallPortSpeedArgsForCall)
}

func (fake *FakeFirewallManager) GetFirewallPortSpeedArgsForCall(i int) (int, bool) {
	fake.getFirewallPortSpeedMutex.RLock()
	defer fake.getFirewallPortSpeedMutex.RUnlock()
	return fake.getFirewallPortSpeedArgsForCall[i].serverId, fake.getFirewallPortSpeedArgsForCall[i].isVirtual
}

func (fake *FakeFirewallManager) GetFirewallPortSpeedReturns(result1 int, result2 error) {
	fake.GetFirewallPortSpeedStub = nil
	fake.getFirewallPortSpeedReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) ParseFirewallID(inputString string) (string, int, error) {
	fake.parseFirewallIDMutex.Lock()
	fake.parseFirewallIDArgsForCall = append(fake.parseFirewallIDArgsForCall, struct {
		inputString string
	}{inputString})
	fake.recordInvocation("ParseFirewallID", []interface{}{inputString})
	fake.parseFirewallIDMutex.Unlock()
	if fake.ParseFirewallIDStub != nil {
		return fake.ParseFirewallIDStub(inputString)
	} else {
		return fake.parseFirewallIDReturns.result1, fake.parseFirewallIDReturns.result2, fake.parseFirewallIDReturns.result3
	}
}

func (fake *FakeFirewallManager) ParseFirewallIDCallCount() int {
	fake.parseFirewallIDMutex.RLock()
	defer fake.parseFirewallIDMutex.RUnlock()
	return len(fake.parseFirewallIDArgsForCall)
}

func (fake *FakeFirewallManager) ParseFirewallIDArgsForCall(i int) string {
	fake.parseFirewallIDMutex.RLock()
	defer fake.parseFirewallIDMutex.RUnlock()
	return fake.parseFirewallIDArgsForCall[i].inputString
}

func (fake *FakeFirewallManager) ParseFirewallIDReturns(result1 string, result2 int, result3 error) {
	fake.ParseFirewallIDStub = nil
	fake.parseFirewallIDReturns = struct {
		result1 string
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRules(firewallId int, rules []datatypes.Network_Vlan_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error) {
	var rulesCopy []datatypes.Network_Vlan_Firewall_Rule
	if rules != nil {
		rulesCopy = make([]datatypes.Network_Vlan_Firewall_Rule, len(rules))
		copy(rulesCopy, rules)
	}
	fake.editDedicatedFirewallRulesMutex.Lock()
	fake.editDedicatedFirewallRulesArgsForCall = append(fake.editDedicatedFirewallRulesArgsForCall, struct {
		firewallId int
		rules      []datatypes.Network_Vlan_Firewall_Rule
	}{firewallId, rulesCopy})
	fake.recordInvocation("EditDedicatedFirewallRules", []interface{}{firewallId, rulesCopy})
	fake.editDedicatedFirewallRulesMutex.Unlock()
	if fake.EditDedicatedFirewallRulesStub != nil {
		return fake.EditDedicatedFirewallRulesStub(firewallId, rules)
	} else {
		return fake.editDedicatedFirewallRulesReturns.result1, fake.editDedicatedFirewallRulesReturns.result2
	}
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRulesCallCount() int {
	fake.editDedicatedFirewallRulesMutex.RLock()
	defer fake.editDedicatedFirewallRulesMutex.RUnlock()
	return len(fake.editDedicatedFirewallRulesArgsForCall)
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRulesArgsForCall(i int) (int, []datatypes.Network_Vlan_Firewall_Rule) {
	fake.editDedicatedFirewallRulesMutex.RLock()
	defer fake.editDedicatedFirewallRulesMutex.RUnlock()
	return fake.editDedicatedFirewallRulesArgsForCall[i].firewallId, fake.editDedicatedFirewallRulesArgsForCall[i].rules
}

func (fake *FakeFirewallManager) EditDedicatedFirewallRulesReturns(result1 datatypes.Network_Firewall_Update_Request, result2 error) {
	fake.EditDedicatedFirewallRulesStub = nil
	fake.editDedicatedFirewallRulesReturns = struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) EditStandardFirewallRules(firewallId int, rules []datatypes.Network_Component_Firewall_Rule) (datatypes.Network_Firewall_Update_Request, error) {
	var rulesCopy []datatypes.Network_Component_Firewall_Rule
	if rules != nil {
		rulesCopy = make([]datatypes.Network_Component_Firewall_Rule, len(rules))
		copy(rulesCopy, rules)
	}
	fake.editStandardFirewallRulesMutex.Lock()
	fake.editStandardFirewallRulesArgsForCall = append(fake.editStandardFirewallRulesArgsForCall, struct {
		firewallId int
		rules      []datatypes.Network_Component_Firewall_Rule
	}{firewallId, rulesCopy})
	fake.recordInvocation("EditStandardFirewallRules", []interface{}{firewallId, rulesCopy})
	fake.editStandardFirewallRulesMutex.Unlock()
	if fake.EditStandardFirewallRulesStub != nil {
		return fake.EditStandardFirewallRulesStub(firewallId, rules)
	} else {
		return fake.editStandardFirewallRulesReturns.result1, fake.editStandardFirewallRulesReturns.result2
	}
}

func (fake *FakeFirewallManager) EditStandardFirewallRulesCallCount() int {
	fake.editStandardFirewallRulesMutex.RLock()
	defer fake.editStandardFirewallRulesMutex.RUnlock()
	return len(fake.editStandardFirewallRulesArgsForCall)
}

func (fake *FakeFirewallManager) EditStandardFirewallRulesArgsForCall(i int) (int, []datatypes.Network_Component_Firewall_Rule) {
	fake.editStandardFirewallRulesMutex.RLock()
	defer fake.editStandardFirewallRulesMutex.RUnlock()
	return fake.editStandardFirewallRulesArgsForCall[i].firewallId, fake.editStandardFirewallRulesArgsForCall[i].rules
}

func (fake *FakeFirewallManager) EditStandardFirewallRulesReturns(result1 datatypes.Network_Firewall_Update_Request, result2 error) {
	fake.EditStandardFirewallRulesStub = nil
	fake.editStandardFirewallRulesReturns = struct {
		result1 datatypes.Network_Firewall_Update_Request
		result2 error
	}{result1, result2}
}

func (fake *FakeFirewallManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addVlanFirewallMutex.RLock()
	defer fake.addVlanFirewallMutex.RUnlock()
	fake.addStandardFirewallMutex.RLock()
	defer fake.addStandardFirewallMutex.RUnlock()
	fake.getFirewallsMutex.RLock()
	defer fake.getFirewallsMutex.RUnlock()
	fake.hasFirewallMutex.RLock()
	defer fake.hasFirewallMutex.RUnlock()
	fake.getFirewallBillingItemMutex.RLock()
	defer fake.getFirewallBillingItemMutex.RUnlock()
	fake.getStandardFirewallRulesMutex.RLock()
	defer fake.getStandardFirewallRulesMutex.RUnlock()
	fake.getDedicatedFirewallRulesMutex.RLock()
	defer fake.getDedicatedFirewallRulesMutex.RUnlock()
	fake.cancelFirewallMutex.RLock()
	defer fake.cancelFirewallMutex.RUnlock()
	fake.getStandardPackageMutex.RLock()
	defer fake.getStandardPackageMutex.RUnlock()
	fake.getDedicatedPackageMutex.RLock()
	defer fake.getDedicatedPackageMutex.RUnlock()
	fake.getFirewallPortSpeedMutex.RLock()
	defer fake.getFirewallPortSpeedMutex.RUnlock()
	fake.parseFirewallIDMutex.RLock()
	defer fake.parseFirewallIDMutex.RUnlock()
	fake.editDedicatedFirewallRulesMutex.RLock()
	defer fake.editDedicatedFirewallRulesMutex.RUnlock()
	fake.editStandardFirewallRulesMutex.RLock()
	defer fake.editStandardFirewallRulesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFirewallManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.FirewallManager = new(FakeFirewallManager)
