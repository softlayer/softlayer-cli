// This file was generated by counterfeiter
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/cgallo/softlayer-cli/plugin/managers"
)

type FakeDNSManager struct {
	GetZoneIdFromNameStub        func(zoneName string) (int, error)
	getZoneIdFromNameMutex       sync.RWMutex
	getZoneIdFromNameArgsForCall []struct {
		zoneName string
	}
	getZoneIdFromNameReturns struct {
		result1 int
		result2 error
	}
	ListZonesStub        func() ([]datatypes.Dns_Domain, error)
	listZonesMutex       sync.RWMutex
	listZonesArgsForCall []struct{}
	listZonesReturns     struct {
		result1 []datatypes.Dns_Domain
		result2 error
	}
	GetZoneStub        func(zoneId int, getRecords bool) (datatypes.Dns_Domain, error)
	getZoneMutex       sync.RWMutex
	getZoneArgsForCall []struct {
		zoneId     int
		getRecords bool
	}
	getZoneReturns struct {
		result1 datatypes.Dns_Domain
		result2 error
	}
	CreateZoneStub        func(zoneName string) (datatypes.Dns_Domain, error)
	createZoneMutex       sync.RWMutex
	createZoneArgsForCall []struct {
		zoneName string
	}
	createZoneReturns struct {
		result1 datatypes.Dns_Domain
		result2 error
	}
	DeleteZoneStub        func(zoneId int) error
	deleteZoneMutex       sync.RWMutex
	deleteZoneArgsForCall []struct {
		zoneId int
	}
	deleteZoneReturns struct {
		result1 error
	}
	DumpZoneStub        func(zoneId int) (string, error)
	dumpZoneMutex       sync.RWMutex
	dumpZoneArgsForCall []struct {
		zoneId int
	}
	dumpZoneReturns struct {
		result1 string
		result2 error
	}
	CreateResourceRecordStub        func(zoneId int, host string, recordType string, data string, ttl int) (datatypes.Dns_Domain_ResourceRecord, error)
	createResourceRecordMutex       sync.RWMutex
	createResourceRecordArgsForCall []struct {
		zoneId     int
		host       string
		recordType string
		data       string
		ttl        int
	}
	createResourceRecordReturns struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	DeleteResourceRecordStub        func(recordId int) error
	deleteResourceRecordMutex       sync.RWMutex
	deleteResourceRecordArgsForCall []struct {
		recordId int
	}
	deleteResourceRecordReturns struct {
		result1 error
	}
	GetResourceRecordStub        func(recordId int) (datatypes.Dns_Domain_ResourceRecord, error)
	getResourceRecordMutex       sync.RWMutex
	getResourceRecordArgsForCall []struct {
		recordId int
	}
	getResourceRecordReturns struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	ListResourceRecordsStub        func(zoneId int, recordType string, host string, data string, ttl int, mask string) ([]datatypes.Dns_Domain_ResourceRecord, error)
	listResourceRecordsMutex       sync.RWMutex
	listResourceRecordsArgsForCall []struct {
		zoneId     int
		recordType string
		host       string
		data       string
		ttl        int
		mask       string
	}
	listResourceRecordsReturns struct {
		result1 []datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	EditResourceRecordStub        func(record datatypes.Dns_Domain_ResourceRecord) error
	editResourceRecordMutex       sync.RWMutex
	editResourceRecordArgsForCall []struct {
		record datatypes.Dns_Domain_ResourceRecord
	}
	editResourceRecordReturns struct {
		result1 error
	}
	SyncARecordStub        func(vs datatypes.Virtual_Guest, zoneId int, ttl int) error
	syncARecordMutex       sync.RWMutex
	syncARecordArgsForCall []struct {
		vs     datatypes.Virtual_Guest
		zoneId int
		ttl    int
	}
	syncARecordReturns struct {
		result1 error
	}
	SyncAAAARecordStub        func(vs datatypes.Virtual_Guest, zoneId int, ttl int) error
	syncAAAARecordMutex       sync.RWMutex
	syncAAAARecordArgsForCall []struct {
		vs     datatypes.Virtual_Guest
		zoneId int
		ttl    int
	}
	syncAAAARecordReturns struct {
		result1 error
	}
	SyncPTRRecordStub        func(vs datatypes.Virtual_Guest, ttl int) error
	syncPTRRecordMutex       sync.RWMutex
	syncPTRRecordArgsForCall []struct {
		vs  datatypes.Virtual_Guest
		ttl int
	}
	syncPTRRecordReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDNSManager) GetZoneIdFromName(zoneName string) (int, error) {
	fake.getZoneIdFromNameMutex.Lock()
	fake.getZoneIdFromNameArgsForCall = append(fake.getZoneIdFromNameArgsForCall, struct {
		zoneName string
	}{zoneName})
	fake.recordInvocation("GetZoneIdFromName", []interface{}{zoneName})
	fake.getZoneIdFromNameMutex.Unlock()
	if fake.GetZoneIdFromNameStub != nil {
		return fake.GetZoneIdFromNameStub(zoneName)
	} else {
		return fake.getZoneIdFromNameReturns.result1, fake.getZoneIdFromNameReturns.result2
	}
}

func (fake *FakeDNSManager) GetZoneIdFromNameCallCount() int {
	fake.getZoneIdFromNameMutex.RLock()
	defer fake.getZoneIdFromNameMutex.RUnlock()
	return len(fake.getZoneIdFromNameArgsForCall)
}

func (fake *FakeDNSManager) GetZoneIdFromNameArgsForCall(i int) string {
	fake.getZoneIdFromNameMutex.RLock()
	defer fake.getZoneIdFromNameMutex.RUnlock()
	return fake.getZoneIdFromNameArgsForCall[i].zoneName
}

func (fake *FakeDNSManager) GetZoneIdFromNameReturns(result1 int, result2 error) {
	fake.GetZoneIdFromNameStub = nil
	fake.getZoneIdFromNameReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) ListZones() ([]datatypes.Dns_Domain, error) {
	fake.listZonesMutex.Lock()
	fake.listZonesArgsForCall = append(fake.listZonesArgsForCall, struct{}{})
	fake.recordInvocation("ListZones", []interface{}{})
	fake.listZonesMutex.Unlock()
	if fake.ListZonesStub != nil {
		return fake.ListZonesStub()
	} else {
		return fake.listZonesReturns.result1, fake.listZonesReturns.result2
	}
}

func (fake *FakeDNSManager) ListZonesCallCount() int {
	fake.listZonesMutex.RLock()
	defer fake.listZonesMutex.RUnlock()
	return len(fake.listZonesArgsForCall)
}

func (fake *FakeDNSManager) ListZonesReturns(result1 []datatypes.Dns_Domain, result2 error) {
	fake.ListZonesStub = nil
	fake.listZonesReturns = struct {
		result1 []datatypes.Dns_Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) GetZone(zoneId int, getRecords bool) (datatypes.Dns_Domain, error) {
	fake.getZoneMutex.Lock()
	fake.getZoneArgsForCall = append(fake.getZoneArgsForCall, struct {
		zoneId     int
		getRecords bool
	}{zoneId, getRecords})
	fake.recordInvocation("GetZone", []interface{}{zoneId, getRecords})
	fake.getZoneMutex.Unlock()
	if fake.GetZoneStub != nil {
		return fake.GetZoneStub(zoneId, getRecords)
	} else {
		return fake.getZoneReturns.result1, fake.getZoneReturns.result2
	}
}

func (fake *FakeDNSManager) GetZoneCallCount() int {
	fake.getZoneMutex.RLock()
	defer fake.getZoneMutex.RUnlock()
	return len(fake.getZoneArgsForCall)
}

func (fake *FakeDNSManager) GetZoneArgsForCall(i int) (int, bool) {
	fake.getZoneMutex.RLock()
	defer fake.getZoneMutex.RUnlock()
	return fake.getZoneArgsForCall[i].zoneId, fake.getZoneArgsForCall[i].getRecords
}

func (fake *FakeDNSManager) GetZoneReturns(result1 datatypes.Dns_Domain, result2 error) {
	fake.GetZoneStub = nil
	fake.getZoneReturns = struct {
		result1 datatypes.Dns_Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) CreateZone(zoneName string) (datatypes.Dns_Domain, error) {
	fake.createZoneMutex.Lock()
	fake.createZoneArgsForCall = append(fake.createZoneArgsForCall, struct {
		zoneName string
	}{zoneName})
	fake.recordInvocation("CreateZone", []interface{}{zoneName})
	fake.createZoneMutex.Unlock()
	if fake.CreateZoneStub != nil {
		return fake.CreateZoneStub(zoneName)
	} else {
		return fake.createZoneReturns.result1, fake.createZoneReturns.result2
	}
}

func (fake *FakeDNSManager) CreateZoneCallCount() int {
	fake.createZoneMutex.RLock()
	defer fake.createZoneMutex.RUnlock()
	return len(fake.createZoneArgsForCall)
}

func (fake *FakeDNSManager) CreateZoneArgsForCall(i int) string {
	fake.createZoneMutex.RLock()
	defer fake.createZoneMutex.RUnlock()
	return fake.createZoneArgsForCall[i].zoneName
}

func (fake *FakeDNSManager) CreateZoneReturns(result1 datatypes.Dns_Domain, result2 error) {
	fake.CreateZoneStub = nil
	fake.createZoneReturns = struct {
		result1 datatypes.Dns_Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) DeleteZone(zoneId int) error {
	fake.deleteZoneMutex.Lock()
	fake.deleteZoneArgsForCall = append(fake.deleteZoneArgsForCall, struct {
		zoneId int
	}{zoneId})
	fake.recordInvocation("DeleteZone", []interface{}{zoneId})
	fake.deleteZoneMutex.Unlock()
	if fake.DeleteZoneStub != nil {
		return fake.DeleteZoneStub(zoneId)
	} else {
		return fake.deleteZoneReturns.result1
	}
}

func (fake *FakeDNSManager) DeleteZoneCallCount() int {
	fake.deleteZoneMutex.RLock()
	defer fake.deleteZoneMutex.RUnlock()
	return len(fake.deleteZoneArgsForCall)
}

func (fake *FakeDNSManager) DeleteZoneArgsForCall(i int) int {
	fake.deleteZoneMutex.RLock()
	defer fake.deleteZoneMutex.RUnlock()
	return fake.deleteZoneArgsForCall[i].zoneId
}

func (fake *FakeDNSManager) DeleteZoneReturns(result1 error) {
	fake.DeleteZoneStub = nil
	fake.deleteZoneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) DumpZone(zoneId int) (string, error) {
	fake.dumpZoneMutex.Lock()
	fake.dumpZoneArgsForCall = append(fake.dumpZoneArgsForCall, struct {
		zoneId int
	}{zoneId})
	fake.recordInvocation("DumpZone", []interface{}{zoneId})
	fake.dumpZoneMutex.Unlock()
	if fake.DumpZoneStub != nil {
		return fake.DumpZoneStub(zoneId)
	} else {
		return fake.dumpZoneReturns.result1, fake.dumpZoneReturns.result2
	}
}

func (fake *FakeDNSManager) DumpZoneCallCount() int {
	fake.dumpZoneMutex.RLock()
	defer fake.dumpZoneMutex.RUnlock()
	return len(fake.dumpZoneArgsForCall)
}

func (fake *FakeDNSManager) DumpZoneArgsForCall(i int) int {
	fake.dumpZoneMutex.RLock()
	defer fake.dumpZoneMutex.RUnlock()
	return fake.dumpZoneArgsForCall[i].zoneId
}

func (fake *FakeDNSManager) DumpZoneReturns(result1 string, result2 error) {
	fake.DumpZoneStub = nil
	fake.dumpZoneReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) CreateResourceRecord(zoneId int, host string, recordType string, data string, ttl int) (datatypes.Dns_Domain_ResourceRecord, error) {
	fake.createResourceRecordMutex.Lock()
	fake.createResourceRecordArgsForCall = append(fake.createResourceRecordArgsForCall, struct {
		zoneId     int
		host       string
		recordType string
		data       string
		ttl        int
	}{zoneId, host, recordType, data, ttl})
	fake.recordInvocation("CreateResourceRecord", []interface{}{zoneId, host, recordType, data, ttl})
	fake.createResourceRecordMutex.Unlock()
	if fake.CreateResourceRecordStub != nil {
		return fake.CreateResourceRecordStub(zoneId, host, recordType, data, ttl)
	} else {
		return fake.createResourceRecordReturns.result1, fake.createResourceRecordReturns.result2
	}
}

func (fake *FakeDNSManager) CreateResourceRecordCallCount() int {
	fake.createResourceRecordMutex.RLock()
	defer fake.createResourceRecordMutex.RUnlock()
	return len(fake.createResourceRecordArgsForCall)
}

func (fake *FakeDNSManager) CreateResourceRecordArgsForCall(i int) (int, string, string, string, int) {
	fake.createResourceRecordMutex.RLock()
	defer fake.createResourceRecordMutex.RUnlock()
	return fake.createResourceRecordArgsForCall[i].zoneId, fake.createResourceRecordArgsForCall[i].host, fake.createResourceRecordArgsForCall[i].recordType, fake.createResourceRecordArgsForCall[i].data, fake.createResourceRecordArgsForCall[i].ttl
}

func (fake *FakeDNSManager) CreateResourceRecordReturns(result1 datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.CreateResourceRecordStub = nil
	fake.createResourceRecordReturns = struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) DeleteResourceRecord(recordId int) error {
	fake.deleteResourceRecordMutex.Lock()
	fake.deleteResourceRecordArgsForCall = append(fake.deleteResourceRecordArgsForCall, struct {
		recordId int
	}{recordId})
	fake.recordInvocation("DeleteResourceRecord", []interface{}{recordId})
	fake.deleteResourceRecordMutex.Unlock()
	if fake.DeleteResourceRecordStub != nil {
		return fake.DeleteResourceRecordStub(recordId)
	} else {
		return fake.deleteResourceRecordReturns.result1
	}
}

func (fake *FakeDNSManager) DeleteResourceRecordCallCount() int {
	fake.deleteResourceRecordMutex.RLock()
	defer fake.deleteResourceRecordMutex.RUnlock()
	return len(fake.deleteResourceRecordArgsForCall)
}

func (fake *FakeDNSManager) DeleteResourceRecordArgsForCall(i int) int {
	fake.deleteResourceRecordMutex.RLock()
	defer fake.deleteResourceRecordMutex.RUnlock()
	return fake.deleteResourceRecordArgsForCall[i].recordId
}

func (fake *FakeDNSManager) DeleteResourceRecordReturns(result1 error) {
	fake.DeleteResourceRecordStub = nil
	fake.deleteResourceRecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) GetResourceRecord(recordId int) (datatypes.Dns_Domain_ResourceRecord, error) {
	fake.getResourceRecordMutex.Lock()
	fake.getResourceRecordArgsForCall = append(fake.getResourceRecordArgsForCall, struct {
		recordId int
	}{recordId})
	fake.recordInvocation("GetResourceRecord", []interface{}{recordId})
	fake.getResourceRecordMutex.Unlock()
	if fake.GetResourceRecordStub != nil {
		return fake.GetResourceRecordStub(recordId)
	} else {
		return fake.getResourceRecordReturns.result1, fake.getResourceRecordReturns.result2
	}
}

func (fake *FakeDNSManager) GetResourceRecordCallCount() int {
	fake.getResourceRecordMutex.RLock()
	defer fake.getResourceRecordMutex.RUnlock()
	return len(fake.getResourceRecordArgsForCall)
}

func (fake *FakeDNSManager) GetResourceRecordArgsForCall(i int) int {
	fake.getResourceRecordMutex.RLock()
	defer fake.getResourceRecordMutex.RUnlock()
	return fake.getResourceRecordArgsForCall[i].recordId
}

func (fake *FakeDNSManager) GetResourceRecordReturns(result1 datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.GetResourceRecordStub = nil
	fake.getResourceRecordReturns = struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) ListResourceRecords(zoneId int, recordType string, host string, data string, ttl int, mask string) ([]datatypes.Dns_Domain_ResourceRecord, error) {
	fake.listResourceRecordsMutex.Lock()
	fake.listResourceRecordsArgsForCall = append(fake.listResourceRecordsArgsForCall, struct {
		zoneId     int
		recordType string
		host       string
		data       string
		ttl        int
		mask       string
	}{zoneId, recordType, host, data, ttl, mask})
	fake.recordInvocation("ListResourceRecords", []interface{}{zoneId, recordType, host, data, ttl, mask})
	fake.listResourceRecordsMutex.Unlock()
	if fake.ListResourceRecordsStub != nil {
		return fake.ListResourceRecordsStub(zoneId, recordType, host, data, ttl, mask)
	} else {
		return fake.listResourceRecordsReturns.result1, fake.listResourceRecordsReturns.result2
	}
}

func (fake *FakeDNSManager) ListResourceRecordsCallCount() int {
	fake.listResourceRecordsMutex.RLock()
	defer fake.listResourceRecordsMutex.RUnlock()
	return len(fake.listResourceRecordsArgsForCall)
}

func (fake *FakeDNSManager) ListResourceRecordsArgsForCall(i int) (int, string, string, string, int, string) {
	fake.listResourceRecordsMutex.RLock()
	defer fake.listResourceRecordsMutex.RUnlock()
	return fake.listResourceRecordsArgsForCall[i].zoneId, fake.listResourceRecordsArgsForCall[i].recordType, fake.listResourceRecordsArgsForCall[i].host, fake.listResourceRecordsArgsForCall[i].data, fake.listResourceRecordsArgsForCall[i].ttl, fake.listResourceRecordsArgsForCall[i].mask
}

func (fake *FakeDNSManager) ListResourceRecordsReturns(result1 []datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.ListResourceRecordsStub = nil
	fake.listResourceRecordsReturns = struct {
		result1 []datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) EditResourceRecord(record datatypes.Dns_Domain_ResourceRecord) error {
	fake.editResourceRecordMutex.Lock()
	fake.editResourceRecordArgsForCall = append(fake.editResourceRecordArgsForCall, struct {
		record datatypes.Dns_Domain_ResourceRecord
	}{record})
	fake.recordInvocation("EditResourceRecord", []interface{}{record})
	fake.editResourceRecordMutex.Unlock()
	if fake.EditResourceRecordStub != nil {
		return fake.EditResourceRecordStub(record)
	} else {
		return fake.editResourceRecordReturns.result1
	}
}

func (fake *FakeDNSManager) EditResourceRecordCallCount() int {
	fake.editResourceRecordMutex.RLock()
	defer fake.editResourceRecordMutex.RUnlock()
	return len(fake.editResourceRecordArgsForCall)
}

func (fake *FakeDNSManager) EditResourceRecordArgsForCall(i int) datatypes.Dns_Domain_ResourceRecord {
	fake.editResourceRecordMutex.RLock()
	defer fake.editResourceRecordMutex.RUnlock()
	return fake.editResourceRecordArgsForCall[i].record
}

func (fake *FakeDNSManager) EditResourceRecordReturns(result1 error) {
	fake.EditResourceRecordStub = nil
	fake.editResourceRecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SyncARecord(vs datatypes.Virtual_Guest, zoneId int, ttl int) error {
	fake.syncARecordMutex.Lock()
	fake.syncARecordArgsForCall = append(fake.syncARecordArgsForCall, struct {
		vs     datatypes.Virtual_Guest
		zoneId int
		ttl    int
	}{vs, zoneId, ttl})
	fake.recordInvocation("SyncARecord", []interface{}{vs, zoneId, ttl})
	fake.syncARecordMutex.Unlock()
	if fake.SyncARecordStub != nil {
		return fake.SyncARecordStub(vs, zoneId, ttl)
	} else {
		return fake.syncARecordReturns.result1
	}
}

func (fake *FakeDNSManager) SyncARecordCallCount() int {
	fake.syncARecordMutex.RLock()
	defer fake.syncARecordMutex.RUnlock()
	return len(fake.syncARecordArgsForCall)
}

func (fake *FakeDNSManager) SyncARecordArgsForCall(i int) (datatypes.Virtual_Guest, int, int) {
	fake.syncARecordMutex.RLock()
	defer fake.syncARecordMutex.RUnlock()
	return fake.syncARecordArgsForCall[i].vs, fake.syncARecordArgsForCall[i].zoneId, fake.syncARecordArgsForCall[i].ttl
}

func (fake *FakeDNSManager) SyncARecordReturns(result1 error) {
	fake.SyncARecordStub = nil
	fake.syncARecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SyncAAAARecord(vs datatypes.Virtual_Guest, zoneId int, ttl int) error {
	fake.syncAAAARecordMutex.Lock()
	fake.syncAAAARecordArgsForCall = append(fake.syncAAAARecordArgsForCall, struct {
		vs     datatypes.Virtual_Guest
		zoneId int
		ttl    int
	}{vs, zoneId, ttl})
	fake.recordInvocation("SyncAAAARecord", []interface{}{vs, zoneId, ttl})
	fake.syncAAAARecordMutex.Unlock()
	if fake.SyncAAAARecordStub != nil {
		return fake.SyncAAAARecordStub(vs, zoneId, ttl)
	} else {
		return fake.syncAAAARecordReturns.result1
	}
}

func (fake *FakeDNSManager) SyncAAAARecordCallCount() int {
	fake.syncAAAARecordMutex.RLock()
	defer fake.syncAAAARecordMutex.RUnlock()
	return len(fake.syncAAAARecordArgsForCall)
}

func (fake *FakeDNSManager) SyncAAAARecordArgsForCall(i int) (datatypes.Virtual_Guest, int, int) {
	fake.syncAAAARecordMutex.RLock()
	defer fake.syncAAAARecordMutex.RUnlock()
	return fake.syncAAAARecordArgsForCall[i].vs, fake.syncAAAARecordArgsForCall[i].zoneId, fake.syncAAAARecordArgsForCall[i].ttl
}

func (fake *FakeDNSManager) SyncAAAARecordReturns(result1 error) {
	fake.SyncAAAARecordStub = nil
	fake.syncAAAARecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SyncPTRRecord(vs datatypes.Virtual_Guest, ttl int) error {
	fake.syncPTRRecordMutex.Lock()
	fake.syncPTRRecordArgsForCall = append(fake.syncPTRRecordArgsForCall, struct {
		vs  datatypes.Virtual_Guest
		ttl int
	}{vs, ttl})
	fake.recordInvocation("SyncPTRRecord", []interface{}{vs, ttl})
	fake.syncPTRRecordMutex.Unlock()
	if fake.SyncPTRRecordStub != nil {
		return fake.SyncPTRRecordStub(vs, ttl)
	} else {
		return fake.syncPTRRecordReturns.result1
	}
}

func (fake *FakeDNSManager) SyncPTRRecordCallCount() int {
	fake.syncPTRRecordMutex.RLock()
	defer fake.syncPTRRecordMutex.RUnlock()
	return len(fake.syncPTRRecordArgsForCall)
}

func (fake *FakeDNSManager) SyncPTRRecordArgsForCall(i int) (datatypes.Virtual_Guest, int) {
	fake.syncPTRRecordMutex.RLock()
	defer fake.syncPTRRecordMutex.RUnlock()
	return fake.syncPTRRecordArgsForCall[i].vs, fake.syncPTRRecordArgsForCall[i].ttl
}

func (fake *FakeDNSManager) SyncPTRRecordReturns(result1 error) {
	fake.SyncPTRRecordStub = nil
	fake.syncPTRRecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getZoneIdFromNameMutex.RLock()
	defer fake.getZoneIdFromNameMutex.RUnlock()
	fake.listZonesMutex.RLock()
	defer fake.listZonesMutex.RUnlock()
	fake.getZoneMutex.RLock()
	defer fake.getZoneMutex.RUnlock()
	fake.createZoneMutex.RLock()
	defer fake.createZoneMutex.RUnlock()
	fake.deleteZoneMutex.RLock()
	defer fake.deleteZoneMutex.RUnlock()
	fake.dumpZoneMutex.RLock()
	defer fake.dumpZoneMutex.RUnlock()
	fake.createResourceRecordMutex.RLock()
	defer fake.createResourceRecordMutex.RUnlock()
	fake.deleteResourceRecordMutex.RLock()
	defer fake.deleteResourceRecordMutex.RUnlock()
	fake.getResourceRecordMutex.RLock()
	defer fake.getResourceRecordMutex.RUnlock()
	fake.listResourceRecordsMutex.RLock()
	defer fake.listResourceRecordsMutex.RUnlock()
	fake.editResourceRecordMutex.RLock()
	defer fake.editResourceRecordMutex.RUnlock()
	fake.syncARecordMutex.RLock()
	defer fake.syncARecordMutex.RUnlock()
	fake.syncAAAARecordMutex.RLock()
	defer fake.syncAAAARecordMutex.RUnlock()
	fake.syncPTRRecordMutex.RLock()
	defer fake.syncPTRRecordMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDNSManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.DNSManager = new(FakeDNSManager)
