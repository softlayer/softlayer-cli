// Code generated by counterfeiter. DO NOT EDIT.
package testhelpers

import (
	"sync"

	"github.com/softlayer/softlayer-go/datatypes"
	"github.ibm.com/SoftLayer/softlayer-cli/plugin/managers"
)

type FakeDNSManager struct {
	CreateResourceRecordStub        func(int, string, string, string, int) (datatypes.Dns_Domain_ResourceRecord, error)
	createResourceRecordMutex       sync.RWMutex
	createResourceRecordArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 string
		arg4 string
		arg5 int
	}
	createResourceRecordReturns struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	createResourceRecordReturnsOnCall map[int]struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	CreateZoneStub        func(string) (datatypes.Dns_Domain, error)
	createZoneMutex       sync.RWMutex
	createZoneArgsForCall []struct {
		arg1 string
	}
	createZoneReturns struct {
		result1 datatypes.Dns_Domain
		result2 error
	}
	createZoneReturnsOnCall map[int]struct {
		result1 datatypes.Dns_Domain
		result2 error
	}
	DeleteResourceRecordStub        func(int) error
	deleteResourceRecordMutex       sync.RWMutex
	deleteResourceRecordArgsForCall []struct {
		arg1 int
	}
	deleteResourceRecordReturns struct {
		result1 error
	}
	deleteResourceRecordReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteZoneStub        func(int) error
	deleteZoneMutex       sync.RWMutex
	deleteZoneArgsForCall []struct {
		arg1 int
	}
	deleteZoneReturns struct {
		result1 error
	}
	deleteZoneReturnsOnCall map[int]struct {
		result1 error
	}
	DumpZoneStub        func(int) (string, error)
	dumpZoneMutex       sync.RWMutex
	dumpZoneArgsForCall []struct {
		arg1 int
	}
	dumpZoneReturns struct {
		result1 string
		result2 error
	}
	dumpZoneReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	EditResourceRecordStub        func(datatypes.Dns_Domain_ResourceRecord) error
	editResourceRecordMutex       sync.RWMutex
	editResourceRecordArgsForCall []struct {
		arg1 datatypes.Dns_Domain_ResourceRecord
	}
	editResourceRecordReturns struct {
		result1 error
	}
	editResourceRecordReturnsOnCall map[int]struct {
		result1 error
	}
	GetResourceRecordStub        func(int) (datatypes.Dns_Domain_ResourceRecord, error)
	getResourceRecordMutex       sync.RWMutex
	getResourceRecordArgsForCall []struct {
		arg1 int
	}
	getResourceRecordReturns struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	getResourceRecordReturnsOnCall map[int]struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	GetZoneStub        func(int, bool) (datatypes.Dns_Domain, error)
	getZoneMutex       sync.RWMutex
	getZoneArgsForCall []struct {
		arg1 int
		arg2 bool
	}
	getZoneReturns struct {
		result1 datatypes.Dns_Domain
		result2 error
	}
	getZoneReturnsOnCall map[int]struct {
		result1 datatypes.Dns_Domain
		result2 error
	}
	GetZoneIdFromNameStub        func(string) (int, error)
	getZoneIdFromNameMutex       sync.RWMutex
	getZoneIdFromNameArgsForCall []struct {
		arg1 string
	}
	getZoneIdFromNameReturns struct {
		result1 int
		result2 error
	}
	getZoneIdFromNameReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	ListResourceRecordsStub        func(int, string, string, string, int, string) ([]datatypes.Dns_Domain_ResourceRecord, error)
	listResourceRecordsMutex       sync.RWMutex
	listResourceRecordsArgsForCall []struct {
		arg1 int
		arg2 string
		arg3 string
		arg4 string
		arg5 int
		arg6 string
	}
	listResourceRecordsReturns struct {
		result1 []datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	listResourceRecordsReturnsOnCall map[int]struct {
		result1 []datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	ListZonesStub        func() ([]datatypes.Dns_Domain, error)
	listZonesMutex       sync.RWMutex
	listZonesArgsForCall []struct {
	}
	listZonesReturns struct {
		result1 []datatypes.Dns_Domain
		result2 error
	}
	listZonesReturnsOnCall map[int]struct {
		result1 []datatypes.Dns_Domain
		result2 error
	}
	ResourceRecordCreateStub        func(datatypes.Dns_Domain_ResourceRecord) (datatypes.Dns_Domain_ResourceRecord, error)
	resourceRecordCreateMutex       sync.RWMutex
	resourceRecordCreateArgsForCall []struct {
		arg1 datatypes.Dns_Domain_ResourceRecord
	}
	resourceRecordCreateReturns struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	resourceRecordCreateReturnsOnCall map[int]struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}
	SrvResourceRecordCreateStub        func(datatypes.Dns_Domain_ResourceRecord_SrvType) (datatypes.Dns_Domain_ResourceRecord_SrvType, error)
	srvResourceRecordCreateMutex       sync.RWMutex
	srvResourceRecordCreateArgsForCall []struct {
		arg1 datatypes.Dns_Domain_ResourceRecord_SrvType
	}
	srvResourceRecordCreateReturns struct {
		result1 datatypes.Dns_Domain_ResourceRecord_SrvType
		result2 error
	}
	srvResourceRecordCreateReturnsOnCall map[int]struct {
		result1 datatypes.Dns_Domain_ResourceRecord_SrvType
		result2 error
	}
	SyncAAAARecordStub        func(datatypes.Virtual_Guest, int, int) error
	syncAAAARecordMutex       sync.RWMutex
	syncAAAARecordArgsForCall []struct {
		arg1 datatypes.Virtual_Guest
		arg2 int
		arg3 int
	}
	syncAAAARecordReturns struct {
		result1 error
	}
	syncAAAARecordReturnsOnCall map[int]struct {
		result1 error
	}
	SyncARecordStub        func(datatypes.Virtual_Guest, int, int) error
	syncARecordMutex       sync.RWMutex
	syncARecordArgsForCall []struct {
		arg1 datatypes.Virtual_Guest
		arg2 int
		arg3 int
	}
	syncARecordReturns struct {
		result1 error
	}
	syncARecordReturnsOnCall map[int]struct {
		result1 error
	}
	SyncPTRRecordStub        func(datatypes.Virtual_Guest, int) error
	syncPTRRecordMutex       sync.RWMutex
	syncPTRRecordArgsForCall []struct {
		arg1 datatypes.Virtual_Guest
		arg2 int
	}
	syncPTRRecordReturns struct {
		result1 error
	}
	syncPTRRecordReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDNSManager) CreateResourceRecord(arg1 int, arg2 string, arg3 string, arg4 string, arg5 int) (datatypes.Dns_Domain_ResourceRecord, error) {
	fake.createResourceRecordMutex.Lock()
	ret, specificReturn := fake.createResourceRecordReturnsOnCall[len(fake.createResourceRecordArgsForCall)]
	fake.createResourceRecordArgsForCall = append(fake.createResourceRecordArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 string
		arg4 string
		arg5 int
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.CreateResourceRecordStub
	fakeReturns := fake.createResourceRecordReturns
	fake.recordInvocation("CreateResourceRecord", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.createResourceRecordMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) CreateResourceRecordCallCount() int {
	fake.createResourceRecordMutex.RLock()
	defer fake.createResourceRecordMutex.RUnlock()
	return len(fake.createResourceRecordArgsForCall)
}

func (fake *FakeDNSManager) CreateResourceRecordCalls(stub func(int, string, string, string, int) (datatypes.Dns_Domain_ResourceRecord, error)) {
	fake.createResourceRecordMutex.Lock()
	defer fake.createResourceRecordMutex.Unlock()
	fake.CreateResourceRecordStub = stub
}

func (fake *FakeDNSManager) CreateResourceRecordArgsForCall(i int) (int, string, string, string, int) {
	fake.createResourceRecordMutex.RLock()
	defer fake.createResourceRecordMutex.RUnlock()
	argsForCall := fake.createResourceRecordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeDNSManager) CreateResourceRecordReturns(result1 datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.createResourceRecordMutex.Lock()
	defer fake.createResourceRecordMutex.Unlock()
	fake.CreateResourceRecordStub = nil
	fake.createResourceRecordReturns = struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) CreateResourceRecordReturnsOnCall(i int, result1 datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.createResourceRecordMutex.Lock()
	defer fake.createResourceRecordMutex.Unlock()
	fake.CreateResourceRecordStub = nil
	if fake.createResourceRecordReturnsOnCall == nil {
		fake.createResourceRecordReturnsOnCall = make(map[int]struct {
			result1 datatypes.Dns_Domain_ResourceRecord
			result2 error
		})
	}
	fake.createResourceRecordReturnsOnCall[i] = struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) CreateZone(arg1 string) (datatypes.Dns_Domain, error) {
	fake.createZoneMutex.Lock()
	ret, specificReturn := fake.createZoneReturnsOnCall[len(fake.createZoneArgsForCall)]
	fake.createZoneArgsForCall = append(fake.createZoneArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CreateZoneStub
	fakeReturns := fake.createZoneReturns
	fake.recordInvocation("CreateZone", []interface{}{arg1})
	fake.createZoneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) CreateZoneCallCount() int {
	fake.createZoneMutex.RLock()
	defer fake.createZoneMutex.RUnlock()
	return len(fake.createZoneArgsForCall)
}

func (fake *FakeDNSManager) CreateZoneCalls(stub func(string) (datatypes.Dns_Domain, error)) {
	fake.createZoneMutex.Lock()
	defer fake.createZoneMutex.Unlock()
	fake.CreateZoneStub = stub
}

func (fake *FakeDNSManager) CreateZoneArgsForCall(i int) string {
	fake.createZoneMutex.RLock()
	defer fake.createZoneMutex.RUnlock()
	argsForCall := fake.createZoneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) CreateZoneReturns(result1 datatypes.Dns_Domain, result2 error) {
	fake.createZoneMutex.Lock()
	defer fake.createZoneMutex.Unlock()
	fake.CreateZoneStub = nil
	fake.createZoneReturns = struct {
		result1 datatypes.Dns_Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) CreateZoneReturnsOnCall(i int, result1 datatypes.Dns_Domain, result2 error) {
	fake.createZoneMutex.Lock()
	defer fake.createZoneMutex.Unlock()
	fake.CreateZoneStub = nil
	if fake.createZoneReturnsOnCall == nil {
		fake.createZoneReturnsOnCall = make(map[int]struct {
			result1 datatypes.Dns_Domain
			result2 error
		})
	}
	fake.createZoneReturnsOnCall[i] = struct {
		result1 datatypes.Dns_Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) DeleteResourceRecord(arg1 int) error {
	fake.deleteResourceRecordMutex.Lock()
	ret, specificReturn := fake.deleteResourceRecordReturnsOnCall[len(fake.deleteResourceRecordArgsForCall)]
	fake.deleteResourceRecordArgsForCall = append(fake.deleteResourceRecordArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.DeleteResourceRecordStub
	fakeReturns := fake.deleteResourceRecordReturns
	fake.recordInvocation("DeleteResourceRecord", []interface{}{arg1})
	fake.deleteResourceRecordMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDNSManager) DeleteResourceRecordCallCount() int {
	fake.deleteResourceRecordMutex.RLock()
	defer fake.deleteResourceRecordMutex.RUnlock()
	return len(fake.deleteResourceRecordArgsForCall)
}

func (fake *FakeDNSManager) DeleteResourceRecordCalls(stub func(int) error) {
	fake.deleteResourceRecordMutex.Lock()
	defer fake.deleteResourceRecordMutex.Unlock()
	fake.DeleteResourceRecordStub = stub
}

func (fake *FakeDNSManager) DeleteResourceRecordArgsForCall(i int) int {
	fake.deleteResourceRecordMutex.RLock()
	defer fake.deleteResourceRecordMutex.RUnlock()
	argsForCall := fake.deleteResourceRecordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) DeleteResourceRecordReturns(result1 error) {
	fake.deleteResourceRecordMutex.Lock()
	defer fake.deleteResourceRecordMutex.Unlock()
	fake.DeleteResourceRecordStub = nil
	fake.deleteResourceRecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) DeleteResourceRecordReturnsOnCall(i int, result1 error) {
	fake.deleteResourceRecordMutex.Lock()
	defer fake.deleteResourceRecordMutex.Unlock()
	fake.DeleteResourceRecordStub = nil
	if fake.deleteResourceRecordReturnsOnCall == nil {
		fake.deleteResourceRecordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteResourceRecordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) DeleteZone(arg1 int) error {
	fake.deleteZoneMutex.Lock()
	ret, specificReturn := fake.deleteZoneReturnsOnCall[len(fake.deleteZoneArgsForCall)]
	fake.deleteZoneArgsForCall = append(fake.deleteZoneArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.DeleteZoneStub
	fakeReturns := fake.deleteZoneReturns
	fake.recordInvocation("DeleteZone", []interface{}{arg1})
	fake.deleteZoneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDNSManager) DeleteZoneCallCount() int {
	fake.deleteZoneMutex.RLock()
	defer fake.deleteZoneMutex.RUnlock()
	return len(fake.deleteZoneArgsForCall)
}

func (fake *FakeDNSManager) DeleteZoneCalls(stub func(int) error) {
	fake.deleteZoneMutex.Lock()
	defer fake.deleteZoneMutex.Unlock()
	fake.DeleteZoneStub = stub
}

func (fake *FakeDNSManager) DeleteZoneArgsForCall(i int) int {
	fake.deleteZoneMutex.RLock()
	defer fake.deleteZoneMutex.RUnlock()
	argsForCall := fake.deleteZoneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) DeleteZoneReturns(result1 error) {
	fake.deleteZoneMutex.Lock()
	defer fake.deleteZoneMutex.Unlock()
	fake.DeleteZoneStub = nil
	fake.deleteZoneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) DeleteZoneReturnsOnCall(i int, result1 error) {
	fake.deleteZoneMutex.Lock()
	defer fake.deleteZoneMutex.Unlock()
	fake.DeleteZoneStub = nil
	if fake.deleteZoneReturnsOnCall == nil {
		fake.deleteZoneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteZoneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) DumpZone(arg1 int) (string, error) {
	fake.dumpZoneMutex.Lock()
	ret, specificReturn := fake.dumpZoneReturnsOnCall[len(fake.dumpZoneArgsForCall)]
	fake.dumpZoneArgsForCall = append(fake.dumpZoneArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.DumpZoneStub
	fakeReturns := fake.dumpZoneReturns
	fake.recordInvocation("DumpZone", []interface{}{arg1})
	fake.dumpZoneMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) DumpZoneCallCount() int {
	fake.dumpZoneMutex.RLock()
	defer fake.dumpZoneMutex.RUnlock()
	return len(fake.dumpZoneArgsForCall)
}

func (fake *FakeDNSManager) DumpZoneCalls(stub func(int) (string, error)) {
	fake.dumpZoneMutex.Lock()
	defer fake.dumpZoneMutex.Unlock()
	fake.DumpZoneStub = stub
}

func (fake *FakeDNSManager) DumpZoneArgsForCall(i int) int {
	fake.dumpZoneMutex.RLock()
	defer fake.dumpZoneMutex.RUnlock()
	argsForCall := fake.dumpZoneArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) DumpZoneReturns(result1 string, result2 error) {
	fake.dumpZoneMutex.Lock()
	defer fake.dumpZoneMutex.Unlock()
	fake.DumpZoneStub = nil
	fake.dumpZoneReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) DumpZoneReturnsOnCall(i int, result1 string, result2 error) {
	fake.dumpZoneMutex.Lock()
	defer fake.dumpZoneMutex.Unlock()
	fake.DumpZoneStub = nil
	if fake.dumpZoneReturnsOnCall == nil {
		fake.dumpZoneReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.dumpZoneReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) EditResourceRecord(arg1 datatypes.Dns_Domain_ResourceRecord) error {
	fake.editResourceRecordMutex.Lock()
	ret, specificReturn := fake.editResourceRecordReturnsOnCall[len(fake.editResourceRecordArgsForCall)]
	fake.editResourceRecordArgsForCall = append(fake.editResourceRecordArgsForCall, struct {
		arg1 datatypes.Dns_Domain_ResourceRecord
	}{arg1})
	stub := fake.EditResourceRecordStub
	fakeReturns := fake.editResourceRecordReturns
	fake.recordInvocation("EditResourceRecord", []interface{}{arg1})
	fake.editResourceRecordMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDNSManager) EditResourceRecordCallCount() int {
	fake.editResourceRecordMutex.RLock()
	defer fake.editResourceRecordMutex.RUnlock()
	return len(fake.editResourceRecordArgsForCall)
}

func (fake *FakeDNSManager) EditResourceRecordCalls(stub func(datatypes.Dns_Domain_ResourceRecord) error) {
	fake.editResourceRecordMutex.Lock()
	defer fake.editResourceRecordMutex.Unlock()
	fake.EditResourceRecordStub = stub
}

func (fake *FakeDNSManager) EditResourceRecordArgsForCall(i int) datatypes.Dns_Domain_ResourceRecord {
	fake.editResourceRecordMutex.RLock()
	defer fake.editResourceRecordMutex.RUnlock()
	argsForCall := fake.editResourceRecordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) EditResourceRecordReturns(result1 error) {
	fake.editResourceRecordMutex.Lock()
	defer fake.editResourceRecordMutex.Unlock()
	fake.EditResourceRecordStub = nil
	fake.editResourceRecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) EditResourceRecordReturnsOnCall(i int, result1 error) {
	fake.editResourceRecordMutex.Lock()
	defer fake.editResourceRecordMutex.Unlock()
	fake.EditResourceRecordStub = nil
	if fake.editResourceRecordReturnsOnCall == nil {
		fake.editResourceRecordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.editResourceRecordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) GetResourceRecord(arg1 int) (datatypes.Dns_Domain_ResourceRecord, error) {
	fake.getResourceRecordMutex.Lock()
	ret, specificReturn := fake.getResourceRecordReturnsOnCall[len(fake.getResourceRecordArgsForCall)]
	fake.getResourceRecordArgsForCall = append(fake.getResourceRecordArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetResourceRecordStub
	fakeReturns := fake.getResourceRecordReturns
	fake.recordInvocation("GetResourceRecord", []interface{}{arg1})
	fake.getResourceRecordMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) GetResourceRecordCallCount() int {
	fake.getResourceRecordMutex.RLock()
	defer fake.getResourceRecordMutex.RUnlock()
	return len(fake.getResourceRecordArgsForCall)
}

func (fake *FakeDNSManager) GetResourceRecordCalls(stub func(int) (datatypes.Dns_Domain_ResourceRecord, error)) {
	fake.getResourceRecordMutex.Lock()
	defer fake.getResourceRecordMutex.Unlock()
	fake.GetResourceRecordStub = stub
}

func (fake *FakeDNSManager) GetResourceRecordArgsForCall(i int) int {
	fake.getResourceRecordMutex.RLock()
	defer fake.getResourceRecordMutex.RUnlock()
	argsForCall := fake.getResourceRecordArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) GetResourceRecordReturns(result1 datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.getResourceRecordMutex.Lock()
	defer fake.getResourceRecordMutex.Unlock()
	fake.GetResourceRecordStub = nil
	fake.getResourceRecordReturns = struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) GetResourceRecordReturnsOnCall(i int, result1 datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.getResourceRecordMutex.Lock()
	defer fake.getResourceRecordMutex.Unlock()
	fake.GetResourceRecordStub = nil
	if fake.getResourceRecordReturnsOnCall == nil {
		fake.getResourceRecordReturnsOnCall = make(map[int]struct {
			result1 datatypes.Dns_Domain_ResourceRecord
			result2 error
		})
	}
	fake.getResourceRecordReturnsOnCall[i] = struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) GetZone(arg1 int, arg2 bool) (datatypes.Dns_Domain, error) {
	fake.getZoneMutex.Lock()
	ret, specificReturn := fake.getZoneReturnsOnCall[len(fake.getZoneArgsForCall)]
	fake.getZoneArgsForCall = append(fake.getZoneArgsForCall, struct {
		arg1 int
		arg2 bool
	}{arg1, arg2})
	stub := fake.GetZoneStub
	fakeReturns := fake.getZoneReturns
	fake.recordInvocation("GetZone", []interface{}{arg1, arg2})
	fake.getZoneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) GetZoneCallCount() int {
	fake.getZoneMutex.RLock()
	defer fake.getZoneMutex.RUnlock()
	return len(fake.getZoneArgsForCall)
}

func (fake *FakeDNSManager) GetZoneCalls(stub func(int, bool) (datatypes.Dns_Domain, error)) {
	fake.getZoneMutex.Lock()
	defer fake.getZoneMutex.Unlock()
	fake.GetZoneStub = stub
}

func (fake *FakeDNSManager) GetZoneArgsForCall(i int) (int, bool) {
	fake.getZoneMutex.RLock()
	defer fake.getZoneMutex.RUnlock()
	argsForCall := fake.getZoneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDNSManager) GetZoneReturns(result1 datatypes.Dns_Domain, result2 error) {
	fake.getZoneMutex.Lock()
	defer fake.getZoneMutex.Unlock()
	fake.GetZoneStub = nil
	fake.getZoneReturns = struct {
		result1 datatypes.Dns_Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) GetZoneReturnsOnCall(i int, result1 datatypes.Dns_Domain, result2 error) {
	fake.getZoneMutex.Lock()
	defer fake.getZoneMutex.Unlock()
	fake.GetZoneStub = nil
	if fake.getZoneReturnsOnCall == nil {
		fake.getZoneReturnsOnCall = make(map[int]struct {
			result1 datatypes.Dns_Domain
			result2 error
		})
	}
	fake.getZoneReturnsOnCall[i] = struct {
		result1 datatypes.Dns_Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) GetZoneIdFromName(arg1 string) (int, error) {
	fake.getZoneIdFromNameMutex.Lock()
	ret, specificReturn := fake.getZoneIdFromNameReturnsOnCall[len(fake.getZoneIdFromNameArgsForCall)]
	fake.getZoneIdFromNameArgsForCall = append(fake.getZoneIdFromNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetZoneIdFromNameStub
	fakeReturns := fake.getZoneIdFromNameReturns
	fake.recordInvocation("GetZoneIdFromName", []interface{}{arg1})
	fake.getZoneIdFromNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) GetZoneIdFromNameCallCount() int {
	fake.getZoneIdFromNameMutex.RLock()
	defer fake.getZoneIdFromNameMutex.RUnlock()
	return len(fake.getZoneIdFromNameArgsForCall)
}

func (fake *FakeDNSManager) GetZoneIdFromNameCalls(stub func(string) (int, error)) {
	fake.getZoneIdFromNameMutex.Lock()
	defer fake.getZoneIdFromNameMutex.Unlock()
	fake.GetZoneIdFromNameStub = stub
}

func (fake *FakeDNSManager) GetZoneIdFromNameArgsForCall(i int) string {
	fake.getZoneIdFromNameMutex.RLock()
	defer fake.getZoneIdFromNameMutex.RUnlock()
	argsForCall := fake.getZoneIdFromNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) GetZoneIdFromNameReturns(result1 int, result2 error) {
	fake.getZoneIdFromNameMutex.Lock()
	defer fake.getZoneIdFromNameMutex.Unlock()
	fake.GetZoneIdFromNameStub = nil
	fake.getZoneIdFromNameReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) GetZoneIdFromNameReturnsOnCall(i int, result1 int, result2 error) {
	fake.getZoneIdFromNameMutex.Lock()
	defer fake.getZoneIdFromNameMutex.Unlock()
	fake.GetZoneIdFromNameStub = nil
	if fake.getZoneIdFromNameReturnsOnCall == nil {
		fake.getZoneIdFromNameReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.getZoneIdFromNameReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) ListResourceRecords(arg1 int, arg2 string, arg3 string, arg4 string, arg5 int, arg6 string) ([]datatypes.Dns_Domain_ResourceRecord, error) {
	fake.listResourceRecordsMutex.Lock()
	ret, specificReturn := fake.listResourceRecordsReturnsOnCall[len(fake.listResourceRecordsArgsForCall)]
	fake.listResourceRecordsArgsForCall = append(fake.listResourceRecordsArgsForCall, struct {
		arg1 int
		arg2 string
		arg3 string
		arg4 string
		arg5 int
		arg6 string
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.ListResourceRecordsStub
	fakeReturns := fake.listResourceRecordsReturns
	fake.recordInvocation("ListResourceRecords", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.listResourceRecordsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) ListResourceRecordsCallCount() int {
	fake.listResourceRecordsMutex.RLock()
	defer fake.listResourceRecordsMutex.RUnlock()
	return len(fake.listResourceRecordsArgsForCall)
}

func (fake *FakeDNSManager) ListResourceRecordsCalls(stub func(int, string, string, string, int, string) ([]datatypes.Dns_Domain_ResourceRecord, error)) {
	fake.listResourceRecordsMutex.Lock()
	defer fake.listResourceRecordsMutex.Unlock()
	fake.ListResourceRecordsStub = stub
}

func (fake *FakeDNSManager) ListResourceRecordsArgsForCall(i int) (int, string, string, string, int, string) {
	fake.listResourceRecordsMutex.RLock()
	defer fake.listResourceRecordsMutex.RUnlock()
	argsForCall := fake.listResourceRecordsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeDNSManager) ListResourceRecordsReturns(result1 []datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.listResourceRecordsMutex.Lock()
	defer fake.listResourceRecordsMutex.Unlock()
	fake.ListResourceRecordsStub = nil
	fake.listResourceRecordsReturns = struct {
		result1 []datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) ListResourceRecordsReturnsOnCall(i int, result1 []datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.listResourceRecordsMutex.Lock()
	defer fake.listResourceRecordsMutex.Unlock()
	fake.ListResourceRecordsStub = nil
	if fake.listResourceRecordsReturnsOnCall == nil {
		fake.listResourceRecordsReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Dns_Domain_ResourceRecord
			result2 error
		})
	}
	fake.listResourceRecordsReturnsOnCall[i] = struct {
		result1 []datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) ListZones() ([]datatypes.Dns_Domain, error) {
	fake.listZonesMutex.Lock()
	ret, specificReturn := fake.listZonesReturnsOnCall[len(fake.listZonesArgsForCall)]
	fake.listZonesArgsForCall = append(fake.listZonesArgsForCall, struct {
	}{})
	stub := fake.ListZonesStub
	fakeReturns := fake.listZonesReturns
	fake.recordInvocation("ListZones", []interface{}{})
	fake.listZonesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) ListZonesCallCount() int {
	fake.listZonesMutex.RLock()
	defer fake.listZonesMutex.RUnlock()
	return len(fake.listZonesArgsForCall)
}

func (fake *FakeDNSManager) ListZonesCalls(stub func() ([]datatypes.Dns_Domain, error)) {
	fake.listZonesMutex.Lock()
	defer fake.listZonesMutex.Unlock()
	fake.ListZonesStub = stub
}

func (fake *FakeDNSManager) ListZonesReturns(result1 []datatypes.Dns_Domain, result2 error) {
	fake.listZonesMutex.Lock()
	defer fake.listZonesMutex.Unlock()
	fake.ListZonesStub = nil
	fake.listZonesReturns = struct {
		result1 []datatypes.Dns_Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) ListZonesReturnsOnCall(i int, result1 []datatypes.Dns_Domain, result2 error) {
	fake.listZonesMutex.Lock()
	defer fake.listZonesMutex.Unlock()
	fake.ListZonesStub = nil
	if fake.listZonesReturnsOnCall == nil {
		fake.listZonesReturnsOnCall = make(map[int]struct {
			result1 []datatypes.Dns_Domain
			result2 error
		})
	}
	fake.listZonesReturnsOnCall[i] = struct {
		result1 []datatypes.Dns_Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) ResourceRecordCreate(arg1 datatypes.Dns_Domain_ResourceRecord) (datatypes.Dns_Domain_ResourceRecord, error) {
	fake.resourceRecordCreateMutex.Lock()
	ret, specificReturn := fake.resourceRecordCreateReturnsOnCall[len(fake.resourceRecordCreateArgsForCall)]
	fake.resourceRecordCreateArgsForCall = append(fake.resourceRecordCreateArgsForCall, struct {
		arg1 datatypes.Dns_Domain_ResourceRecord
	}{arg1})
	stub := fake.ResourceRecordCreateStub
	fakeReturns := fake.resourceRecordCreateReturns
	fake.recordInvocation("ResourceRecordCreate", []interface{}{arg1})
	fake.resourceRecordCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) ResourceRecordCreateCallCount() int {
	fake.resourceRecordCreateMutex.RLock()
	defer fake.resourceRecordCreateMutex.RUnlock()
	return len(fake.resourceRecordCreateArgsForCall)
}

func (fake *FakeDNSManager) ResourceRecordCreateCalls(stub func(datatypes.Dns_Domain_ResourceRecord) (datatypes.Dns_Domain_ResourceRecord, error)) {
	fake.resourceRecordCreateMutex.Lock()
	defer fake.resourceRecordCreateMutex.Unlock()
	fake.ResourceRecordCreateStub = stub
}

func (fake *FakeDNSManager) ResourceRecordCreateArgsForCall(i int) datatypes.Dns_Domain_ResourceRecord {
	fake.resourceRecordCreateMutex.RLock()
	defer fake.resourceRecordCreateMutex.RUnlock()
	argsForCall := fake.resourceRecordCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) ResourceRecordCreateReturns(result1 datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.resourceRecordCreateMutex.Lock()
	defer fake.resourceRecordCreateMutex.Unlock()
	fake.ResourceRecordCreateStub = nil
	fake.resourceRecordCreateReturns = struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) ResourceRecordCreateReturnsOnCall(i int, result1 datatypes.Dns_Domain_ResourceRecord, result2 error) {
	fake.resourceRecordCreateMutex.Lock()
	defer fake.resourceRecordCreateMutex.Unlock()
	fake.ResourceRecordCreateStub = nil
	if fake.resourceRecordCreateReturnsOnCall == nil {
		fake.resourceRecordCreateReturnsOnCall = make(map[int]struct {
			result1 datatypes.Dns_Domain_ResourceRecord
			result2 error
		})
	}
	fake.resourceRecordCreateReturnsOnCall[i] = struct {
		result1 datatypes.Dns_Domain_ResourceRecord
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) SrvResourceRecordCreate(arg1 datatypes.Dns_Domain_ResourceRecord_SrvType) (datatypes.Dns_Domain_ResourceRecord_SrvType, error) {
	fake.srvResourceRecordCreateMutex.Lock()
	ret, specificReturn := fake.srvResourceRecordCreateReturnsOnCall[len(fake.srvResourceRecordCreateArgsForCall)]
	fake.srvResourceRecordCreateArgsForCall = append(fake.srvResourceRecordCreateArgsForCall, struct {
		arg1 datatypes.Dns_Domain_ResourceRecord_SrvType
	}{arg1})
	stub := fake.SrvResourceRecordCreateStub
	fakeReturns := fake.srvResourceRecordCreateReturns
	fake.recordInvocation("SrvResourceRecordCreate", []interface{}{arg1})
	fake.srvResourceRecordCreateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDNSManager) SrvResourceRecordCreateCallCount() int {
	fake.srvResourceRecordCreateMutex.RLock()
	defer fake.srvResourceRecordCreateMutex.RUnlock()
	return len(fake.srvResourceRecordCreateArgsForCall)
}

func (fake *FakeDNSManager) SrvResourceRecordCreateCalls(stub func(datatypes.Dns_Domain_ResourceRecord_SrvType) (datatypes.Dns_Domain_ResourceRecord_SrvType, error)) {
	fake.srvResourceRecordCreateMutex.Lock()
	defer fake.srvResourceRecordCreateMutex.Unlock()
	fake.SrvResourceRecordCreateStub = stub
}

func (fake *FakeDNSManager) SrvResourceRecordCreateArgsForCall(i int) datatypes.Dns_Domain_ResourceRecord_SrvType {
	fake.srvResourceRecordCreateMutex.RLock()
	defer fake.srvResourceRecordCreateMutex.RUnlock()
	argsForCall := fake.srvResourceRecordCreateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDNSManager) SrvResourceRecordCreateReturns(result1 datatypes.Dns_Domain_ResourceRecord_SrvType, result2 error) {
	fake.srvResourceRecordCreateMutex.Lock()
	defer fake.srvResourceRecordCreateMutex.Unlock()
	fake.SrvResourceRecordCreateStub = nil
	fake.srvResourceRecordCreateReturns = struct {
		result1 datatypes.Dns_Domain_ResourceRecord_SrvType
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) SrvResourceRecordCreateReturnsOnCall(i int, result1 datatypes.Dns_Domain_ResourceRecord_SrvType, result2 error) {
	fake.srvResourceRecordCreateMutex.Lock()
	defer fake.srvResourceRecordCreateMutex.Unlock()
	fake.SrvResourceRecordCreateStub = nil
	if fake.srvResourceRecordCreateReturnsOnCall == nil {
		fake.srvResourceRecordCreateReturnsOnCall = make(map[int]struct {
			result1 datatypes.Dns_Domain_ResourceRecord_SrvType
			result2 error
		})
	}
	fake.srvResourceRecordCreateReturnsOnCall[i] = struct {
		result1 datatypes.Dns_Domain_ResourceRecord_SrvType
		result2 error
	}{result1, result2}
}

func (fake *FakeDNSManager) SyncAAAARecord(arg1 datatypes.Virtual_Guest, arg2 int, arg3 int) error {
	fake.syncAAAARecordMutex.Lock()
	ret, specificReturn := fake.syncAAAARecordReturnsOnCall[len(fake.syncAAAARecordArgsForCall)]
	fake.syncAAAARecordArgsForCall = append(fake.syncAAAARecordArgsForCall, struct {
		arg1 datatypes.Virtual_Guest
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.SyncAAAARecordStub
	fakeReturns := fake.syncAAAARecordReturns
	fake.recordInvocation("SyncAAAARecord", []interface{}{arg1, arg2, arg3})
	fake.syncAAAARecordMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDNSManager) SyncAAAARecordCallCount() int {
	fake.syncAAAARecordMutex.RLock()
	defer fake.syncAAAARecordMutex.RUnlock()
	return len(fake.syncAAAARecordArgsForCall)
}

func (fake *FakeDNSManager) SyncAAAARecordCalls(stub func(datatypes.Virtual_Guest, int, int) error) {
	fake.syncAAAARecordMutex.Lock()
	defer fake.syncAAAARecordMutex.Unlock()
	fake.SyncAAAARecordStub = stub
}

func (fake *FakeDNSManager) SyncAAAARecordArgsForCall(i int) (datatypes.Virtual_Guest, int, int) {
	fake.syncAAAARecordMutex.RLock()
	defer fake.syncAAAARecordMutex.RUnlock()
	argsForCall := fake.syncAAAARecordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDNSManager) SyncAAAARecordReturns(result1 error) {
	fake.syncAAAARecordMutex.Lock()
	defer fake.syncAAAARecordMutex.Unlock()
	fake.SyncAAAARecordStub = nil
	fake.syncAAAARecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SyncAAAARecordReturnsOnCall(i int, result1 error) {
	fake.syncAAAARecordMutex.Lock()
	defer fake.syncAAAARecordMutex.Unlock()
	fake.SyncAAAARecordStub = nil
	if fake.syncAAAARecordReturnsOnCall == nil {
		fake.syncAAAARecordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncAAAARecordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SyncARecord(arg1 datatypes.Virtual_Guest, arg2 int, arg3 int) error {
	fake.syncARecordMutex.Lock()
	ret, specificReturn := fake.syncARecordReturnsOnCall[len(fake.syncARecordArgsForCall)]
	fake.syncARecordArgsForCall = append(fake.syncARecordArgsForCall, struct {
		arg1 datatypes.Virtual_Guest
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.SyncARecordStub
	fakeReturns := fake.syncARecordReturns
	fake.recordInvocation("SyncARecord", []interface{}{arg1, arg2, arg3})
	fake.syncARecordMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDNSManager) SyncARecordCallCount() int {
	fake.syncARecordMutex.RLock()
	defer fake.syncARecordMutex.RUnlock()
	return len(fake.syncARecordArgsForCall)
}

func (fake *FakeDNSManager) SyncARecordCalls(stub func(datatypes.Virtual_Guest, int, int) error) {
	fake.syncARecordMutex.Lock()
	defer fake.syncARecordMutex.Unlock()
	fake.SyncARecordStub = stub
}

func (fake *FakeDNSManager) SyncARecordArgsForCall(i int) (datatypes.Virtual_Guest, int, int) {
	fake.syncARecordMutex.RLock()
	defer fake.syncARecordMutex.RUnlock()
	argsForCall := fake.syncARecordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDNSManager) SyncARecordReturns(result1 error) {
	fake.syncARecordMutex.Lock()
	defer fake.syncARecordMutex.Unlock()
	fake.SyncARecordStub = nil
	fake.syncARecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SyncARecordReturnsOnCall(i int, result1 error) {
	fake.syncARecordMutex.Lock()
	defer fake.syncARecordMutex.Unlock()
	fake.SyncARecordStub = nil
	if fake.syncARecordReturnsOnCall == nil {
		fake.syncARecordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncARecordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SyncPTRRecord(arg1 datatypes.Virtual_Guest, arg2 int) error {
	fake.syncPTRRecordMutex.Lock()
	ret, specificReturn := fake.syncPTRRecordReturnsOnCall[len(fake.syncPTRRecordArgsForCall)]
	fake.syncPTRRecordArgsForCall = append(fake.syncPTRRecordArgsForCall, struct {
		arg1 datatypes.Virtual_Guest
		arg2 int
	}{arg1, arg2})
	stub := fake.SyncPTRRecordStub
	fakeReturns := fake.syncPTRRecordReturns
	fake.recordInvocation("SyncPTRRecord", []interface{}{arg1, arg2})
	fake.syncPTRRecordMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDNSManager) SyncPTRRecordCallCount() int {
	fake.syncPTRRecordMutex.RLock()
	defer fake.syncPTRRecordMutex.RUnlock()
	return len(fake.syncPTRRecordArgsForCall)
}

func (fake *FakeDNSManager) SyncPTRRecordCalls(stub func(datatypes.Virtual_Guest, int) error) {
	fake.syncPTRRecordMutex.Lock()
	defer fake.syncPTRRecordMutex.Unlock()
	fake.SyncPTRRecordStub = stub
}

func (fake *FakeDNSManager) SyncPTRRecordArgsForCall(i int) (datatypes.Virtual_Guest, int) {
	fake.syncPTRRecordMutex.RLock()
	defer fake.syncPTRRecordMutex.RUnlock()
	argsForCall := fake.syncPTRRecordArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDNSManager) SyncPTRRecordReturns(result1 error) {
	fake.syncPTRRecordMutex.Lock()
	defer fake.syncPTRRecordMutex.Unlock()
	fake.SyncPTRRecordStub = nil
	fake.syncPTRRecordReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) SyncPTRRecordReturnsOnCall(i int, result1 error) {
	fake.syncPTRRecordMutex.Lock()
	defer fake.syncPTRRecordMutex.Unlock()
	fake.SyncPTRRecordStub = nil
	if fake.syncPTRRecordReturnsOnCall == nil {
		fake.syncPTRRecordReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.syncPTRRecordReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDNSManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createResourceRecordMutex.RLock()
	defer fake.createResourceRecordMutex.RUnlock()
	fake.createZoneMutex.RLock()
	defer fake.createZoneMutex.RUnlock()
	fake.deleteResourceRecordMutex.RLock()
	defer fake.deleteResourceRecordMutex.RUnlock()
	fake.deleteZoneMutex.RLock()
	defer fake.deleteZoneMutex.RUnlock()
	fake.dumpZoneMutex.RLock()
	defer fake.dumpZoneMutex.RUnlock()
	fake.editResourceRecordMutex.RLock()
	defer fake.editResourceRecordMutex.RUnlock()
	fake.getResourceRecordMutex.RLock()
	defer fake.getResourceRecordMutex.RUnlock()
	fake.getZoneMutex.RLock()
	defer fake.getZoneMutex.RUnlock()
	fake.getZoneIdFromNameMutex.RLock()
	defer fake.getZoneIdFromNameMutex.RUnlock()
	fake.listResourceRecordsMutex.RLock()
	defer fake.listResourceRecordsMutex.RUnlock()
	fake.listZonesMutex.RLock()
	defer fake.listZonesMutex.RUnlock()
	fake.resourceRecordCreateMutex.RLock()
	defer fake.resourceRecordCreateMutex.RUnlock()
	fake.srvResourceRecordCreateMutex.RLock()
	defer fake.srvResourceRecordCreateMutex.RUnlock()
	fake.syncAAAARecordMutex.RLock()
	defer fake.syncAAAARecordMutex.RUnlock()
	fake.syncARecordMutex.RLock()
	defer fake.syncARecordMutex.RUnlock()
	fake.syncPTRRecordMutex.RLock()
	defer fake.syncPTRRecordMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDNSManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ managers.DNSManager = new(FakeDNSManager)
